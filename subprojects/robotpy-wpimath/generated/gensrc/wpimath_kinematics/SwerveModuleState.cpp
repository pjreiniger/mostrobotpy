
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/kinematics/SwerveModuleState.h>


#include <units_velocity_type_caster.h>



#include <pybind11/operators.h>











#include <wpystruct.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_SwerveModuleState_initializer {


  

  












  py::class_<typename frc::SwerveModuleState> cls_SwerveModuleState;

    

    
    

  py::module &m;

  
  rpybuild_SwerveModuleState_initializer(py::module &m) :

  

  

  

  
    cls_SwerveModuleState(m, "SwerveModuleState"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_SwerveModuleState.doc() =
    "Represents the state of one swerve module.";

  cls_SwerveModuleState
  
    
  .def(py::self == py::self, py::doc(
    "Checks equality between this SwerveModuleState and another object.\n"
"\n"
":param other: The other object.\n"
"\n"
":returns: Whether the two objects are equal.")
  )
  
  
  
    
  .
def_static
("optimize", &frc::SwerveModuleState::Optimize,
      py::arg("desiredState"), py::arg("currentAngle"), release_gil(), py::doc(
    "Minimize the change in heading the desired swerve module state would\n"
"require by potentially reversing the direction the wheel spins. If this is\n"
"used with the PIDController class's continuous input functionality, the\n"
"furthest a wheel will ever rotate is 90 degrees.\n"
"\n"
":param desiredState: The desired state.\n"
":param currentAngle: The current module angle.")
  )
  
  
  
    .def_readwrite("speed", &frc::SwerveModuleState::speed, py::doc(
    "Speed of the wheel of the module."))
  
    .def_readwrite("angle", &frc::SwerveModuleState::angle, py::doc(
    "Angle of the module."))
  ;

  


  }







  cls_SwerveModuleState
  .def(
    py::init<
      units::meters_per_second_t, frc::Rotation2d
    >(),
    py::arg("speed") = 0, py::arg("angle") = frc::Rotation2d()
  )
  .def_property("speed_fps",
    [](SwerveModuleState * self) -> units::feet_per_second_t {
      return self->speed;
    },
    [](SwerveModuleState * self, units::feet_per_second_t speed) {
      self->speed = speed;
    }
  )
  .def("__repr__", [](const SwerveModuleState &ss) -> std::string {
    return "SwerveModuleState(speed=" + std::to_string(ss.speed()) + ", "
                             "angle=" + std::to_string(ss.angle.Radians()()) + ")";
  })
;

SetupWPyStruct<frc::SwerveModuleState>(cls_SwerveModuleState);


}

}; // struct rpybuild_SwerveModuleState_initializer

static std::unique_ptr<rpybuild_SwerveModuleState_initializer> cls;

void begin_init_SwerveModuleState(py::module &m) {
  cls = std::make_unique<rpybuild_SwerveModuleState_initializer>(m);
}

void finish_init_SwerveModuleState() {
  cls->finish();
  cls.reset();
}