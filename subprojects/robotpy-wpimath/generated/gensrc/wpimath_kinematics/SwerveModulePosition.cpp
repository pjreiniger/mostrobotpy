
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/kinematics/SwerveModulePosition.h>


#include <units_length_type_caster.h>



#include <pybind11/operators.h>











#include <wpystruct.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_SwerveModulePosition_initializer {


  

  












  py::class_<typename frc::SwerveModulePosition> cls_SwerveModulePosition;

    

    
    

  py::module &m;

  
  rpybuild_SwerveModulePosition_initializer(py::module &m) :

  

  

  

  
    cls_SwerveModulePosition(m, "SwerveModulePosition"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_SwerveModulePosition.doc() =
    "Represents the position of one swerve module.";

  cls_SwerveModulePosition
  
    
  .def(py::self == py::self, py::doc(
    "Checks equality between this SwerveModulePosition and another object.\n"
"\n"
":param other: The other object.\n"
"\n"
":returns: Whether the two objects are equal.")
  )
  
  
  
    
  .
def
("interpolate", &frc::SwerveModulePosition::Interpolate,
      py::arg("endValue"), py::arg("t"), release_gil()
  )
  
  
  
    .def_readwrite("distance", &frc::SwerveModulePosition::distance, py::doc(
    "Distance the wheel of a module has traveled"))
  
    .def_readwrite("angle", &frc::SwerveModulePosition::angle, py::doc(
    "Angle of the module."))
  .def(
  py::init<
    units::meter_t, frc::Rotation2d
  >(),
  py::arg("distance") = 0, py::arg("angle") = frc::Rotation2d()
)
.def_property("distance_ft",
  [](SwerveModulePosition * self) -> units::foot_t {
    return self->distance;
  },
  [](SwerveModulePosition * self, units::foot_t distance) {
    self->distance = distance;
  }
)
.def("__repr__", [](const SwerveModulePosition &ss) -> std::string {
  return "SwerveModulePosition(distance=" + std::to_string(ss.distance()) + ", "
                              "angle=" + std::to_string(ss.angle.Radians()()) + ")";
})
;

  


  }







  SetupWPyStruct<frc::SwerveModulePosition>(cls_SwerveModulePosition);


}

}; // struct rpybuild_SwerveModulePosition_initializer

static std::unique_ptr<rpybuild_SwerveModulePosition_initializer> cls;

void begin_init_SwerveModulePosition(py::module &m) {
  cls = std::make_unique<rpybuild_SwerveModulePosition_initializer>(m);
}

void finish_init_SwerveModulePosition() {
  cls->finish();
  cls.reset();
}