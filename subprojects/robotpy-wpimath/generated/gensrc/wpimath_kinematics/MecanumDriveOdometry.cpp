
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/kinematics/MecanumDriveOdometry.h>
















#include <type_traits>


  using namespace frc;





struct rpybuild_MecanumDriveOdometry_initializer {


  

  












  py::class_<typename frc::MecanumDriveOdometry, frc::Odometry<MecanumDriveWheelSpeeds, MecanumDriveWheelPositions>> cls_MecanumDriveOdometry;

    

    
    

  py::module &m;

  
  rpybuild_MecanumDriveOdometry_initializer(py::module &m) :

  

  

  

  
    cls_MecanumDriveOdometry(m, "MecanumDriveOdometry"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_MecanumDriveOdometry.doc() =
    "Class for mecanum drive odometry. Odometry allows you to track the robot's\n"
"position on the field over a course of a match using readings from your\n"
"mecanum wheel encoders.\n"
"\n"
"Teams can use odometry during the autonomous period for complex tasks like\n"
"path following. Furthermore, odometry can be used for latency compensation\n"
"when using computer-vision systems.";

  cls_MecanumDriveOdometry
  
    
  .def(py::init<MecanumDriveKinematics, const Rotation2d&, const MecanumDriveWheelPositions&, const Pose2d&>(),
      py::arg("kinematics"), py::arg("gyroAngle"), py::arg("wheelPositions"), py::arg("initialPose") = Pose2d{}, release_gil()
    , py::keep_alive<1, 3>()
    , py::keep_alive<1, 4>()
    , py::keep_alive<1, 5>(), py::doc(
    "Constructs a MecanumDriveOdometry object.\n"
"\n"
":param kinematics:     The mecanum drive kinematics for your drivetrain.\n"
":param gyroAngle:      The angle reported by the gyroscope.\n"
":param wheelPositions: The current distances measured by each wheel.\n"
":param initialPose:    The starting position of the robot on the field.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_MecanumDriveOdometry_initializer

static std::unique_ptr<rpybuild_MecanumDriveOdometry_initializer> cls;

void begin_init_MecanumDriveOdometry(py::module &m) {
  cls = std::make_unique<rpybuild_MecanumDriveOdometry_initializer>(m);
}

void finish_init_MecanumDriveOdometry() {
  cls->finish();
  cls.reset();
}