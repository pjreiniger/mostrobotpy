
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/kinematics/MecanumDriveWheelSpeeds.h>


#include <units_velocity_type_caster.h>



#include <pybind11/operators.h>











#include <wpystruct.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_MecanumDriveWheelSpeeds_initializer {


  

  












  py::class_<typename frc::MecanumDriveWheelSpeeds> cls_MecanumDriveWheelSpeeds;

    

    
    

  py::module &m;

  
  rpybuild_MecanumDriveWheelSpeeds_initializer(py::module &m) :

  

  

  

  
    cls_MecanumDriveWheelSpeeds(m, "MecanumDriveWheelSpeeds"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_MecanumDriveWheelSpeeds.doc() =
    "Represents the wheel speeds for a mecanum drive drivetrain.";

  cls_MecanumDriveWheelSpeeds
  
    
  .
def
("desaturate", &frc::MecanumDriveWheelSpeeds::Desaturate,
      py::arg("attainableMaxSpeed"), release_gil(), py::doc(
    "Renormalizes the wheel speeds if any individual speed is above the\n"
"specified maximum.\n"
"\n"
"Sometimes, after inverse kinematics, the requested speed from one or\n"
"more wheels may be above the max attainable speed for the driving motor on\n"
"that wheel. To fix this issue, one can reduce all the wheel speeds to make\n"
"sure that all requested module speeds are at-or-below the absolute\n"
"threshold, while maintaining the ratio of speeds between wheels.\n"
"\n"
":param attainableMaxSpeed: The absolute max speed that a wheel can reach.")
  )
  
  
  
    
  .def(py::self + py::self, py::doc(
    "Adds two MecanumDriveWheelSpeeds and returns the sum.\n"
"\n"
"For example, MecanumDriveWheelSpeeds{1.0, 0.5, 2.0, 1.5} +\n"
"MecanumDriveWheelSpeeds{2.0, 1.5, 0.5, 1.0} =\n"
"MecanumDriveWheelSpeeds{3.0, 2.0, 2.5, 2.5}\n"
"\n"
":param other: The MecanumDriveWheelSpeeds to add.\n"
"\n"
":returns: The sum of the MecanumDriveWheelSpeeds.")
  )
  
  
  
    
  .def(py::self - py::self, py::doc(
    "Subtracts the other MecanumDriveWheelSpeeds from the current\n"
"MecanumDriveWheelSpeeds and returns the difference.\n"
"\n"
"For example, MecanumDriveWheelSpeeds{5.0, 4.0, 6.0, 2.5} -\n"
"MecanumDriveWheelSpeeds{1.0, 2.0, 3.0, 0.5} =\n"
"MecanumDriveWheelSpeeds{4.0, 2.0, 3.0, 2.0}\n"
"\n"
":param other: The MecanumDriveWheelSpeeds to subtract.\n"
"\n"
":returns: The difference between the two MecanumDriveWheelSpeeds.")
  )
  
  
  
    
  .def(- py::self, py::doc(
    "Returns the inverse of the current MecanumDriveWheelSpeeds.\n"
"This is equivalent to negating all components of the\n"
"MecanumDriveWheelSpeeds.\n"
"\n"
":returns: The inverse of the current MecanumDriveWheelSpeeds.")
  )
  
  
  
    
  .def(py::self * double(), py::doc(
    "Multiplies the MecanumDriveWheelSpeeds by a scalar and returns the new\n"
"MecanumDriveWheelSpeeds.\n"
"\n"
"For example, MecanumDriveWheelSpeeds{2.0, 2.5, 3.0, 3.5} * 2 =\n"
"MecanumDriveWheelSpeeds{4.0, 5.0, 6.0, 7.0}\n"
"\n"
":param scalar: The scalar to multiply by.\n"
"\n"
":returns: The scaled MecanumDriveWheelSpeeds.")
  )
  
  
  
    
  .def(py::self / double(), py::doc(
    "Divides the MecanumDriveWheelSpeeds by a scalar and returns the new\n"
"MecanumDriveWheelSpeeds.\n"
"\n"
"For example, MecanumDriveWheelSpeeds{2.0, 2.5, 1.5, 1.0} / 2 =\n"
"MecanumDriveWheelSpeeds{1.0, 1.25, 0.75, 0.5}\n"
"\n"
":param scalar: The scalar to divide by.\n"
"\n"
":returns: The scaled MecanumDriveWheelSpeeds.")
  )
  
  
  
    .def_readwrite("frontLeft", &frc::MecanumDriveWheelSpeeds::frontLeft, py::doc(
    "Speed of the front-left wheel."))
  
    .def_readwrite("frontRight", &frc::MecanumDriveWheelSpeeds::frontRight, py::doc(
    "Speed of the front-right wheel."))
  
    .def_readwrite("rearLeft", &frc::MecanumDriveWheelSpeeds::rearLeft, py::doc(
    "Speed of the rear-left wheel."))
  
    .def_readwrite("rearRight", &frc::MecanumDriveWheelSpeeds::rearRight, py::doc(
    "Speed of the rear-right wheel."))
  ;

  


  }







  cls_MecanumDriveWheelSpeeds
  .def(
    py::init<
      units::meters_per_second_t, units::meters_per_second_t,
      units::meters_per_second_t, units::meters_per_second_t
    >(),
    py::arg("frontLeft") = 0, py::arg("frontRight") = 0,
    py::arg("rearLeft") = 0, py::arg("rearRight") = 0
  )
  .def_static("fromFeet", [](
      units::feet_per_second_t frontLeft,
      units::feet_per_second_t frontRight,
      units::feet_per_second_t rearLeft,
      units::feet_per_second_t rearRight
  ){
    return MecanumDriveWheelSpeeds{frontLeft, frontRight, rearLeft, rearRight};
  }, py::arg("frontLeft"), py::arg("frontRight"),
     py::arg("rearLeft"), py::arg("rearRight"))
  .def_property("frontLeft_fps",
    [](MecanumDriveWheelSpeeds * self) -> units::feet_per_second_t {
      return self->frontLeft;
    },
    [](MecanumDriveWheelSpeeds * self, units::feet_per_second_t fps) {
      self->frontLeft = fps;
    }
  )
  .def_property("frontRight_fps", 
    [](MecanumDriveWheelSpeeds * self) -> units::feet_per_second_t {
      return self->frontRight;
    },
    [](MecanumDriveWheelSpeeds * self, units::feet_per_second_t fps) {
      self->frontRight = fps;
    }
  )
  .def_property("rearLeft_fps",
    [](MecanumDriveWheelSpeeds * self) -> units::feet_per_second_t {
      return self->rearLeft;
    },
    [](MecanumDriveWheelSpeeds * self, units::feet_per_second_t fps) {
      self->rearLeft = fps;
    }
  )
  .def_property("rearRight_fps", 
    [](MecanumDriveWheelSpeeds * self) -> units::feet_per_second_t {
      return self->rearRight;
    },
    [](MecanumDriveWheelSpeeds * self, units::feet_per_second_t fps) {
      self->rearRight = fps;
    }
  )
  .def("__repr__", [](const MecanumDriveWheelSpeeds &ms) -> std::string {
    return "MecanumDriveWheelSpeeds(frontLeft=" + std::to_string(ms.frontLeft()) + ", "
                                   "frontRight=" + std::to_string(ms.frontRight()) + ", "
                                   "rearLeft=" + std::to_string(ms.rearLeft()) + ", "
                                   "rearRight=" + std::to_string(ms.rearRight()) + ")";
  })
;

SetupWPyStruct<frc::MecanumDriveWheelSpeeds>(cls_MecanumDriveWheelSpeeds);


}

}; // struct rpybuild_MecanumDriveWheelSpeeds_initializer

static std::unique_ptr<rpybuild_MecanumDriveWheelSpeeds_initializer> cls;

void begin_init_MecanumDriveWheelSpeeds(py::module &m) {
  cls = std::make_unique<rpybuild_MecanumDriveWheelSpeeds_initializer>(m);
}

void finish_init_MecanumDriveWheelSpeeds() {
  cls->finish();
  cls.reset();
}