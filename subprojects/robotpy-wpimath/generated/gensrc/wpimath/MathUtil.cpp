
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/MathUtil.h>


#include <units_angle_type_caster.h>















#include <type_traits>


  using namespace frc;



struct rpybuild_MathUtil_initializer {













  py::module &m;

  
  rpybuild_MathUtil_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("applyDeadband", &frc::template ApplyDeadband<double>,
      py::arg("value"), py::arg("deadband"), py::arg("maxMagnitude") = 1.0, release_gil(), py::doc(
    "Returns 0.0 if the given value is within the specified range around zero. The\n"
"remaining range between the deadband and the maximum magnitude is scaled from\n"
"0.0 to the maximum magnitude.\n"
"\n"
":param value:        Value to clip.\n"
":param deadband:     Range around zero.\n"
":param maxMagnitude: The maximum magnitude of the input (defaults to 1). Can\n"
"                     be infinite.\n"
"\n"
":returns: The value after the deadband is applied.")
  )
  
  
    ;
m
  .
def
("inputModulus", &frc::template InputModulus<double>,
      py::arg("input"), py::arg("minimumInput"), py::arg("maximumInput"), release_gil(), py::doc(
    "Returns modulus of input.\n"
"\n"
":param input:        Input value to wrap.\n"
":param minimumInput: The minimum value expected from the input.\n"
":param maximumInput: The maximum value expected from the input.")
  )
  
  
    ;
m
  .
def
("angleModulus", &frc::AngleModulus,
      py::arg("angle"), release_gil()
  )
  
  ;
m
  .
def
("floorDiv", [](int64_t x, int64_t y) -> int64_t {
  return frc::FloorDiv(x, y);
}
,
      py::arg("x"), py::arg("y"), py::doc(
    "Returns the largest (closest to positive infinity)\n"
"``int`` value that is less than or equal to the algebraic quotient.\n"
"\n"
":param x: the dividend\n"
":param y: the divisor\n"
"\n"
":returns: the largest (closest to positive infinity)\n"
"          ``int`` value that is less than or equal to the algebraic quotient.")
  )
  
  
    ;
m
  .
def
("floorMod", [](int64_t x, int64_t y) -> int64_t {
  return frc::FloorMod(x, y);
}
,
      py::arg("x"), py::arg("y"), py::doc(
    "Returns the floor modulus of the ``int`` arguments.\n"
"\n"
"The floor modulus is ``r = x - (floorDiv(x, y) * y)``,\n"
"has the same sign as the divisor ``y`` or is zero, and\n"
"is in the range of ``-std::abs(y) < r < +std::abs(y)``.\n"
"\n"
":param x: the dividend\n"
":param y: the divisor\n"
"\n"
":returns: the floor modulus ``x - (floorDiv(x, y) * y)``")
  )
  
  
    ;



}

}; // struct rpybuild_MathUtil_initializer

static std::unique_ptr<rpybuild_MathUtil_initializer> cls;

void begin_init_MathUtil(py::module &m) {
  cls = std::make_unique<rpybuild_MathUtil_initializer>(m);
}

void finish_init_MathUtil() {
  cls->finish();
  cls.reset();
}