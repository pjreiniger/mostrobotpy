
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/filter/Debouncer.h>


#include <units_time_type_caster.h>















#include <type_traits>


  using namespace frc;



struct rpybuild_Debouncer_initializer {


  

  












  py::class_<typename frc::Debouncer> cls_Debouncer;

    
    
  py::enum_<frc::Debouncer::DebounceType> cls_Debouncer_enum1;
    

    
    

  py::module &m;

  
  rpybuild_Debouncer_initializer(py::module &m) :

  

  

  

  
    cls_Debouncer(m, "Debouncer"),

  
    cls_Debouncer_enum1
  (cls_Debouncer, "DebounceType"
  ,
    "Type of debouncing to perform."),
  

  
  
  

    m(m)
  {
    
    

    
    
  
    cls_Debouncer_enum1
  
    .value("kRising", frc::Debouncer::DebounceType::kRising,
      "Rising edge.")
  
    .value("kFalling", frc::Debouncer::DebounceType::kFalling,
      "Falling edge.")
  
    .value("kBoth", frc::Debouncer::DebounceType::kBoth,
      "Both rising and falling edges.")
  ;

  

    
    
  }

void finish() {





  {
  
  
  using DebounceType [[maybe_unused]] = typename frc::Debouncer::DebounceType;
  
  


  

  cls_Debouncer.doc() =
    "A simple debounce filter for boolean streams.  Requires that the boolean\n"
"change value from baseline for a specified period of time before the filtered\n"
"value changes.";

  cls_Debouncer
  
    
  .def(py::init<units::second_t, DebounceType>(),
      py::arg("debounceTime"), py::arg("type") = frc::Debouncer::DebounceType::kRising, release_gil(), py::doc(
    "Creates a new Debouncer.\n"
"\n"
":param debounceTime: The number of seconds the value must change from\n"
"                     baseline for the filtered value to change.\n"
":param type:         Which type of state change the debouncing will be\n"
"                     performed on.")
  )
  
  
  
    
  .
def
("calculate", &frc::Debouncer::Calculate,
      py::arg("input"), release_gil(), py::doc(
    "Applies the debouncer to the input stream.\n"
"\n"
":param input: The current value of the input stream.\n"
"\n"
":returns: The debounced value of the input stream.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_Debouncer_initializer

static std::unique_ptr<rpybuild_Debouncer_initializer> cls;

void begin_init_Debouncer(py::module &m) {
  cls = std::make_unique<rpybuild_Debouncer_initializer>(m);
}

void finish_init_Debouncer() {
  cls->finish();
  cls.reset();
}