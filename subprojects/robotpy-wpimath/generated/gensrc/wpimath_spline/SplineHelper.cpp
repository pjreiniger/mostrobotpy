
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/spline/SplineHelper.h>


#include <pybind11/stl.h>

#include <wpi_array_type_caster.h>















#include <type_traits>


  using namespace frc;





struct rpybuild_SplineHelper_initializer {


  

  












  py::class_<typename frc::SplineHelper> cls_SplineHelper;

    

    
    

  py::module &m;

  
  rpybuild_SplineHelper_initializer(py::module &m) :

  

  

  

  
    cls_SplineHelper(m, "SplineHelper"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_SplineHelper.doc() =
    "Helper class that is used to generate cubic and quintic splines from user\n"
"provided waypoints.";

  cls_SplineHelper
  
    .def(py::init<>(), release_gil())
  
    
  .
def_static
("cubicControlVectorsFromWaypoints", &frc::SplineHelper::CubicControlVectorsFromWaypoints,
      py::arg("start"), py::arg("interiorWaypoints"), py::arg("end"), release_gil(), py::doc(
    "Returns 2 cubic control vectors from a set of exterior waypoints and\n"
"interior translations.\n"
"\n"
":param start:             The starting pose.\n"
":param interiorWaypoints: The interior waypoints.\n"
":param end:               The ending pose.\n"
"\n"
":returns: 2 cubic control vectors.")
  )
  
  
  
    
  .
def_static
("quinticSplinesFromWaypoints", &frc::SplineHelper::QuinticSplinesFromWaypoints,
      py::arg("waypoints"), release_gil(), py::doc(
    "Returns quintic splines from a set of waypoints.\n"
"\n"
":param waypoints: The waypoints\n"
"\n"
":returns: List of quintic splines.")
  )
  
  
  
    
  .
def_static
("cubicSplinesFromControlVectors", &frc::SplineHelper::CubicSplinesFromControlVectors,
      py::arg("start"), py::arg("waypoints"), py::arg("end"), release_gil(), py::doc(
    "Returns a set of cubic splines corresponding to the provided control\n"
"vectors. The user is free to set the direction of the start and end\n"
"point. The directions for the middle waypoints are determined\n"
"automatically to ensure continuous curvature throughout the path.\n"
"\n"
"The derivation for the algorithm used can be found here:\n"
"<https://www.uio.no/studier/emner/matnat/ifi/nedlagte-emner/INF-MAT4350/h08/undervisningsmateriale/chap7alecture.pdf>\n"
"\n"
":param start:     The starting control vector.\n"
":param waypoints: The middle waypoints. This can be left blank if you\n"
"                  only wish to create a path with two waypoints.\n"
":param end:       The ending control vector.\n"
"\n"
":returns: A vector of cubic hermite splines that interpolate through the\n"
"          provided waypoints.")
  )
  
  
  
    
  .
def_static
("quinticSplinesFromControlVectors", &frc::SplineHelper::QuinticSplinesFromControlVectors,
      py::arg("controlVectors"), release_gil(), py::doc(
    "Returns a set of quintic splines corresponding to the provided control\n"
"vectors. The user is free to set the direction of all waypoints. Continuous\n"
"curvature is guaranteed throughout the path.\n"
"\n"
":param controlVectors: The control vectors.\n"
"\n"
":returns: A vector of quintic hermite splines that interpolate through the\n"
"          provided waypoints.")
  )
  
  
  
    
  .
def_static
("optimizeCurvature", &frc::SplineHelper::OptimizeCurvature,
      py::arg("splines"), release_gil(), py::doc(
    "Optimizes the curvature of 2 or more quintic splines at knot points.\n"
"Overall, this reduces the integral of the absolute value of the second\n"
"derivative across the set of splines.\n"
"\n"
":param splines: A vector of un-optimized quintic splines.\n"
"\n"
":returns: A vector of optimized quintic splines.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_SplineHelper_initializer

static std::unique_ptr<rpybuild_SplineHelper_initializer> cls;

void begin_init_SplineHelper(py::module &m) {
  cls = std::make_unique<rpybuild_SplineHelper_initializer>(m);
}

void finish_init_SplineHelper() {
  cls->finish();
  cls.reset();
}