
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/geometry/CoordinateSystem.h>
















#include <type_traits>


  using namespace frc;





struct rpybuild_CoordinateSystem_initializer {


  

  












  py::class_<typename frc::CoordinateSystem> cls_CoordinateSystem;

    

    
    

  py::module &m;

  
  rpybuild_CoordinateSystem_initializer(py::module &m) :

  

  

  

  
    cls_CoordinateSystem(m, "CoordinateSystem"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_CoordinateSystem.doc() =
    "A helper class that converts Pose3d objects between different standard\n"
"coordinate frames.";

  cls_CoordinateSystem
  
    
  .def(py::init<const CoordinateAxis&, const CoordinateAxis&, const CoordinateAxis&>(),
      py::arg("positiveX"), py::arg("positiveY"), py::arg("positiveZ"), release_gil()
    , py::keep_alive<1, 2>()
    , py::keep_alive<1, 3>()
    , py::keep_alive<1, 4>(), py::doc(
    "Constructs a coordinate system with the given cardinal directions for each\n"
"axis.\n"
"\n"
":param positiveX: The cardinal direction of the positive x-axis.\n"
":param positiveY: The cardinal direction of the positive y-axis.\n"
":param positiveZ: The cardinal direction of the positive z-axis.\n"
"                  @throws std::domain_error if the coordinate system isn't special orthogonal")
  )
  
  
  
    
  .
def_static
("NWU", &frc::CoordinateSystem::NWU, release_gil(), py::doc(
    "Returns an instance of the North-West-Up (NWU) coordinate system.\n"
"\n"
"The +X axis is north, the +Y axis is west, and the +Z axis is up.")
  )
  
  
  
    
  .
def_static
("EDN", &frc::CoordinateSystem::EDN, release_gil(), py::doc(
    "Returns an instance of the East-Down-North (EDN) coordinate system.\n"
"\n"
"The +X axis is east, the +Y axis is down, and the +Z axis is north.")
  )
  
  
  
    
  .
def_static
("NED", &frc::CoordinateSystem::NED, release_gil(), py::doc(
    "Returns an instance of the NED coordinate system.\n"
"\n"
"The +X axis is north, the +Y axis is east, and the +Z axis is down.")
  )
  
  
  
    
  .
def_static
("convert", static_cast<Translation3d(*)(const Translation3d&, const CoordinateSystem&, const CoordinateSystem&)>(
        &frc::CoordinateSystem::Convert),
      py::arg("translation"), py::arg("from_"), py::arg("to"), release_gil(), py::doc(
    "Converts the given translation from one coordinate system to another.\n"
"\n"
":param translation: The translation to convert.\n"
":param from_:       The coordinate system the translation starts in.\n"
":param to:          The coordinate system to which to convert.\n"
"\n"
":returns: The given translation in the desired coordinate system.")
  )
  
  
  
    
  .
def_static
("convert", static_cast<Rotation3d(*)(const Rotation3d&, const CoordinateSystem&, const CoordinateSystem&)>(
        &frc::CoordinateSystem::Convert),
      py::arg("rotation"), py::arg("from_"), py::arg("to"), release_gil(), py::doc(
    "Converts the given rotation from one coordinate system to another.\n"
"\n"
":param rotation: The rotation to convert.\n"
":param from_:    The coordinate system the rotation starts in.\n"
":param to:       The coordinate system to which to convert.\n"
"\n"
":returns: The given rotation in the desired coordinate system.")
  )
  
  
  
    
  .
def_static
("convert", static_cast<Pose3d(*)(const Pose3d&, const CoordinateSystem&, const CoordinateSystem&)>(
        &frc::CoordinateSystem::Convert),
      py::arg("pose"), py::arg("from_"), py::arg("to"), release_gil(), py::doc(
    "Converts the given pose from one coordinate system to another.\n"
"\n"
":param pose:  The pose to convert.\n"
":param from_: The coordinate system the pose starts in.\n"
":param to:    The coordinate system to which to convert.\n"
"\n"
":returns: The given pose in the desired coordinate system.")
  )
  
  
  
    
  .
def_static
("convert", static_cast<Transform3d(*)(const Transform3d&, const CoordinateSystem&, const CoordinateSystem&)>(
        &frc::CoordinateSystem::Convert),
      py::arg("transform"), py::arg("from_"), py::arg("to"), release_gil(), py::doc(
    "Converts the given transform from one coordinate system to another.\n"
"\n"
":param transform: The transform to convert.\n"
":param from_:     The coordinate system the transform starts in.\n"
":param to:        The coordinate system to which to convert.\n"
"\n"
":returns: The given transform in the desired coordinate system.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_CoordinateSystem_initializer

static std::unique_ptr<rpybuild_CoordinateSystem_initializer> cls;

void begin_init_CoordinateSystem(py::module &m) {
  cls = std::make_unique<rpybuild_CoordinateSystem_initializer>(m);
}

void finish_init_CoordinateSystem() {
  cls->finish();
  cls.reset();
}