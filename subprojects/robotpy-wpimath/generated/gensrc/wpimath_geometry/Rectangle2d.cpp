
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/geometry/Rectangle2d.h>


#include <units_length_type_caster.h>



#include <pybind11/operators.h>











#include <rpy/geometryToString.h>

#include <wpystruct.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_Rectangle2d_initializer {


  

  












  py::class_<typename frc::Rectangle2d> cls_Rectangle2d;

    

    
    

  py::module &m;

  
  rpybuild_Rectangle2d_initializer(py::module &m) :

  

  

  

  
    cls_Rectangle2d(m, "Rectangle2d"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_Rectangle2d.doc() =
    "Represents a 2d rectangular space containing translational, rotational, and\n"
"scaling components.";

  cls_Rectangle2d
  
    
  .def(py::init<const Pose2d&, units::meter_t, units::meter_t>(),
      py::arg("center"), py::arg("xWidth"), py::arg("yWidth"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs a rectangle at the specified position with the specified width\n"
"and height.\n"
"\n"
":param center: The position (translation and rotation) of the rectangle.\n"
":param xWidth: The x size component of the rectangle, in unrotated\n"
"               coordinate frame.\n"
":param yWidth: The y size component of the rectangle, in unrotated\n"
"               coordinate frame.")
  )
  
  
  
    
  .def(py::init<const Translation2d&, const Translation2d&>(),
      py::arg("cornerA"), py::arg("cornerB"), release_gil()
    , py::keep_alive<1, 2>()
    , py::keep_alive<1, 3>(), py::doc(
    "Creates an unrotated rectangle from the given corners. The corners should\n"
"be diagonally opposite of each other.\n"
"\n"
":param cornerA: The first corner of the rectangle.\n"
":param cornerB: The second corner of the rectangle.")
  )
  
  
  
    
  .
def
("center", &frc::Rectangle2d::Center, release_gil(), py::doc(
    "Returns the center of the rectangle.\n"
"\n"
":returns: The center of the rectangle.")
  )
  
  
  
    
  .
def
("rotation", &frc::Rectangle2d::Rotation, release_gil(), py::doc(
    "Returns the rotational component of the rectangle.\n"
"\n"
":returns: The rotational component of the rectangle.")
  )
  
  
  
    
  .
def
("transformBy", &frc::Rectangle2d::TransformBy,
      py::arg("other"), release_gil(), py::doc(
    "Transforms the center of the rectangle and returns the new rectangle.\n"
"\n"
":param other: The transform to transform by.\n"
"\n"
":returns: The transformed rectangle")
  )
  
  
  
    
  .
def
("rotateBy", &frc::Rectangle2d::RotateBy,
      py::arg("other"), release_gil(), py::doc(
    "Rotates the center of the rectangle and returns the new rectangle.\n"
"\n"
":param other: The rotation to transform by.\n"
"\n"
":returns: The rotated rectangle.")
  )
  
  
  
    
  .
def
("intersects", &frc::Rectangle2d::Intersects,
      py::arg("point"), release_gil(), py::doc(
    "Checks if a point is intersected by the rectangle's perimeter.\n"
"\n"
":param point: The point to check.\n"
"\n"
":returns: True, if the rectangle's perimeter intersects the point.")
  )
  
  
  
    
  .
def
("contains", &frc::Rectangle2d::Contains,
      py::arg("point"), release_gil(), py::doc(
    "Checks if a point is contained within the rectangle. This is inclusive, if\n"
"the point lies on the perimeter it will return true.\n"
"\n"
":param point: The point to check.\n"
"\n"
":returns: True, if the rectangle contains the point or the perimeter\n"
"          intersects the point.")
  )
  
  
  
    
  .
def
("distance", &frc::Rectangle2d::Distance,
      py::arg("point"), release_gil(), py::doc(
    "Returns the distance between the perimeter of the rectangle and the point.\n"
"\n"
":param point: The point to check.\n"
"\n"
":returns: The distance (0, if the point is contained by the rectangle)")
  )
  
  
  
    
  .
def
("findNearestPoint", &frc::Rectangle2d::FindNearestPoint,
      py::arg("point"), release_gil(), py::doc(
    "Returns the nearest point that is contained within the rectangle.\n"
"\n"
":param point: The point that this will find the nearest point to.\n"
"\n"
":returns: A new point that is nearest to ``point`` and contained in the\n"
"          rectangle.")
  )
  
  
  
    
  .def(py::self == py::self, py::doc(
    "Checks equality between this Rectangle2d and another object.\n"
"\n"
":param other: The other object.\n"
"\n"
":returns: Whether the two objects are equal.")
  )
  
  
  ;

  


  }







  cls_Rectangle2d
  .def_static("fromFeet", [](const Pose2d& center, units::foot_t xWidth, units::foot_t yWidth) {
    return std::make_unique<Rectangle2d>(center, xWidth, yWidth);
  }, py::arg("center"), py::arg("xWidth"), py::arg("yWidth"))
  .def_property_readonly("xwidth", &Rectangle2d::XWidth)
  .def_property_readonly("ywidth", &Rectangle2d::YWidth)
  .def_property_readonly("xwidth_feet", [](Rectangle2d &self) -> units::foot_t {
    return self.XWidth();
  })
  .def_property_readonly("ywidth_feet", [](Rectangle2d &self) -> units::foot_t {
    return self.YWidth();
  })
  .def("__repr__", py::overload_cast<const Rectangle2d&>(&rpy::toString));


SetupWPyStruct<frc::Rectangle2d>(cls_Rectangle2d);

}

}; // struct rpybuild_Rectangle2d_initializer

static std::unique_ptr<rpybuild_Rectangle2d_initializer> cls;

void begin_init_Rectangle2d(py::module &m) {
  cls = std::make_unique<rpybuild_Rectangle2d_initializer>(m);
}

void finish_init_Rectangle2d() {
  cls->finish();
  cls.reset();
}