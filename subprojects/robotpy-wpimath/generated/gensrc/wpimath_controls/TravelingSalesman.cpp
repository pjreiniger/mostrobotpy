
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/path/TravelingSalesman.h>


#include <pybind11/functional.h>

#include <pybind11/stl.h>

#include <wpi_span_type_caster.h>















#include <type_traits>


  using namespace frc;



struct rpybuild_TravelingSalesman_initializer {


  

  




  py::module pkg_path;









  py::class_<typename frc::TravelingSalesman> cls_TravelingSalesman;

    

    
    

  py::module &m;

  
  rpybuild_TravelingSalesman_initializer(py::module &m) :

  
    pkg_path(m.def_submodule("path")),
  

  

  

  
    cls_TravelingSalesman(pkg_path, "TravelingSalesman"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_TravelingSalesman.doc() =
    "Given a list of poses, this class finds the shortest possible route that\n"
"visits each pose exactly once and returns to the origin pose.\n"
"\n"
"@see <a\n"
"href=\"https://en.wikipedia.org/wiki/Travelling_salesman_problem\">https://en.wikipedia.org/wiki/Travelling_salesman_problem</a>";

  cls_TravelingSalesman
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "Constructs a traveling salesman problem solver with a cost function defined\n"
"as the 2D distance between poses.")
  )
  
  
  
    
  .def(py::init<std::function<double (Pose2d, Pose2d)>>(),
      py::arg("cost").none(false), release_gil(), py::doc(
    "Constructs a traveling salesman problem solver with a user-provided cost\n"
"function.\n"
"\n"
":param cost: Function that returns the cost between two poses. The sum of\n"
"             the costs for every pair of poses is minimized.")
  )
  
  
  
    
  .
def
("solve", static_cast<std::vector<Pose2d>(frc::TravelingSalesman::*)(std::span<const Pose2d>, int)>(
        &frc::TravelingSalesman::Solve),
      py::arg("poses"), py::arg("iterations"), release_gil(), py::doc(
    "Finds the path through every pose that minimizes the cost. The first pose\n"
"in the returned array is the first pose that was passed in.\n"
"\n"
"This overload supports a dynamically-sized list of poses for Python to use.\n"
"\n"
":param poses:      An array of Pose2ds the path must pass through.\n"
":param iterations: The number of times the solver attempts to find a better\n"
"                   random neighbor.\n"
"\n"
":returns: The optimized path as an array of Pose2ds.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_TravelingSalesman_initializer

static std::unique_ptr<rpybuild_TravelingSalesman_initializer> cls;

void begin_init_TravelingSalesman(py::module &m) {
  cls = std::make_unique<rpybuild_TravelingSalesman_initializer>(m);
}

void finish_init_TravelingSalesman() {
  cls->finish();
  cls.reset();
}