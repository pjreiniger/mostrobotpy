
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/controller/DifferentialDriveFeedforward.h>


#include <units_acceleration_type_caster.h>

#include <units_angular_acceleration_type_caster.h>

#include <units_angular_velocity_type_caster.h>

#include <units_compound_type_caster.h>

#include <units_length_type_caster.h>

#include <units_time_type_caster.h>

#include <units_velocity_type_caster.h>















#include <type_traits>


  using namespace frc;



struct rpybuild_DifferentialDriveFeedforward_initializer {


  

  












  py::class_<typename frc::DifferentialDriveFeedforward> cls_DifferentialDriveFeedforward;

    

    
    

  py::module &m;

  
  rpybuild_DifferentialDriveFeedforward_initializer(py::module &m) :

  

  

  

  
    cls_DifferentialDriveFeedforward(m, "DifferentialDriveFeedforward"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DifferentialDriveFeedforward.doc() =
    "A helper class which computes the feedforward outputs for a differential\n"
"drive drivetrain.";

  cls_DifferentialDriveFeedforward
  
    
  .def(py::init<decltype(1_V/1_mps), decltype(1_V/1_mps_sq), decltype(1_V/1_rad_per_s), decltype(1_V/1_rad_per_s_sq), units::meter_t>(),
      py::arg("kVLinear"), py::arg("kALinear"), py::arg("kVAngular"), py::arg("kAAngular"), py::arg("trackwidth"), release_gil(), py::doc(
    "Creates a new DifferentialDriveFeedforward with the specified parameters.\n"
"\n"
":param kVLinear:   The linear velocity gain in volts per (meters per second).\n"
":param kALinear:   The linear acceleration gain in volts per (meters per\n"
"                   second squared).\n"
":param kVAngular:  The angular velocity gain in volts per (radians per\n"
"                   second).\n"
":param kAAngular:  The angular acceleration gain in volts per (radians per\n"
"                   second squared).\n"
":param trackwidth: The distance between the differential drive's left and\n"
"                   right wheels, in meters.")
  )
  
  
  
    
  .def(py::init<decltype(1_V/1_mps), decltype(1_V/1_mps_sq), decltype(1_V/1_mps), decltype(1_V/1_mps_sq)>(),
      py::arg("kVLinear"), py::arg("kALinear"), py::arg("kVAngular"), py::arg("kAAngular"), release_gil(), py::doc(
    "Creates a new DifferentialDriveFeedforward with the specified parameters.\n"
"\n"
":param kVLinear:  The linear velocity gain in volts per (meters per second).\n"
":param kALinear:  The linear acceleration gain in volts per (meters per\n"
"                  second squared).\n"
":param kVAngular: The angular velocity gain in volts per (meters per\n"
"                  second).\n"
":param kAAngular: The angular acceleration gain in volts per (meters per\n"
"                  second squared).")
  )
  
  
  
    
  .
def
("calculate", &frc::DifferentialDriveFeedforward::Calculate,
      py::arg("currentLeftVelocity"), py::arg("nextLeftVelocity"), py::arg("currentRightVelocity"), py::arg("nextRightVelocity"), py::arg("dt"), release_gil(), py::doc(
    "Calculates the differential drive feedforward inputs given velocity\n"
"setpoints.\n"
"\n"
":param currentLeftVelocity:  The current left velocity of the differential\n"
"                             drive in meters/second.\n"
":param nextLeftVelocity:     The next left velocity of the differential drive in\n"
"                             meters/second.\n"
":param currentRightVelocity: The current right velocity of the differential\n"
"                             drive in meters/second.\n"
":param nextRightVelocity:    The next right velocity of the differential drive\n"
"                             in meters/second.\n"
":param dt:                   Discretization timestep.")
  )
  
  
  
    .def_readonly("m_kVLinear", &frc::DifferentialDriveFeedforward::m_kVLinear)
  
    .def_readonly("m_kALinear", &frc::DifferentialDriveFeedforward::m_kALinear)
  
    .def_readonly("m_kVAngular", &frc::DifferentialDriveFeedforward::m_kVAngular)
  
    .def_readonly("m_kAAngular", &frc::DifferentialDriveFeedforward::m_kAAngular)
  ;

  


  }






}

}; // struct rpybuild_DifferentialDriveFeedforward_initializer

static std::unique_ptr<rpybuild_DifferentialDriveFeedforward_initializer> cls;

void begin_init_DifferentialDriveFeedforward(py::module &m) {
  cls = std::make_unique<rpybuild_DifferentialDriveFeedforward_initializer>(m);
}

void finish_init_DifferentialDriveFeedforward() {
  cls->finish();
  cls.reset();
}