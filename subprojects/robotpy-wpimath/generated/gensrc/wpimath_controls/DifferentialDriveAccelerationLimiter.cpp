
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/controller/DifferentialDriveAccelerationLimiter.h>


#include <units_acceleration_type_caster.h>

#include <units_angular_acceleration_type_caster.h>

#include <units_length_type_caster.h>

#include <units_velocity_type_caster.h>

#include <units_voltage_type_caster.h>















#include <type_traits>


  using namespace frc;



struct rpybuild_DifferentialDriveAccelerationLimiter_initializer {


  

  




  py::module pkg_controller;









  py::class_<typename frc::DifferentialDriveAccelerationLimiter> cls_DifferentialDriveAccelerationLimiter;

    

    
    

  py::module &m;

  
  rpybuild_DifferentialDriveAccelerationLimiter_initializer(py::module &m) :

  
    pkg_controller(m.def_submodule("controller")),
  

  

  

  
    cls_DifferentialDriveAccelerationLimiter(pkg_controller, "DifferentialDriveAccelerationLimiter"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DifferentialDriveAccelerationLimiter.doc() =
    "Filters the provided voltages to limit a differential drive's linear and\n"
"angular acceleration.\n"
"\n"
"The differential drive model can be created via the functions in\n"
"LinearSystemId.";

  cls_DifferentialDriveAccelerationLimiter
  
    
  .def(py::init<LinearSystem<2, 2, 2>, units::meter_t, units::meters_per_second_squared_t, units::radians_per_second_squared_t>(),
      py::arg("system"), py::arg("trackwidth"), py::arg("maxLinearAccel"), py::arg("maxAngularAccel"), release_gil(), py::doc(
    "Constructs a DifferentialDriveAccelerationLimiter.\n"
"\n"
":param system:          The differential drive dynamics.\n"
":param trackwidth:      The distance between the differential drive's left and\n"
"                        right wheels.\n"
":param maxLinearAccel:  The maximum linear acceleration.\n"
":param maxAngularAccel: The maximum angular acceleration.")
  )
  
  
  
    
  .def(py::init<LinearSystem<2, 2, 2>, units::meter_t, units::meters_per_second_squared_t, units::meters_per_second_squared_t, units::radians_per_second_squared_t>(),
      py::arg("system"), py::arg("trackwidth"), py::arg("minLinearAccel"), py::arg("maxLinearAccel"), py::arg("maxAngularAccel"), release_gil(), py::doc(
    "Constructs a DifferentialDriveAccelerationLimiter.\n"
"\n"
":param system:          The differential drive dynamics.\n"
":param trackwidth:      The distance between the differential drive's left and\n"
"                        right wheels.\n"
":param minLinearAccel:  The minimum (most negative) linear acceleration.\n"
":param maxLinearAccel:  The maximum (most positive) linear acceleration.\n"
":param maxAngularAccel: The maximum angular acceleration.\n"
"                        @throws std::invalid_argument if minimum linear acceleration is greater\n"
"                        than maximum linear acceleration")
  )
  
  
  
    
  .
def
("calculate", &frc::DifferentialDriveAccelerationLimiter::Calculate,
      py::arg("leftVelocity"), py::arg("rightVelocity"), py::arg("leftVoltage"), py::arg("rightVoltage"), release_gil(), py::doc(
    "Returns the next voltage pair subject to acceleration constraints.\n"
"\n"
":param leftVelocity:  The left wheel velocity.\n"
":param rightVelocity: The right wheel velocity.\n"
":param leftVoltage:   The unconstrained left motor voltage.\n"
":param rightVoltage:  The unconstrained right motor voltage.\n"
"\n"
":returns: The constrained wheel voltages.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DifferentialDriveAccelerationLimiter_initializer

static std::unique_ptr<rpybuild_DifferentialDriveAccelerationLimiter_initializer> cls;

void begin_init_DifferentialDriveAccelerationLimiter(py::module &m) {
  cls = std::make_unique<rpybuild_DifferentialDriveAccelerationLimiter_initializer>(m);
}

void finish_init_DifferentialDriveAccelerationLimiter() {
  cls->finish();
  cls.reset();
}