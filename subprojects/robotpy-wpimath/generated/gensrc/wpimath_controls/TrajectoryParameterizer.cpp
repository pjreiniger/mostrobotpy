
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/trajectory/TrajectoryParameterizer.h>


#include <pybind11/stl.h>

#include <units_acceleration_type_caster.h>

#include <units_compound_type_caster.h>

#include <units_velocity_type_caster.h>















#include <type_traits>


  using namespace frc;





struct rpybuild_TrajectoryParameterizer_initializer {


  

  




  py::module pkg_trajectory;









  py::class_<typename frc::TrajectoryParameterizer> cls_TrajectoryParameterizer;

    

    
    

  py::module &m;

  
  rpybuild_TrajectoryParameterizer_initializer(py::module &m) :

  
    pkg_trajectory(m.def_submodule("trajectory")),
  

  

  

  
    cls_TrajectoryParameterizer(pkg_trajectory, "TrajectoryParameterizer"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  
    using PoseWithCurvature [[maybe_unused]] = typename frc::TrajectoryParameterizer::PoseWithCurvature;
  


  

  cls_TrajectoryParameterizer.doc() =
    "Class used to parameterize a trajectory by time.";

  cls_TrajectoryParameterizer
  
    .def(py::init<>(), release_gil())
  
    
  .
def_static
("timeParameterizeTrajectory", &frc::TrajectoryParameterizer::TimeParameterizeTrajectory,
      py::arg("points"), py::arg("constraints"), py::arg("startVelocity"), py::arg("endVelocity"), py::arg("maxVelocity"), py::arg("maxAcceleration"), py::arg("reversed"), release_gil(), py::doc(
    "Parameterize the trajectory by time. This is where the velocity profile is\n"
"generated.\n"
"\n"
"The derivation of the algorithm used can be found here:\n"
"<http://www2.informatik.uni-freiburg.de/~lau/students/Sprunk2008.pdf>\n"
"\n"
":param points:          Reference to the spline points.\n"
":param constraints:     A vector of various velocity and acceleration\n"
"                        constraints.\n"
":param startVelocity:   The start velocity for the trajectory.\n"
":param endVelocity:     The end velocity for the trajectory.\n"
":param maxVelocity:     The max velocity for the trajectory.\n"
":param maxAcceleration: The max acceleration for the trajectory.\n"
":param reversed:        Whether the robot should move backwards. Note that the\n"
"                        robot will still move from a -> b -> ... -> z as defined in the waypoints.\n"
"\n"
":returns: The trajectory.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_TrajectoryParameterizer_initializer

static std::unique_ptr<rpybuild_TrajectoryParameterizer_initializer> cls;

void begin_init_TrajectoryParameterizer(py::module &m) {
  cls = std::make_unique<rpybuild_TrajectoryParameterizer_initializer>(m);
}

void finish_init_TrajectoryParameterizer() {
  cls->finish();
  cls.reset();
}