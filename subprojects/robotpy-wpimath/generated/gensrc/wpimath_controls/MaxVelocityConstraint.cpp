
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/trajectory/constraint/MaxVelocityConstraint.h>


#include <units_compound_type_caster.h>

#include <units_velocity_type_caster.h>







#define RPYGEN_ENABLE_frc__MaxVelocityConstraint_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__MaxVelocityConstraint.hpp>









#include <type_traits>


  using namespace frc;





struct rpybuild_MaxVelocityConstraint_initializer {


  
    using MinMax = frc::TrajectoryConstraint::MinMax;
  

  




  py::module pkg_constraint;









  
  using MaxVelocityConstraint_Trampoline = rpygen::PyTrampoline_frc__MaxVelocityConstraint<typename frc::MaxVelocityConstraint, typename rpygen::PyTrampolineCfg_frc__MaxVelocityConstraint<>>;
    static_assert(std::is_abstract<MaxVelocityConstraint_Trampoline>::value == false, "frc::MaxVelocityConstraint " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::MaxVelocityConstraint, MaxVelocityConstraint_Trampoline, frc::TrajectoryConstraint> cls_MaxVelocityConstraint;

    

    
    

  py::module &m;

  
  rpybuild_MaxVelocityConstraint_initializer(py::module &m) :

  
    pkg_constraint(m.def_submodule("constraint")),
  

  

  

  
    cls_MaxVelocityConstraint(pkg_constraint, "MaxVelocityConstraint"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_MaxVelocityConstraint.doc() =
    "Represents a constraint that enforces a max velocity. This can be composed\n"
"with the EllipticalRegionConstraint or RectangularRegionConstraint to enforce\n"
"a max velocity within a region.";

  cls_MaxVelocityConstraint
  
    
  .def(py::init<units::meters_per_second_t>(),
      py::arg("maxVelocity"), release_gil(), py::doc(
    "Constructs a new MaxVelocityConstraint.\n"
"\n"
":param maxVelocity: The max velocity.")
  )
  
  
  
    
  .
def
("maxVelocity", &frc::MaxVelocityConstraint::MaxVelocity,
      py::arg("pose"), py::arg("curvature"), py::arg("velocity"), release_gil()
  )
  
  
  
    
  .
def
("minMaxAcceleration", &frc::MaxVelocityConstraint::MinMaxAcceleration,
      py::arg("pose"), py::arg("curvature"), py::arg("speed"), release_gil()
  )
  
  
  ;

  


  }







  cls_MaxVelocityConstraint .def_static("fromFps", [](units::feet_per_second_t maxVelocity) { return std::make_shared<frc::MaxVelocityConstraint>(maxVelocity); }, py::arg("maxVelocity")) ;

}

}; // struct rpybuild_MaxVelocityConstraint_initializer

static std::unique_ptr<rpybuild_MaxVelocityConstraint_initializer> cls;

void begin_init_MaxVelocityConstraint(py::module &m) {
  cls = std::make_unique<rpybuild_MaxVelocityConstraint_initializer>(m);
}

void finish_init_MaxVelocityConstraint() {
  cls->finish();
  cls.reset();
}