
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/trajectory/TrajectoryConfig.h>


#include <units_acceleration_type_caster.h>

#include <units_velocity_type_caster.h>













#include <PyTrajectoryConstraint.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_TrajectoryConfig_initializer {


  

  




  py::module pkg_trajectory;









  py::class_<typename frc::TrajectoryConfig> cls_TrajectoryConfig;

    

    
    

  py::module &m;

  
  rpybuild_TrajectoryConfig_initializer(py::module &m) :

  
    pkg_trajectory(m.def_submodule("trajectory")),
  

  

  

  
    cls_TrajectoryConfig(pkg_trajectory, "TrajectoryConfig"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_TrajectoryConfig.doc() =
    "Represents the configuration for generating a trajectory. This class stores\n"
"the start velocity, end velocity, max velocity, max acceleration, custom\n"
"constraints, and the reversed flag.\n"
"\n"
"The class must be constructed with a max velocity and max acceleration.\n"
"The other parameters (start velocity, end velocity, constraints, reversed)\n"
"have been defaulted to reasonable values (0, 0, {}, false). These values can\n"
"be changed via the SetXXX methods.";

  cls_TrajectoryConfig
  
    
  .def(py::init<units::meters_per_second_t, units::meters_per_second_squared_t>(),
      py::arg("maxVelocity"), py::arg("maxAcceleration"), release_gil(), py::doc(
    "Constructs a config object.\n"
"\n"
":param maxVelocity:     The max velocity of the trajectory.\n"
":param maxAcceleration: The max acceleration of the trajectory.")
  )
  
  
  
    
  .
def
("setStartVelocity", &frc::TrajectoryConfig::SetStartVelocity,
      py::arg("startVelocity"), release_gil(), py::doc(
    "Sets the start velocity of the trajectory.\n"
"\n"
":param startVelocity: The start velocity of the trajectory.")
  )
  
  
  
    
  .
def
("setEndVelocity", &frc::TrajectoryConfig::SetEndVelocity,
      py::arg("endVelocity"), release_gil(), py::doc(
    "Sets the end velocity of the trajectory.\n"
"\n"
":param endVelocity: The end velocity of the trajectory.")
  )
  
  
  
    
  .
def
("setReversed", &frc::TrajectoryConfig::SetReversed,
      py::arg("reversed"), release_gil(), py::doc(
    "Sets the reversed flag of the trajectory.\n"
"\n"
":param reversed: Whether the trajectory should be reversed or not.")
  )
  
  
  
    
  .
def
("addConstraint", &frc::TrajectoryConfig::template AddConstraint<PyTrajectoryConstraint>,
      py::arg("constraint"), release_gil(), py::doc(
    "Adds a user-defined constraint to the trajectory.\n"
"\n"
":param constraint: The user-defined constraint.")
  )
  
  
    
  
    
  .
def
("setKinematics", static_cast<void(frc::TrajectoryConfig::*)(const DifferentialDriveKinematics&)>(
        &frc::TrajectoryConfig::SetKinematics),
      py::arg("kinematics"), release_gil(), py::doc(
    "Adds a differential drive kinematics constraint to ensure that\n"
"no wheel velocity of a differential drive goes above the max velocity.\n"
"\n"
":param kinematics: The differential drive kinematics.")
  )
  
  
  
    
  .
def
("setKinematics", static_cast<void(frc::TrajectoryConfig::*)(MecanumDriveKinematics)>(
        &frc::TrajectoryConfig::SetKinematics),
      py::arg("kinematics"), release_gil(), py::doc(
    "Adds a mecanum drive kinematics constraint to ensure that\n"
"no wheel velocity of a mecanum drive goes above the max velocity.\n"
"\n"
":param kinematics: The mecanum drive kinematics.")
  )
  
  
  
    
  .
def
("startVelocity", &frc::TrajectoryConfig::StartVelocity, release_gil(), py::doc(
    "Returns the starting velocity of the trajectory.\n"
"\n"
":returns: The starting velocity of the trajectory.")
  )
  
  
  
    
  .
def
("endVelocity", &frc::TrajectoryConfig::EndVelocity, release_gil(), py::doc(
    "Returns the ending velocity of the trajectory.\n"
"\n"
":returns: The ending velocity of the trajectory.")
  )
  
  
  
    
  .
def
("maxVelocity", &frc::TrajectoryConfig::MaxVelocity, release_gil(), py::doc(
    "Returns the maximum velocity of the trajectory.\n"
"\n"
":returns: The maximum velocity of the trajectory.")
  )
  
  
  
    
  .
def
("maxAcceleration", &frc::TrajectoryConfig::MaxAcceleration, release_gil(), py::doc(
    "Returns the maximum acceleration of the trajectory.\n"
"\n"
":returns: The maximum acceleration of the trajectory.")
  )
  
  
  
    
  .
def
("isReversed", &frc::TrajectoryConfig::IsReversed, release_gil(), py::doc(
    "Returns whether the trajectory is reversed or not.\n"
"\n"
":returns: whether the trajectory is reversed or not.")
  )
  
  
  ;

  


  }







  cls_TrajectoryConfig
  .def_static("fromFps", [](units::feet_per_second_t maxVelocity, units::feet_per_second_squared_t maxAcceleration) {
    return std::make_shared<TrajectoryConfig>(maxVelocity, maxAcceleration);
  }, py::arg("maxVelocity"), py::arg("maxAcceleration"))

  // TODO: robotpy-build bug

  .def("setKinematics", static_cast<void (frc::TrajectoryConfig::*)(frc::SwerveDriveKinematics<2>&)>(
&frc::TrajectoryConfig::SetKinematics<2>),
      py::arg("kinematics"), release_gil(), py::doc(
    "Adds a swerve drive kinematics constraint to ensure that\n"
"no wheel velocity of a swerve drive goes above the max velocity.\n"
"\n"
":param kinematics: The swerve drive kinematics.")
  )
    
  .def("setKinematics", static_cast<void (frc::TrajectoryConfig::*)(frc::SwerveDriveKinematics<3>&)>(
&frc::TrajectoryConfig::SetKinematics<3>),
      py::arg("kinematics"), release_gil(), py::doc(
    "Adds a swerve drive kinematics constraint to ensure that\n"
"no wheel velocity of a swerve drive goes above the max velocity.\n"
"\n"
":param kinematics: The swerve drive kinematics.")
  )
    
  .def("setKinematics", static_cast<void (frc::TrajectoryConfig::*)(frc::SwerveDriveKinematics<4>&)>(
&frc::TrajectoryConfig::SetKinematics<4>),
      py::arg("kinematics"), release_gil(), py::doc(
    "Adds a swerve drive kinematics constraint to ensure that\n"
"no wheel velocity of a swerve drive goes above the max velocity.\n"
"\n"
":param kinematics: The swerve drive kinematics.")
  )
    
  .def("setKinematics", static_cast<void (frc::TrajectoryConfig::*)(frc::SwerveDriveKinematics<6>&)>(
&frc::TrajectoryConfig::SetKinematics<6>),
      py::arg("kinematics"), release_gil(), py::doc(
    "Adds a swerve drive kinematics constraint to ensure that\n"
"no wheel velocity of a swerve drive goes above the max velocity.\n"
"\n"
":param kinematics: The swerve drive kinematics.")
  )
;

}

}; // struct rpybuild_TrajectoryConfig_initializer

static std::unique_ptr<rpybuild_TrajectoryConfig_initializer> cls;

void begin_init_TrajectoryConfig(py::module &m) {
  cls = std::make_unique<rpybuild_TrajectoryConfig_initializer>(m);
}

void finish_init_TrajectoryConfig() {
  cls->finish();
  cls.reset();
}