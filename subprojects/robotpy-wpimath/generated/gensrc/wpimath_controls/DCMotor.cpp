
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/system/plant/DCMotor.h>


#include <units_angular_velocity_type_caster.h>

#include <units_compound_type_caster.h>

#include <units_current_type_caster.h>

#include <units_impedance_type_caster.h>

#include <units_torque_type_caster.h>

#include <units_voltage_type_caster.h>













#include <wpystruct.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_DCMotor_initializer {


  

  




  py::module pkg_plant;









  py::class_<typename frc::DCMotor> cls_DCMotor;

    

    
    

  py::module &m;

  
  rpybuild_DCMotor_initializer(py::module &m) :

  
    pkg_plant(m.def_submodule("plant")),
  

  

  

  
    cls_DCMotor(pkg_plant, "DCMotor"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  
    using radians_per_second_per_volt_t [[maybe_unused]] = typename frc::DCMotor::radians_per_second_per_volt_t;
  
    using newton_meters_per_ampere_t [[maybe_unused]] = typename frc::DCMotor::newton_meters_per_ampere_t;
  


  

  cls_DCMotor.doc() =
    "Holds the constants for a DC motor.";

  cls_DCMotor
  
    
  .def(py::init<units::volt_t, units::newton_meter_t, units::ampere_t, units::ampere_t, units::radians_per_second_t, int>(),
      py::arg("nominalVoltage"), py::arg("stallTorque"), py::arg("stallCurrent"), py::arg("freeCurrent"), py::arg("freeSpeed"), py::arg("numMotors") = 1, release_gil(), py::doc(
    "Constructs a DC motor.\n"
"\n"
":param nominalVoltage: Voltage at which the motor constants were measured.\n"
":param stallTorque:    Torque when stalled.\n"
":param stallCurrent:   Current draw when stalled.\n"
":param freeCurrent:    Current draw under no load.\n"
":param freeSpeed:      Angular velocity under no load.\n"
":param numMotors:      Number of motors in a gearbox.")
  )
  
  
  
    
  .
def
("current", static_cast<units::ampere_t(frc::DCMotor::*)(units::radians_per_second_t, units::volt_t) const>(
        &frc::DCMotor::Current),
      py::arg("speed"), py::arg("inputVoltage"), release_gil(), py::doc(
    "Returns current drawn by motor with given speed and input voltage.\n"
"\n"
":param speed:        The current angular velocity of the motor.\n"
":param inputVoltage: The voltage being applied to the motor.")
  )
  
  
  
    
  .
def
("current", static_cast<units::ampere_t(frc::DCMotor::*)(units::newton_meter_t) const>(
        &frc::DCMotor::Current),
      py::arg("torque"), release_gil(), py::doc(
    "Returns current drawn by motor for a given torque.\n"
"\n"
":param torque: The torque produced by the motor.")
  )
  
  
  
    
  .
def
("torque", &frc::DCMotor::Torque,
      py::arg("current"), release_gil(), py::doc(
    "Returns torque produced by the motor with a given current.\n"
"\n"
":param current: The current drawn by the motor.")
  )
  
  
  
    
  .
def
("voltage", &frc::DCMotor::Voltage,
      py::arg("torque"), py::arg("speed"), release_gil(), py::doc(
    "Returns the voltage provided to the motor for a given torque and\n"
"angular velocity.\n"
"\n"
":param torque: The torque produced by the motor.\n"
":param speed:  The current angular velocity of the motor.")
  )
  
  
  
    
  .
def
("speed", &frc::DCMotor::Speed,
      py::arg("torque"), py::arg("inputVoltage"), release_gil(), py::doc(
    "Returns the angular speed produced by the motor at a given torque and input\n"
"voltage.\n"
"\n"
":param torque:       The torque produced by the motor.\n"
":param inputVoltage: The input voltage provided to the motor.")
  )
  
  
  
    
  .
def
("withReduction", &frc::DCMotor::WithReduction,
      py::arg("gearboxReduction"), release_gil(), py::doc(
    "Returns a copy of this motor with the given gearbox reduction applied.\n"
"\n"
":param gearboxReduction: The gearbox reduction.")
  )
  
  
  
    
  .
def_static
("CIM", &frc::DCMotor::CIM,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of CIM motors.")
  )
  
  
  
    
  .
def_static
("miniCIM", &frc::DCMotor::MiniCIM,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of MiniCIM motors.")
  )
  
  
  
    
  .
def_static
("bag", &frc::DCMotor::Bag,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of Bag motor motors.")
  )
  
  
  
    
  .
def_static
("vex775Pro", &frc::DCMotor::Vex775Pro,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of Vex 775 Pro motors.")
  )
  
  
  
    
  .
def_static
("RS775_125", &frc::DCMotor::RS775_125,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of Andymark RS 775-125 motors.")
  )
  
  
  
    
  .
def_static
("banebotsRS775", &frc::DCMotor::BanebotsRS775,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of Banebots RS 775 motors.")
  )
  
  
  
    
  .
def_static
("andymark9015", &frc::DCMotor::Andymark9015,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of Andymark 9015 motors.")
  )
  
  
  
    
  .
def_static
("banebotsRS550", &frc::DCMotor::BanebotsRS550,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of Banebots RS 550 motors.")
  )
  
  
  
    
  .
def_static
("NEO", &frc::DCMotor::NEO,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of NEO brushless motors.")
  )
  
  
  
    
  .
def_static
("NEO550", &frc::DCMotor::NEO550,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of NEO 550 brushless motors.")
  )
  
  
  
    
  .
def_static
("falcon500", &frc::DCMotor::Falcon500,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Returns a gearbox of Falcon 500 brushless motors.")
  )
  
  
  
    
  .
def_static
("falcon500FOC", &frc::DCMotor::Falcon500FOC,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Return a gearbox of Falcon 500 motors with FOC (Field-Oriented Control)\n"
"enabled.")
  )
  
  
  
    
  .
def_static
("romiBuiltIn", &frc::DCMotor::RomiBuiltIn,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Return a gearbox of Romi/TI_RSLK MAX motors.")
  )
  
  
  
    
  .
def_static
("krakenX60", &frc::DCMotor::KrakenX60,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Return a gearbox of Kraken X60 brushless motors.")
  )
  
  
  
    
  .
def_static
("krakenX60FOC", &frc::DCMotor::KrakenX60FOC,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Return a gearbox of Kraken X60 brushless motors with FOC (Field-Oriented\n"
"Control) enabled.")
  )
  
  
  
    
  .
def_static
("neoVortex", &frc::DCMotor::NeoVortex,
      py::arg("numMotors") = 1, release_gil(), py::doc(
    "Return a gearbox of Neo Vortex brushless motors.")
  )
  
  
  
    .def_readonly("nominalVoltage", &frc::DCMotor::nominalVoltage, py::doc(
    "Voltage at which the motor constants were measured."))
  
    .def_readonly("stallTorque", &frc::DCMotor::stallTorque, py::doc(
    "Torque when stalled."))
  
    .def_readonly("stallCurrent", &frc::DCMotor::stallCurrent, py::doc(
    "Current draw when stalled."))
  
    .def_readonly("freeCurrent", &frc::DCMotor::freeCurrent, py::doc(
    "Current draw under no load."))
  
    .def_readonly("freeSpeed", &frc::DCMotor::freeSpeed, py::doc(
    "Angular velocity under no load."))
  
    .def_readonly("R", &frc::DCMotor::R, py::doc(
    "Motor internal resistance."))
  
    .def_readonly("Kv", &frc::DCMotor::Kv, py::doc(
    "Motor velocity constant."))
  
    .def_readonly("Kt", &frc::DCMotor::Kt, py::doc(
    "Motor torque constant."))
  ;

  


  }







  SetupWPyStruct<frc::DCMotor>(cls_DCMotor);


}

}; // struct rpybuild_DCMotor_initializer

static std::unique_ptr<rpybuild_DCMotor_initializer> cls;

void begin_init_DCMotor(py::module &m) {
  cls = std::make_unique<rpybuild_DCMotor_initializer>(m);
}

void finish_init_DCMotor() {
  cls->finish();
  cls.reset();
}