
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/controller/RamseteController.h>


#include <units_angle_type_caster.h>

#include <units_angular_velocity_type_caster.h>

#include <units_compound_type_caster.h>

#include <units_length_type_caster.h>

#include <units_velocity_type_caster.h>















#include <type_traits>


  using namespace frc;





struct rpybuild_RamseteController_initializer {


  

  




  py::module pkg_controller;









  py::class_<typename frc::RamseteController> cls_RamseteController;

    

    
    

  py::module &m;

  
  rpybuild_RamseteController_initializer(py::module &m) :

  
    pkg_controller(m.def_submodule("controller")),
  

  

  

  
    cls_RamseteController(pkg_controller, "RamseteController"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  
    using b_unit [[maybe_unused]] = typename frc::RamseteController::b_unit;
  
    using zeta_unit [[maybe_unused]] = typename frc::RamseteController::zeta_unit;
  


  

  cls_RamseteController.doc() =
    "Ramsete is a nonlinear time-varying feedback controller for unicycle models\n"
"that drives the model to a desired pose along a two-dimensional trajectory.\n"
"Why would we need a nonlinear control law in addition to the linear ones we\n"
"have used so far like PID? If we use the original approach with PID\n"
"controllers for left and right position and velocity states, the controllers\n"
"only deal with the local pose. If the robot deviates from the path, there is\n"
"no way for the controllers to correct and the robot may not reach the desired\n"
"global pose. This is due to multiple endpoints existing for the robot which\n"
"have the same encoder path arc lengths.\n"
"\n"
"Instead of using wheel path arc lengths (which are in the robot's local\n"
"coordinate frame), nonlinear controllers like pure pursuit and Ramsete use\n"
"global pose. The controller uses this extra information to guide a linear\n"
"reference tracker like the PID controllers back in by adjusting the\n"
"references of the PID controllers.\n"
"\n"
"The paper \"Control of Wheeled Mobile Robots: An Experimental Overview\"\n"
"describes a nonlinear controller for a wheeled vehicle with unicycle-like\n"
"kinematics; a global pose consisting of x, y, and theta; and a desired pose\n"
"consisting of x_d, y_d, and theta_d. We call it Ramsete because that's the\n"
"acronym for the title of the book it came from in Italian (\"Robotica\n"
"Articolata e Mobile per i SErvizi e le TEcnologie\").\n"
"\n"
"See <https://file.tavsys.net/control/controls-engineering-in-frc.pdf> section\n"
"on Ramsete unicycle controller for a derivation and analysis.";

  cls_RamseteController
  
    
  .def(py::init([](double b, double zeta) {
  return std::make_shared<RamseteController>(
    units::unit_t<RamseteController::b_unit>{b},
    units::unit_t<RamseteController::zeta_unit>{zeta});
}
),
      py::arg("b"), py::arg("zeta"), py::doc(
    "Construct a Ramsete unicycle controller.\n"
"\n"
":param b:    Tuning parameter (b > 0 rad²/m²) for which larger values make\n"
"             convergence more aggressive like a proportional term.\n"
":param zeta: Tuning parameter (0 rad⁻¹ < zeta < 1 rad⁻¹) for which larger\n"
"             values provide more damping in response.")
  )
  
  
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "Construct a Ramsete unicycle controller. The default arguments for\n"
"b and zeta of 2.0 rad²/m² and 0.7 rad⁻¹ have been well-tested to produce\n"
"desirable results.")
  )
  
  
  
    
  .
def
("atReference", &frc::RamseteController::AtReference, release_gil(), py::doc(
    "Returns true if the pose error is within tolerance of the reference.")
  )
  
  
  
    
  .
def
("setTolerance", &frc::RamseteController::SetTolerance,
      py::arg("poseTolerance"), release_gil(), py::doc(
    "Sets the pose error which is considered tolerable for use with\n"
"AtReference().\n"
"\n"
":param poseTolerance: Pose error which is tolerable.")
  )
  
  
  
    
  .
def
("calculate", static_cast<ChassisSpeeds(frc::RamseteController::*)(const Pose2d&, const Pose2d&, units::meters_per_second_t, units::radians_per_second_t)>(
        &frc::RamseteController::Calculate),
      py::arg("currentPose"), py::arg("poseRef"), py::arg("linearVelocityRef"), py::arg("angularVelocityRef"), release_gil(), py::doc(
    "Returns the next output of the Ramsete controller.\n"
"\n"
"The reference pose, linear velocity, and angular velocity should come from\n"
"a drivetrain trajectory.\n"
"\n"
":param currentPose:        The current pose.\n"
":param poseRef:            The desired pose.\n"
":param linearVelocityRef:  The desired linear velocity.\n"
":param angularVelocityRef: The desired angular velocity.")
  )
  
  
  
    
  .
def
("calculate", static_cast<ChassisSpeeds(frc::RamseteController::*)(const Pose2d&, const Trajectory::State&)>(
        &frc::RamseteController::Calculate),
      py::arg("currentPose"), py::arg("desiredState"), release_gil(), py::doc(
    "Returns the next output of the Ramsete controller.\n"
"\n"
"The reference pose, linear velocity, and angular velocity should come from\n"
"a drivetrain trajectory.\n"
"\n"
":param currentPose:  The current pose.\n"
":param desiredState: The desired pose, linear velocity, and angular velocity\n"
"                     from a trajectory.")
  )
  
  
  
    
  .
def
("setEnabled", &frc::RamseteController::SetEnabled,
      py::arg("enabled"), release_gil(), py::doc(
    "Enables and disables the controller for troubleshooting purposes.\n"
"\n"
":param enabled: If the controller is enabled or not.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_RamseteController_initializer

static std::unique_ptr<rpybuild_RamseteController_initializer> cls;

void begin_init_RamseteController(py::module &m) {
  cls = std::make_unique<rpybuild_RamseteController_initializer>(m);
}

void finish_init_RamseteController() {
  cls->finish();
  cls.reset();
}