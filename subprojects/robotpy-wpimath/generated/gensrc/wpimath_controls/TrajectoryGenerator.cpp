
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/trajectory/TrajectoryGenerator.h>


#include <pybind11/functional.h>

#include <pybind11/stl.h>

#include <units_compound_type_caster.h>













#include <frc/spline/CubicHermiteSpline.h>

#include <frc/spline/QuinticHermiteSpline.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_TrajectoryGenerator_initializer {


  

  




  py::module pkg_trajectory;









  py::class_<typename frc::TrajectoryGenerator> cls_TrajectoryGenerator;

    

    
    

  py::module &m;

  
  rpybuild_TrajectoryGenerator_initializer(py::module &m) :

  
    pkg_trajectory(m.def_submodule("trajectory")),
  

  

  

  
    cls_TrajectoryGenerator(pkg_trajectory, "TrajectoryGenerator"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  
    using PoseWithCurvature [[maybe_unused]] = typename frc::TrajectoryGenerator::PoseWithCurvature;
  


  

  cls_TrajectoryGenerator.doc() =
    "Helper class used to generate trajectories with various constraints.";

  cls_TrajectoryGenerator
  
    .def(py::init<>(), release_gil())
  
    
  .
def_static
("generateTrajectory", static_cast<Trajectory(*)(Spline<3>::ControlVector, const std::vector<Translation2d>&, Spline<3>::ControlVector, const TrajectoryConfig&)>(
        &frc::TrajectoryGenerator::GenerateTrajectory),
      py::arg("initial"), py::arg("interiorWaypoints"), py::arg("end"), py::arg("config"), release_gil(), py::doc(
    "Generates a trajectory from the given control vectors and config. This\n"
"method uses clamped cubic splines -- a method in which the exterior control\n"
"vectors and interior waypoints are provided. The headings are automatically\n"
"determined at the interior points to ensure continuous curvature.\n"
"\n"
":param initial:           The initial control vector.\n"
":param interiorWaypoints: The interior waypoints.\n"
":param end:               The ending control vector.\n"
":param config:            The configuration for the trajectory.\n"
"\n"
":returns: The generated trajectory.")
  )
  
  
  
    
  .
def_static
("generateTrajectory", static_cast<Trajectory(*)(const Pose2d&, const std::vector<Translation2d>&, const Pose2d&, const TrajectoryConfig&)>(
        &frc::TrajectoryGenerator::GenerateTrajectory),
      py::arg("start"), py::arg("interiorWaypoints"), py::arg("end"), py::arg("config"), release_gil(), py::doc(
    "Generates a trajectory from the given waypoints and config. This method\n"
"uses clamped cubic splines -- a method in which the initial pose, final\n"
"pose, and interior waypoints are provided.  The headings are automatically\n"
"determined at the interior points to ensure continuous curvature.\n"
"\n"
":param start:             The starting pose.\n"
":param interiorWaypoints: The interior waypoints.\n"
":param end:               The ending pose.\n"
":param config:            The configuration for the trajectory.\n"
"\n"
":returns: The generated trajectory.")
  )
  
  
  
    
  .
def_static
("generateTrajectory", static_cast<Trajectory(*)(std::vector<Spline<5>::ControlVector>, const TrajectoryConfig&)>(
        &frc::TrajectoryGenerator::GenerateTrajectory),
      py::arg("controlVectors"), py::arg("config"), release_gil(), py::doc(
    "Generates a trajectory from the given quintic control vectors and config.\n"
"This method uses quintic hermite splines -- therefore, all points must be\n"
"represented by control vectors. Continuous curvature is guaranteed in this\n"
"method.\n"
"\n"
":param controlVectors: List of quintic control vectors.\n"
":param config:         The configuration for the trajectory.\n"
"\n"
":returns: The generated trajectory.")
  )
  
  
  
    
  .
def_static
("generateTrajectory", static_cast<Trajectory(*)(const std::vector<Pose2d>&, const TrajectoryConfig&)>(
        &frc::TrajectoryGenerator::GenerateTrajectory),
      py::arg("waypoints"), py::arg("config"), release_gil(), py::doc(
    "Generates a trajectory from the given waypoints and config. This method\n"
"uses quintic hermite splines -- therefore, all points must be represented\n"
"by Pose2d objects. Continuous curvature is guaranteed in this method.\n"
"\n"
":param waypoints: List of waypoints..\n"
":param config:    The configuration for the trajectory.\n"
"\n"
":returns: The generated trajectory.")
  )
  
  
  
    
  .
def_static
("splinePointsFromSplines", &frc::TrajectoryGenerator::template SplinePointsFromSplines<CubicHermiteSpline>,
      py::arg("splines"), release_gil(), py::doc(
    "Generate spline points from a vector of splines by parameterizing the\n"
"splines.\n"
"\n"
":param splines: The splines to parameterize.\n"
"\n"
":returns: The spline points for use in time parameterization of a trajectory.")
  )
  
  
    
  .
def_static
("splinePointsFromSplines", &frc::TrajectoryGenerator::template SplinePointsFromSplines<QuinticHermiteSpline>,
      py::arg("splines"), release_gil(), py::doc(
    "Generate spline points from a vector of splines by parameterizing the\n"
"splines.\n"
"\n"
":param splines: The splines to parameterize.\n"
"\n"
":returns: The spline points for use in time parameterization of a trajectory.")
  )
  
  
    
  
    
  .
def_static
("setErrorHandler", &frc::TrajectoryGenerator::SetErrorHandler,
      py::arg("func").none(false), release_gil(), py::doc(
    "Set error reporting function. By default, it is output to stderr.\n"
"\n"
":param func: Error reporting function.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_TrajectoryGenerator_initializer

static std::unique_ptr<rpybuild_TrajectoryGenerator_initializer> cls;

void begin_init_TrajectoryGenerator(py::module &m) {
  cls = std::make_unique<rpybuild_TrajectoryGenerator_initializer>(m);
}

void finish_init_TrajectoryGenerator() {
  cls->finish();
  cls.reset();
}