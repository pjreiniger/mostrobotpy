
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <cameraserver/CameraServer.h>


#include <wpi_span_type_caster.h>













#include <optional>



#include <type_traits>


  using namespace frc;



struct rpybuild_CameraServer_initializer {


  

  












  py::class_<typename frc::CameraServer> cls_CameraServer;

    

    
    

  py::module &m;

  
  rpybuild_CameraServer_initializer(py::module &m) :

  

  

  

  
    cls_CameraServer(m, "CameraServer"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  
    static constexpr auto kBasePort [[maybe_unused]] = frc::CameraServer::kBasePort;
  


  

  cls_CameraServer.doc() =
    "Singleton class for creating and keeping camera servers.\n"
"\n"
"Also publishes camera information to NetworkTables.";

  cls_CameraServer
  
    
  .
def_static
("startAutomaticCapture", static_cast<cs::UsbCamera(*)()>(
        &frc::CameraServer::StartAutomaticCapture), release_gil(), py::doc(
    "Start automatically capturing images to send to the dashboard.\n"
"\n"
"You should call this method to see a camera feed on the dashboard. If you\n"
"also want to perform vision processing on the roboRIO, use getVideo() to\n"
"get access to the camera images.\n"
"\n"
"The first time this overload is called, it calls StartAutomaticCapture()\n"
"with device 0, creating a camera named \"USB Camera 0\".  Subsequent calls\n"
"increment the device number (e.g. 1, 2, etc).")
  )
  
  
  
    
  .
def_static
("startAutomaticCapture", static_cast<cs::UsbCamera(*)(int)>(
        &frc::CameraServer::StartAutomaticCapture),
      py::arg("dev"), release_gil(), py::doc(
    "Start automatically capturing images to send to the dashboard.\n"
"\n"
"This overload calls StartAutomaticCapture() with a name of \"USB Camera\n"
"{dev}\".\n"
"\n"
":param dev: The device number of the camera interface")
  )
  
  
  
    
  .
def_static
("startAutomaticCapture", static_cast<cs::UsbCamera(*)(std::string_view, int)>(
        &frc::CameraServer::StartAutomaticCapture),
      py::arg("name"), py::arg("dev"), release_gil(), py::doc(
    "Start automatically capturing images to send to the dashboard.\n"
"\n"
":param name: The name to give the camera\n"
":param dev:  The device number of the camera interface")
  )
  
  
  
    
  .
def_static
("startAutomaticCapture", static_cast<cs::UsbCamera(*)(std::string_view, std::string_view)>(
        &frc::CameraServer::StartAutomaticCapture),
      py::arg("name"), py::arg("path"), release_gil(), py::doc(
    "Start automatically capturing images to send to the dashboard.\n"
"\n"
":param name: The name to give the camera\n"
":param path: The device path (e.g. \"/dev/video0\") of the camera")
  )
  
  
  
    
  .
def_static
("startAutomaticCapture", static_cast<cs::MjpegServer(*)(const cs::VideoSource&)>(
        &frc::CameraServer::StartAutomaticCapture),
      py::arg("camera"), release_gil(), py::doc(
    "Start automatically capturing images to send to the dashboard from\n"
"an existing camera.\n"
"\n"
":param camera: Camera")
  )
  
  
  
    
  .
def_static
("addAxisCamera", static_cast<cs::AxisCamera(*)(std::string_view)>(
        &frc::CameraServer::AddAxisCamera),
      py::arg("host"), release_gil(), py::doc(
    "Adds an Axis IP camera.\n"
"\n"
"This overload calls AddAxisCamera() with name \"Axis Camera\".\n"
"\n"
":deprecated: Call StartAutomaticCapture with a HttpCamera instead.\n"
"\n"
":param host: Camera host IP or DNS name (e.g. \"10.x.y.11\")")
  )
  
  
  
    
  .
def_static
("addAxisCamera", static_cast<cs::AxisCamera(*)(std::span<const std::string>)>(
        &frc::CameraServer::AddAxisCamera),
      py::arg("hosts"), release_gil(), py::doc(
    "Adds an Axis IP camera.\n"
"\n"
"This overload calls AddAxisCamera() with name \"Axis Camera\".\n"
"\n"
":deprecated: Call StartAutomaticCapture with a HttpCamera instead.\n"
"\n"
":param hosts: Array of Camera host IPs/DNS names")
  )
  
  
  
    
  .
def_static
("addAxisCamera", static_cast<cs::AxisCamera(*)(std::string_view, std::string_view)>(
        &frc::CameraServer::AddAxisCamera),
      py::arg("name"), py::arg("host"), release_gil(), py::doc(
    "Adds an Axis IP camera.\n"
"\n"
":deprecated: Call StartAutomaticCapture with a HttpCamera instead.\n"
"\n"
":param name: The name to give the camera\n"
":param host: Camera host IP or DNS name (e.g. \"10.x.y.11\")")
  )
  
  
  
    
  .
def_static
("addAxisCamera", static_cast<cs::AxisCamera(*)(std::string_view, std::span<const std::string>)>(
        &frc::CameraServer::AddAxisCamera),
      py::arg("name"), py::arg("hosts"), release_gil(), py::doc(
    "Adds an Axis IP camera.\n"
"\n"
":deprecated: Call StartAutomaticCapture with a HttpCamera instead.\n"
"\n"
":param name:  The name to give the camera\n"
":param hosts: Array of Camera host IPs/DNS names")
  )
  
  
  
    
  .
def_static
("addSwitchedCamera", &frc::CameraServer::AddSwitchedCamera,
      py::arg("name"), release_gil(), py::doc(
    "Adds a virtual camera for switching between two streams.  Unlike the\n"
"other addCamera methods, this returns a VideoSink rather than a\n"
"VideoSource.  Calling SetSource() on the returned object can be used\n"
"to switch the actual source of the stream.")
  )
  
  
  
    
  .
def_static
("getVideo", static_cast<cs::CvSink(*)()>(
        &frc::CameraServer::GetVideo), release_gil(), py::doc(
    "Get OpenCV access to the primary camera feed.  This allows you to\n"
"get images from the camera for image processing on the roboRIO.\n"
"\n"
"This is only valid to call after a camera feed has been added\n"
"with startAutomaticCapture() or addServer().")
  )
  
  
  
    
  .
def_static
("getVideo", static_cast<cs::CvSink(*)(const cs::VideoSource&)>(
        &frc::CameraServer::GetVideo),
      py::arg("camera"), release_gil(), py::doc(
    "Get OpenCV access to the specified camera.  This allows you to get\n"
"images from the camera for image processing on the roboRIO.\n"
"\n"
":param camera: Camera (e.g. as returned by startAutomaticCapture).")
  )
  
  
  
    
  .
def_static
("getVideo", static_cast<cs::CvSink(*)(const cs::VideoSource&, cs::VideoMode::PixelFormat)>(
        &frc::CameraServer::GetVideo),
      py::arg("camera"), py::arg("pixelFormat"), release_gil(), py::doc(
    "Get OpenCV access to the specified camera.  This allows you to get\n"
"images from the camera for image processing on the roboRIO.\n"
"\n"
":param camera:      Camera (e.g. as returned by startAutomaticCapture).\n"
":param pixelFormat: The desired pixelFormat of captured frames from the\n"
"                    camera")
  )
  
  
  
    
  .
def_static
("getVideo", static_cast<cs::CvSink(*)(std::string_view)>(
        &frc::CameraServer::GetVideo),
      py::arg("name"), release_gil(), py::doc(
    "Get OpenCV access to the specified camera.  This allows you to get\n"
"images from the camera for image processing on the roboRIO.\n"
"\n"
":param name: Camera name")
  )
  
  
  
    
  .
def_static
("getVideo", static_cast<cs::CvSink(*)(std::string_view, cs::VideoMode::PixelFormat)>(
        &frc::CameraServer::GetVideo),
      py::arg("name"), py::arg("pixelFormat"), release_gil(), py::doc(
    "Get OpenCV access to the specified camera.  This allows you to get\n"
"images from the camera for image processing on the roboRIO.\n"
"\n"
":param name:        Camera name\n"
":param pixelFormat: The desired pixelFormat of captured frames from the\n"
"                    camera")
  )
  
  
  
    
  .
def_static
("putVideo", &frc::CameraServer::PutVideo,
      py::arg("name"), py::arg("width"), py::arg("height"), release_gil(), py::doc(
    "Create a MJPEG stream with OpenCV input. This can be called to pass custom\n"
"annotated images to the dashboard.\n"
"\n"
":param name:   Name to give the stream\n"
":param width:  Width of the image being sent\n"
":param height: Height of the image being sent")
  )
  
  
  
    
  .
def_static
("addServer", static_cast<cs::MjpegServer(*)(std::string_view)>(
        &frc::CameraServer::AddServer),
      py::arg("name"), release_gil(), py::doc(
    "Adds a MJPEG server at the next available port.\n"
"\n"
":param name: Server name")
  )
  
  
  
    
  .
def_static
("addServer", static_cast<cs::MjpegServer(*)(std::string_view, int)>(
        &frc::CameraServer::AddServer),
      py::arg("name"), py::arg("port"), release_gil(), py::doc(
    "Adds a MJPEG server.\n"
"\n"
":param name: Server name\n"
":param port: Port number")
  )
  
  
  
    
  .
def_static
("addServer", static_cast<void(*)(const cs::VideoSink&)>(
        &frc::CameraServer::AddServer),
      py::arg("server"), release_gil(), py::doc(
    "Adds an already created server.\n"
"\n"
":param server: Server")
  )
  
  
  
    
  .
def_static
("removeServer", &frc::CameraServer::RemoveServer,
      py::arg("name"), release_gil(), py::doc(
    "Removes a server by name.\n"
"\n"
":param name: Server name")
  )
  
  
  
    
  .
def_static
("getServer", static_cast<cs::VideoSink(*)()>(
        &frc::CameraServer::GetServer), release_gil(), py::doc(
    "Get server for the primary camera feed.\n"
"\n"
"This is only valid to call after a camera feed has been added with\n"
"StartAutomaticCapture() or AddServer().")
  )
  
  
  
    
  .
def_static
("getServer", static_cast<cs::VideoSink(*)(std::string_view)>(
        &frc::CameraServer::GetServer),
      py::arg("name"), release_gil(), py::doc(
    "Gets a server by name.\n"
"\n"
":param name: Server name")
  )
  
  
  
    
  .
def_static
("addCamera", &frc::CameraServer::AddCamera,
      py::arg("camera"), release_gil(), py::doc(
    "Adds an already created camera.\n"
"\n"
":param camera: Camera")
  )
  
  
  
    
  .
def_static
("removeCamera", &frc::CameraServer::RemoveCamera,
      py::arg("name"), release_gil(), py::doc(
    "Removes a camera by name.\n"
"\n"
":param name: Camera name")
  )
  
  
  
    .def_readonly_static("kBasePort", &frc::CameraServer::kBasePort, py::doc(
    "CameraServer base port."))
  .def_static("waitForever", []() {
  auto time_module = py::module::import("time");
  while (true) {
    time_module.attr("sleep")(1);
  }
}, py::doc("Infinitely loops until the process dies"))
.def_static("enableLogging", [](std::optional<int> level) {
  auto lm = py::module::import("cscore._logging");
  lm.attr("enableLogging")(level);
}, py::arg("level") = py::none(), py::doc("Enable cscore logging"));

  


  }






}

}; // struct rpybuild_CameraServer_initializer

static std::unique_ptr<rpybuild_CameraServer_initializer> cls;

void begin_init_CameraServer(py::module &m) {
  cls = std::make_unique<rpybuild_CameraServer_initializer>(m);
}

void finish_init_CameraServer() {
  cls->finish();
  cls.reset();
}