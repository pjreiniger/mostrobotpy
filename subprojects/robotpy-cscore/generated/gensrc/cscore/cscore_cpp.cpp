
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <cscore_cpp.h>


#include <pybind11/functional.h>

#include <pybind11/stl.h>



#include <pybind11/operators.h>













#include <type_traits>


  using namespace cs;





struct rpybuild_cscore_cpp_initializer {


  

  


  

  


  

  












  py::class_<typename cs::UsbCameraInfo> cls_UsbCameraInfo;

    

    
    
  py::class_<typename cs::VideoMode> cls_VideoMode;

    
    
  py::enum_<cs::VideoMode::PixelFormat> cls_VideoMode_enum1;
    

    
    
  py::class_<typename cs::RawEvent> cls_RawEvent;

    

    
    

  py::module &m;

  
  rpybuild_cscore_cpp_initializer(py::module &m) :

  

  

  

  
    cls_UsbCameraInfo(m, "UsbCameraInfo"),

  

  
  
  
    cls_VideoMode(m, "VideoMode"),

  
    cls_VideoMode_enum1
  (cls_VideoMode, "PixelFormat"
  ),
  

  
  
  
    cls_RawEvent(m, "RawEvent"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
    
  
    cls_VideoMode_enum1
  
    .value("kUnknown", cs::VideoMode::PixelFormat::kUnknown)
  
    .value("kMJPEG", cs::VideoMode::PixelFormat::kMJPEG)
  
    .value("kYUYV", cs::VideoMode::PixelFormat::kYUYV)
  
    .value("kRGB565", cs::VideoMode::PixelFormat::kRGB565)
  
    .value("kBGR", cs::VideoMode::PixelFormat::kBGR)
  
    .value("kGray", cs::VideoMode::PixelFormat::kGray)
  
    .value("kY16", cs::VideoMode::PixelFormat::kY16)
  
    .value("kUYVY", cs::VideoMode::PixelFormat::kUYVY)
  ;

  

    
    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_UsbCameraInfo.doc() =
    "USB camera information";

  cls_UsbCameraInfo
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("dev", &cs::UsbCameraInfo::dev, py::doc(
    "Device number (e.g. N in '/dev/videoN' on Linux)"))
  
    .def_readwrite("path", &cs::UsbCameraInfo::path, py::doc(
    "Path to device if available (e.g. '/dev/video0' on Linux)"))
  
    .def_readwrite("name", &cs::UsbCameraInfo::name, py::doc(
    "Vendor/model name of the camera as provided by the USB driver"))
  
    .def_readwrite("otherPaths", &cs::UsbCameraInfo::otherPaths, py::doc(
    "Other path aliases to device (e.g. '/dev/v4l/by-id/...' etc on Linux)"))
  
    .def_readwrite("vendorId", &cs::UsbCameraInfo::vendorId, py::doc(
    "USB Vendor Id"))
  
    .def_readwrite("productId", &cs::UsbCameraInfo::productId, py::doc(
    "USB Product Id"))
  ;

  


  }

  {
  
  
  using PixelFormat [[maybe_unused]] = typename cs::VideoMode::PixelFormat;
  
  


  

  cls_VideoMode.doc() =
    "Video mode";

  cls_VideoMode
  
    
  .def(py::init<>(), release_gil()
  )
  
  
  
    
  .def(py::init<PixelFormat, int, int, int>(),
      py::arg("pixelFormat_"), py::arg("width_"), py::arg("height_"), py::arg("fps_"), release_gil()
  )
  
  
  
    
  .def(py::self == py::self
  )
  
  
  
    
  .
def
("compareWithoutFps", &cs::VideoMode::CompareWithoutFps,
      py::arg("other"), release_gil()
  )
  
  
  .def_readwrite("pixelFormat", &VideoMode::pixelFormat)
.def_readwrite("width", &VideoMode::width)
.def_readwrite("height", &VideoMode::height)
.def_readwrite("fps", &VideoMode::fps)
;

  


  }

  {
  
  
  


  

  cls_RawEvent.doc() =
    "Listener event";

  cls_RawEvent
  ;

  


  }



m
  .
def
("_setLogger", &cs::SetLogger,
      py::arg("func"), py::arg("min_level"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_cscore_cpp_initializer

static std::unique_ptr<rpybuild_cscore_cpp_initializer> cls;

void begin_init_cscore_cpp(py::module &m) {
  cls = std::make_unique<rpybuild_cscore_cpp_initializer>(m);
}

void finish_init_cscore_cpp() {
  cls->finish();
  cls.reset();
}