
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <networktables/NetworkTableValue.h>


#include <pybind11/stl.h>

#include <wpi_span_type_caster.h>













#include <networktables/NetworkTableType.h>

#include <src/py2value.h>



#include <type_traits>


  using namespace nt;



struct rpybuild_NetworkTableValue_initializer {


  

  












  py::class_<typename nt::Value> cls_Value;

    

    
    

  py::module &m;

  
  rpybuild_NetworkTableValue_initializer(py::module &m) :

  

  

  

  
    cls_Value(m, "Value", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_Value.doc() =
    "A network table entry value.\n"
"@ingroup ntcore_cpp_api";

  cls_Value
  
    
  .
def
("type", [](Value *t) {
  return (NetworkTableType)t->type();
}
, py::doc(
    "Get the data type.\n"
"\n"
":returns: The type.")
  )
  
  
  
    
  .
def
("value", [](const Value &self) -> py::object {
  return pyntcore::ntvalue2py(self);
}
, py::doc(
    "Get the data value stored.\n"
"\n"
":returns: The type.")
  )
  
  
  
    
  .
def
("last_change", &nt::Value::last_change, release_gil(), py::doc(
    "Get the creation time of the value, in local time.\n"
"\n"
":returns: The time, in the units returned by nt::Now().")
  )
  
  
  
    
  .
def
("time", &nt::Value::time, release_gil(), py::doc(
    "Get the creation time of the value, in local time.\n"
"\n"
":returns: The time, in the units returned by nt::Now().")
  )
  
  
  
    
  .
def
("size", &nt::Value::size, release_gil(), py::doc(
    "Get the approximate in-memory size of the value in bytes. This is zero for\n"
"values that do not require additional memory beyond the memory of the Value\n"
"itself.\n"
"\n"
":returns: The size in bytes.")
  )
  
  
  
    
  .
def
("setTime", &nt::Value::SetTime,
      py::arg("time"), release_gil(), py::doc(
    "Set the local creation time of the value.\n"
"\n"
":param time: The time.")
  )
  
  
  
    
  .
def
("server_time", &nt::Value::server_time, release_gil(), py::doc(
    "Get the creation time of the value, in server time.\n"
"\n"
":returns: The server time.")
  )
  
  
  
    
  .
def
("setServerTime", &nt::Value::SetServerTime,
      py::arg("time"), release_gil(), py::doc(
    "Set the creation time of the value, in server time.\n"
"\n"
":param time: The server time.")
  )
  
  
  
    
  .
def
("isValid", &nt::Value::IsValid, release_gil(), py::doc(
    "Determine if entry value contains a value or is unassigned.\n"
"\n"
":returns: True if the entry value contains a value.")
  )
  
  
  
    
  .
def
("isBoolean", &nt::Value::IsBoolean, release_gil(), py::doc(
    "Determine if entry value contains a boolean.\n"
"\n"
":returns: True if the entry value is of boolean type.")
  )
  
  
  
    
  .
def
("isInteger", &nt::Value::IsInteger, release_gil(), py::doc(
    "Determine if entry value contains an integer.\n"
"\n"
":returns: True if the entry value is of integer type.")
  )
  
  
  
    
  .
def
("isFloat", &nt::Value::IsFloat, release_gil(), py::doc(
    "Determine if entry value contains a float.\n"
"\n"
":returns: True if the entry value is of float type.")
  )
  
  
  
    
  .
def
("isDouble", &nt::Value::IsDouble, release_gil(), py::doc(
    "Determine if entry value contains a double.\n"
"\n"
":returns: True if the entry value is of double type.")
  )
  
  
  
    
  .
def
("isString", &nt::Value::IsString, release_gil(), py::doc(
    "Determine if entry value contains a string.\n"
"\n"
":returns: True if the entry value is of string type.")
  )
  
  
  
    
  .
def
("isRaw", &nt::Value::IsRaw, release_gil(), py::doc(
    "Determine if entry value contains a raw.\n"
"\n"
":returns: True if the entry value is of raw type.")
  )
  
  
  
    
  .
def
("isBooleanArray", &nt::Value::IsBooleanArray, release_gil(), py::doc(
    "Determine if entry value contains a boolean array.\n"
"\n"
":returns: True if the entry value is of boolean array type.")
  )
  
  
  
    
  .
def
("isIntegerArray", &nt::Value::IsIntegerArray, release_gil(), py::doc(
    "Determine if entry value contains an integer array.\n"
"\n"
":returns: True if the entry value is of integer array type.")
  )
  
  
  
    
  .
def
("isFloatArray", &nt::Value::IsFloatArray, release_gil(), py::doc(
    "Determine if entry value contains a float array.\n"
"\n"
":returns: True if the entry value is of float array type.")
  )
  
  
  
    
  .
def
("isDoubleArray", &nt::Value::IsDoubleArray, release_gil(), py::doc(
    "Determine if entry value contains a double array.\n"
"\n"
":returns: True if the entry value is of double array type.")
  )
  
  
  
    
  .
def
("isStringArray", &nt::Value::IsStringArray, release_gil(), py::doc(
    "Determine if entry value contains a string array.\n"
"\n"
":returns: True if the entry value is of string array type.")
  )
  
  
  
    
  .
def
("getBoolean", [](Value *self) {
  pyntcore::ensure_value_is(NT_BOOLEAN, self);
  return self->GetBoolean();
}
, py::doc(
    "Get the entry's boolean value.\n"
"\n"
":returns: The boolean value.")
  )
  
  
  
    
  .
def
("getInteger", [](Value *self) {
  pyntcore::ensure_value_is(NT_INTEGER, self);
  return self->GetInteger();
}
, py::doc(
    "Get the entry's integer value.\n"
"\n"
":returns: The integer value.")
  )
  
  
  
    
  .
def
("getFloat", [](Value *self) {
  pyntcore::ensure_value_is(NT_FLOAT, self);
  return self->GetFloat();
}
, py::doc(
    "Get the entry's float value.\n"
"\n"
":returns: The float value.")
  )
  
  
  
    
  .
def
("getDouble", [](Value *self) {
  pyntcore::ensure_value_is(NT_DOUBLE, self);
  return self->GetDouble();
}
, py::doc(
    "Get the entry's double value.\n"
"\n"
":returns: The double value.")
  )
  
  
  
    
  .
def
("getString", [](Value *self) {
  pyntcore::ensure_value_is(NT_STRING, self);
  return self->GetString();
}
, py::doc(
    "Get the entry's string value.\n"
"\n"
":returns: The string value.")
  )
  
  
  
    
  .
def
("getRaw", [](Value *self) {
  pyntcore::ensure_value_is(NT_RAW, self);
  return self->GetRaw();
}
, py::doc(
    "Get the entry's raw value.\n"
"\n"
":returns: The raw value.")
  )
  
  
  
    
  .
def
("getBooleanArray", [](Value *self) -> py::object {
  pyntcore::ensure_value_is(NT_BOOLEAN_ARRAY, self);
  auto v = self->value();
  py::list l(v.data.arr_boolean.size);
  for (size_t i = 0; i < v.data.arr_boolean.size; i++) {
    auto b = py::bool_(v.data.arr_boolean.arr[i]);
    PyList_SET_ITEM(l.ptr(), i, b.release().ptr());
  }
  return std::move(l);
}
, py::doc(
    "Get the entry's boolean array value.\n"
"\n"
":returns: The boolean array value.")
  )
  
  
  
    
  .
def
("getIntegerArray", [](Value *self) {
  pyntcore::ensure_value_is(NT_INTEGER_ARRAY, self);
  return self->GetIntegerArray();
}
, py::doc(
    "Get the entry's integer array value.\n"
"\n"
":returns: The integer array value.")
  )
  
  
  
    
  .
def
("getFloatArray", [](Value *self) {
  pyntcore::ensure_value_is(NT_FLOAT_ARRAY, self);
  return self->GetFloatArray();
}
, py::doc(
    "Get the entry's float array value.\n"
"\n"
":returns: The float array value.")
  )
  
  
  
    
  .
def
("getDoubleArray", [](Value *self) {
  pyntcore::ensure_value_is(NT_DOUBLE_ARRAY, self);
  return self->GetDoubleArray();
}
, py::doc(
    "Get the entry's double array value.\n"
"\n"
":returns: The double array value.")
  )
  
  
  
    
  .
def
("getStringArray", [](Value *self) {
  pyntcore::ensure_value_is(NT_STRING_ARRAY, self);
  return self->GetStringArray();
}
, py::doc(
    "Get the entry's string array value.\n"
"\n"
":returns: The string array value.")
  )
  
  
  
    
  .
def_static
("makeBoolean", &nt::Value::MakeBoolean,
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates a boolean entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value")
  )
  
  
  
    
  .
def_static
("makeInteger", &nt::Value::MakeInteger,
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates an integer entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value")
  )
  
  
  
    
  .
def_static
("makeFloat", &nt::Value::MakeFloat,
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates a float entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value")
  )
  
  
  
    
  .
def_static
("makeDouble", &nt::Value::MakeDouble,
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates a double entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value")
  )
  
  
  
    
  .
def_static
("makeString", static_cast<Value(*)(std::string_view, int64_t)>(
        &nt::Value::MakeString),
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates a string entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value")
  )
  
  
  
    
  .
def_static
("makeRaw", static_cast<Value(*)(std::span<const uint8_t>, int64_t)>(
        &nt::Value::MakeRaw),
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates a raw entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value")
  )
  
  
  
    
  .
def_static
("makeBooleanArray", static_cast<Value(*)(std::span<const bool>, int64_t)>(
        &nt::Value::MakeBooleanArray),
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates a boolean array entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value")
  )
  
  
  
    
  .
def_static
("makeIntegerArray", static_cast<Value(*)(std::vector<int64_t>&&, int64_t)>(
        &nt::Value::MakeIntegerArray),
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates an integer array entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value\n"
"          \n"
"          .. note:: This function moves the values out of the vector.")
  )
  
  
  
    
  .
def_static
("makeFloatArray", static_cast<Value(*)(std::vector<float>&&, int64_t)>(
        &nt::Value::MakeFloatArray),
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates a float array entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value\n"
"          \n"
"          .. note:: This function moves the values out of the vector.")
  )
  
  
  
    
  .
def_static
("makeDoubleArray", static_cast<Value(*)(std::vector<double>&&, int64_t)>(
        &nt::Value::MakeDoubleArray),
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates a double array entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value\n"
"          \n"
"          .. note:: This function moves the values out of the vector.")
  )
  
  
  
    
  .
def_static
("makeStringArray", static_cast<Value(*)(std::vector<std::string>&&, int64_t)>(
        &nt::Value::MakeStringArray),
      py::arg("value"), py::arg("time") = 0, release_gil(), py::doc(
    "Creates a string array entry value.\n"
"\n"
":param value: the value\n"
":param time:  if nonzero, the creation time to use (instead of the current\n"
"              time)\n"
"\n"
":returns: The entry value\n"
"          \n"
"          .. note:: This function moves the values out of the vector.")
  )
  
  
  .def_static("makeValue", [](py::handle value) {
    return pyntcore::py2ntvalue(value);
  }, py::arg("value"))
.def_static("getFactoryByType", [](nt::NetworkTableType type) {
  return pyntcore::valueFactoryByType(type);
}, py::arg("type"))
.def("__repr__", [](const Value &self) -> py::str {
    auto typestr = pyntcore::nttype2str(self.type());
    auto valrepr = py::repr(pyntcore::ntvalue2py(self));
    return py::str("<Value type={} value={}>").format(typestr, valrepr);
});

  


  }






}

}; // struct rpybuild_NetworkTableValue_initializer

static std::unique_ptr<rpybuild_NetworkTableValue_initializer> cls;

void begin_init_NetworkTableValue(py::module &m) {
  cls = std::make_unique<rpybuild_NetworkTableValue_initializer>(m);
}

void finish_init_NetworkTableValue() {
  cls->finish();
  cls.reset();
}