
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <networktables/MultiSubscriber.h>


#include <wpi_span_type_caster.h>















#include <type_traits>


  using namespace nt;





struct rpybuild_MultiSubscriber_initializer {


  

  












  py::class_<typename nt::MultiSubscriber> cls_MultiSubscriber;

    

    
    

  py::module &m;

  
  rpybuild_MultiSubscriber_initializer(py::module &m) :

  

  

  

  
    cls_MultiSubscriber(m, "MultiSubscriber", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_MultiSubscriber.doc() =
    "Subscribe to multiple topics based on one or more topic name prefixes. Can be\n"
"used in combination with ValueListenerPoller to listen for value changes\n"
"across all matching topics.";

  cls_MultiSubscriber
  
    
  .def(py::init<NetworkTableInstance, std::span<const std::string_view>, const PubSubOptions&>(),
      py::arg("inst"), py::arg("prefixes"), py::arg("options") = kDefaultPubSubOptions, release_gil()
    , py::keep_alive<1, 4>(), py::doc(
    "Create a multiple subscriber.\n"
"\n"
":param inst:     instance\n"
":param prefixes: topic name prefixes\n"
":param options:  subscriber options")
  )
  
  
  .def("close", [](MultiSubscriber *self) {
  py::gil_scoped_release release;
  *self = MultiSubscriber();
}, py::doc("Destroys the subscriber"))
.def("__enter__", [](MultiSubscriber *self) {
  return self;
})
.def("__exit__", [](MultiSubscriber *self, py::args args) {
  py::gil_scoped_release release;
  *self = MultiSubscriber();
})
;

  


  }






}

}; // struct rpybuild_MultiSubscriber_initializer

static std::unique_ptr<rpybuild_MultiSubscriber_initializer> cls;

void begin_init_MultiSubscriber(py::module &m) {
  cls = std::make_unique<rpybuild_MultiSubscriber_initializer>(m);
}

void finish_init_MultiSubscriber() {
  cls->finish();
  cls.reset();
}