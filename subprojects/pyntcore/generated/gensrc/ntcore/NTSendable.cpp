
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <networktables/NTSendable.h>








#define RPYGEN_ENABLE_nt__NTSendable_PROTECTED_CONSTRUCTORS
#include <rpygen/nt__NTSendable.hpp>







#include <networktables/NTSendableBuilder.h>



#include <type_traits>


  using namespace nt;





struct rpybuild_NTSendable_initializer {


  

  












  
  using NTSendable_Trampoline = rpygen::PyTrampoline_nt__NTSendable<typename nt::NTSendable, typename rpygen::PyTrampolineCfg_nt__NTSendable<>>;
    static_assert(std::is_abstract<NTSendable_Trampoline>::value == false, "nt::NTSendable " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename nt::NTSendable, NTSendable_Trampoline, wpi::Sendable> cls_NTSendable;

    

    
    

  py::module &m;

  
  rpybuild_NTSendable_initializer(py::module &m) :

  

  

  

  
    cls_NTSendable(m, "NTSendable"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_NTSendable.doc() =
    "Interface for NetworkTable Sendable objects.";

  cls_NTSendable
  
    .def(py::init<>(), release_gil())
  
    
  .
def
("initSendable", static_cast<void(nt::NTSendable::*)(NTSendableBuilder&)>(
        &nt::NTSendable::InitSendable),
      py::arg("builder"), release_gil(), py::doc(
    "Initializes this Sendable object.\n"
"\n"
":param builder: sendable builder")
  )
  
  
  
    
  .
def
("initSendable", static_cast<void(nt::NTSendable::*)(wpi::SendableBuilder&)>(
        &nt::NTSendable::InitSendable),
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_NTSendable_initializer

static std::unique_ptr<rpybuild_NTSendable_initializer> cls;

void begin_init_NTSendable(py::module &m) {
  cls = std::make_unique<rpybuild_NTSendable_initializer>(m);
}

void finish_init_NTSendable() {
  cls->finish();
  cls.reset();
}