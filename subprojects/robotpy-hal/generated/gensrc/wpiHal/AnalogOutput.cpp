
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/AnalogOutput.h>
















#include <type_traits>






struct rpybuild_AnalogOutput_initializer {













  py::module &m;

  
  rpybuild_AnalogOutput_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("initializeAnalogOutputPort", [](HAL_PortHandle portHandle, const char* allocationLocation) {
                    int32_t status;
          auto __ret =::HAL_InitializeAnalogOutputPort(std::move(portHandle), allocationLocation, &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("portHandle"), py::arg("allocationLocation"), release_gil(), py::doc(
    "Initializes the analog output port using the given port object.\n"
"\n"
":param in:  portHandle handle to the port\n"
":param in:  allocationLocation the location where the allocation is occurring\n"
"            (can be null)\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: the created analog output handle")
  )
  
  ;
m
  .
def
("freeAnalogOutputPort", &::HAL_FreeAnalogOutputPort,
      py::arg("analogOutputHandle"), release_gil(), py::doc(
    "Frees an analog output port.\n"
"\n"
":param analogOutputHandle: the analog output handle")
  )
  
  ;
m
  .
def
("setAnalogOutput", [](HAL_AnalogOutputHandle analogOutputHandle, double voltage) {
                    int32_t status;
          ::HAL_SetAnalogOutput(std::move(analogOutputHandle), std::move(voltage), &status);
          return status;
        },
      py::arg("analogOutputHandle"), py::arg("voltage"), release_gil(), py::doc(
    "Sets an analog output value.\n"
"\n"
":param in:  analogOutputHandle the analog output handle\n"
":param in:  voltage            the voltage (0-5v) to output\n"
":param out: status            Error status variable. 0 on success.")
  )
  
  ;
m
  .
def
("getAnalogOutput", [](HAL_AnalogOutputHandle analogOutputHandle) {
                    int32_t status;
          auto __ret =::HAL_GetAnalogOutput(std::move(analogOutputHandle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("analogOutputHandle"), release_gil(), py::doc(
    "Gets the current analog output value.\n"
"\n"
":param in:  analogOutputHandle the analog output handle\n"
":param out: status            Error status variable. 0 on success.\n"
"\n"
":returns: the current output voltage (0-5v)")
  )
  
  ;
m
  .
def
("checkAnalogOutputChannel", &::HAL_CheckAnalogOutputChannel,
      py::arg("channel"), release_gil(), py::doc(
    "Checks that the analog output channel number is valid.\n"
"\n"
"Verifies that the analog channel number is one of the legal channel numbers.\n"
"Channel numbers are 0-based.\n"
"\n"
":returns: Analog channel is valid")
  )
  
  ;



}

}; // struct rpybuild_AnalogOutput_initializer

static std::unique_ptr<rpybuild_AnalogOutput_initializer> cls;

void begin_init_AnalogOutput(py::module &m) {
  cls = std::make_unique<rpybuild_AnalogOutput_initializer>(m);
}

void finish_init_AnalogOutput() {
  cls->finish();
  cls.reset();
}