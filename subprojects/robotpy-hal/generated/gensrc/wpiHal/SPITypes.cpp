
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/SPITypes.h>
















#include <type_traits>


  using namespace hal;





struct rpybuild_SPITypes_initializer {







  
  py::enum_<::HAL_SPIPort> enum1;

  
  py::enum_<::HAL_SPIMode> enum2;







  py::module &m;

  
  rpybuild_SPITypes_initializer(py::module &m) :

  

  
    enum1
  (m, "SPIPort"
  ),
  
    enum2
  (m, "SPIMode"
  ),
  

  

  

    m(m)
  {
    
    
      enum1
  
    .value("kInvalid", ::HAL_SPIPort::HAL_SPI_kInvalid)
  
    .value("kOnboardCS0", ::HAL_SPIPort::HAL_SPI_kOnboardCS0)
  
    .value("kOnboardCS1", ::HAL_SPIPort::HAL_SPI_kOnboardCS1)
  
    .value("kOnboardCS2", ::HAL_SPIPort::HAL_SPI_kOnboardCS2)
  
    .value("kOnboardCS3", ::HAL_SPIPort::HAL_SPI_kOnboardCS3)
  
    .value("kMXP", ::HAL_SPIPort::HAL_SPI_kMXP)
  ;

    
      enum2
  
    .value("kMode0", ::HAL_SPIMode::HAL_SPI_kMode0)
  
    .value("kMode1", ::HAL_SPIMode::HAL_SPI_kMode1)
  
    .value("kMode2", ::HAL_SPIMode::HAL_SPI_kMode2)
  
    .value("kMode3", ::HAL_SPIMode::HAL_SPI_kMode3)
  ;

    

    
  }

void finish() {










}

}; // struct rpybuild_SPITypes_initializer

static std::unique_ptr<rpybuild_SPITypes_initializer> cls;

void begin_init_SPITypes(py::module &m) {
  cls = std::make_unique<rpybuild_SPITypes_initializer>(m);
}

void finish_init_SPITypes() {
  cls->finish();
  cls.reset();
}