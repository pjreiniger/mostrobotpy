
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/Ports.h>
















#include <type_traits>






struct rpybuild_Ports_initializer {













  py::module &m;

  
  rpybuild_Ports_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("getNumAccumulators", &::HAL_GetNumAccumulators, release_gil(), py::doc(
    "Gets the number of analog accumulators in the current system.\n"
"\n"
":returns: the number of analog accumulators")
  )
  
  ;
m
  .
def
("getNumAnalogTriggers", &::HAL_GetNumAnalogTriggers, release_gil(), py::doc(
    "Gets the number of analog triggers in the current system.\n"
"\n"
":returns: the number of analog triggers")
  )
  
  ;
m
  .
def
("getNumAnalogInputs", &::HAL_GetNumAnalogInputs, release_gil(), py::doc(
    "Gets the number of analog inputs in the current system.\n"
"\n"
":returns: the number of analog inputs")
  )
  
  ;
m
  .
def
("getNumAnalogOutputs", &::HAL_GetNumAnalogOutputs, release_gil(), py::doc(
    "Gets the number of analog outputs in the current system.\n"
"\n"
":returns: the number of analog outputs")
  )
  
  ;
m
  .
def
("getNumCounters", &::HAL_GetNumCounters, release_gil(), py::doc(
    "Gets the number of counters in the current system.\n"
"\n"
":returns: the number of counters")
  )
  
  ;
m
  .
def
("getNumDigitalHeaders", &::HAL_GetNumDigitalHeaders, release_gil(), py::doc(
    "Gets the number of digital headers in the current system.\n"
"\n"
":returns: the number of digital headers")
  )
  
  ;
m
  .
def
("getNumPWMHeaders", &::HAL_GetNumPWMHeaders, release_gil(), py::doc(
    "Gets the number of PWM headers in the current system.\n"
"\n"
":returns: the number of PWM headers")
  )
  
  ;
m
  .
def
("getNumDigitalChannels", &::HAL_GetNumDigitalChannels, release_gil(), py::doc(
    "Gets the number of digital channels in the current system.\n"
"\n"
":returns: the number of digital channels")
  )
  
  ;
m
  .
def
("getNumPWMChannels", &::HAL_GetNumPWMChannels, release_gil(), py::doc(
    "Gets the number of PWM channels in the current system.\n"
"\n"
":returns: the number of PWM channels")
  )
  
  ;
m
  .
def
("getNumDigitalPWMOutputs", &::HAL_GetNumDigitalPWMOutputs, release_gil(), py::doc(
    "Gets the number of digital IO PWM outputs in the current system.\n"
"\n"
":returns: the number of digital IO PWM outputs")
  )
  
  ;
m
  .
def
("getNumEncoders", &::HAL_GetNumEncoders, release_gil(), py::doc(
    "Gets the number of quadrature encoders in the current system.\n"
"\n"
":returns: the number of quadrature encoders")
  )
  
  ;
m
  .
def
("getNumInterrupts", &::HAL_GetNumInterrupts, release_gil(), py::doc(
    "Gets the number of interrupts in the current system.\n"
"\n"
":returns: the number of interrupts")
  )
  
  ;
m
  .
def
("getNumRelayChannels", &::HAL_GetNumRelayChannels, release_gil(), py::doc(
    "Gets the number of relay channels in the current system.\n"
"\n"
":returns: the number of relay channels")
  )
  
  ;
m
  .
def
("getNumRelayHeaders", &::HAL_GetNumRelayHeaders, release_gil(), py::doc(
    "Gets the number of relay headers in the current system.\n"
"\n"
":returns: the number of relay headers")
  )
  
  ;
m
  .
def
("getNumCTREPCMModules", &::HAL_GetNumCTREPCMModules, release_gil(), py::doc(
    "Gets the number of PCM modules in the current system.\n"
"\n"
":returns: the number of PCM modules")
  )
  
  ;
m
  .
def
("getNumCTRESolenoidChannels", &::HAL_GetNumCTRESolenoidChannels, release_gil(), py::doc(
    "Gets the number of solenoid channels in the current system.\n"
"\n"
":returns: the number of solenoid channels")
  )
  
  ;
m
  .
def
("getNumCTREPDPModules", &::HAL_GetNumCTREPDPModules, release_gil(), py::doc(
    "Gets the number of PDP modules in the current system.\n"
"\n"
":returns: the number of PDP modules")
  )
  
  ;
m
  .
def
("getNumCTREPDPChannels", &::HAL_GetNumCTREPDPChannels, release_gil(), py::doc(
    "Gets the number of PDP channels in the current system.\n"
"\n"
":returns: the number of PDP channels")
  )
  
  ;
m
  .
def
("getNumREVPDHModules", &::HAL_GetNumREVPDHModules, release_gil(), py::doc(
    "Gets the number of PDH modules in the current system.\n"
"\n"
":returns: the number of PDH modules")
  )
  
  ;
m
  .
def
("getNumREVPDHChannels", &::HAL_GetNumREVPDHChannels, release_gil(), py::doc(
    "Gets the number of PDH channels in the current system.\n"
"\n"
":returns: the number of PDH channels")
  )
  
  ;
m
  .
def
("getNumREVPHModules", &::HAL_GetNumREVPHModules, release_gil(), py::doc(
    "Gets the number of PH modules in the current system.\n"
"\n"
":returns: the number of PH modules")
  )
  
  ;
m
  .
def
("getNumREVPHChannels", &::HAL_GetNumREVPHChannels, release_gil(), py::doc(
    "Gets the number of PH channels in the current system.\n"
"\n"
":returns: the number of PH channels")
  )
  
  ;
m
  .
def
("getNumDutyCycles", &::HAL_GetNumDutyCycles, release_gil(), py::doc(
    "Gets the number of duty cycle inputs in the current system.\n"
"\n"
":returns: the number of Duty Cycle inputs")
  )
  
  ;
m
  .
def
("getNumAddressableLEDs", &::HAL_GetNumAddressableLEDs, release_gil(), py::doc(
    "Gets the number of addressable LED generators in the current system.\n"
"\n"
":returns: the number of Addressable LED generators")
  )
  
  ;



}

}; // struct rpybuild_Ports_initializer

static std::unique_ptr<rpybuild_Ports_initializer> cls;

void begin_init_Ports(py::module &m) {
  cls = std::make_unique<rpybuild_Ports_initializer>(m);
}

void finish_init_Ports() {
  cls->finish();
  cls.reset();
}