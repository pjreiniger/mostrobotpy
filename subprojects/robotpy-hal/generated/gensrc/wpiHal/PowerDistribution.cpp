
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/PowerDistribution.h>
















#include <type_traits>




struct rpybuild_PowerDistribution_initializer {


  

  


  

  


  

  







  
  py::enum_<::HAL_PowerDistributionType> enum1;






  py::class_<typename ::HAL_PowerDistributionVersion> cls_HAL_PowerDistributionVersion;

    

    
    
  py::class_<typename ::HAL_PowerDistributionFaults> cls_HAL_PowerDistributionFaults;

    

    
    
  py::class_<typename ::HAL_PowerDistributionStickyFaults> cls_HAL_PowerDistributionStickyFaults;

    

    
    

  py::module &m;

  
  rpybuild_PowerDistribution_initializer(py::module &m) :

  

  
    enum1
  (m, "PowerDistributionType"
  ,
    "The types of power distribution devices."),
  

  

  
    cls_HAL_PowerDistributionVersion(m, "PowerDistributionVersion"),

  

  
  
  
    cls_HAL_PowerDistributionFaults(m, "PowerDistributionFaults"),

  

  
  
  
    cls_HAL_PowerDistributionStickyFaults(m, "PowerDistributionStickyFaults"),

  

  
  
  

    m(m)
  {
    
    
      enum1
  
    .value("kAutomatic", ::HAL_PowerDistributionType::HAL_PowerDistributionType_kAutomatic,
      "Automatically determines the module type")
  
    .value("kCTRE", ::HAL_PowerDistributionType::HAL_PowerDistributionType_kCTRE,
      "CTRE (Cross The Road Electronics) Power Distribution Panel (PDP).")
  
    .value("kRev", ::HAL_PowerDistributionType::HAL_PowerDistributionType_kRev,
      "REV Power Distribution Hub (PDH).")
  ;

    

    
    
  

    
    
    
  

    
    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_HAL_PowerDistributionVersion.doc() =
    "Power distribution version.";

  cls_HAL_PowerDistributionVersion
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("firmwareMajor", &::HAL_PowerDistributionVersion::firmwareMajor, py::doc(
    "Firmware major version number."))
  
    .def_readwrite("firmwareMinor", &::HAL_PowerDistributionVersion::firmwareMinor, py::doc(
    "Firmware minor version number."))
  
    .def_readwrite("firmwareFix", &::HAL_PowerDistributionVersion::firmwareFix, py::doc(
    "Firmware fix version number."))
  
    .def_readwrite("hardwareMinor", &::HAL_PowerDistributionVersion::hardwareMinor, py::doc(
    "Hardware minor version number."))
  
    .def_readwrite("hardwareMajor", &::HAL_PowerDistributionVersion::hardwareMajor, py::doc(
    "Hardware major version number."))
  
    .def_readwrite("uniqueId", &::HAL_PowerDistributionVersion::uniqueId, py::doc(
    "Unique ID."))
  ;

  


  }

  {
  
  
  


  

  

  cls_HAL_PowerDistributionFaults
  
    .def(py::init<>(), release_gil())
  
    .def_property("channel0BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel0BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel0BreakerFault = v; }, py::doc(
    "Breaker fault on channel 0.")
    )
  
    .def_property("channel1BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel1BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel1BreakerFault = v; }, py::doc(
    "Breaker fault on channel 1.")
    )
  
    .def_property("channel2BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel2BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel2BreakerFault = v; }, py::doc(
    "Breaker fault on channel 2.")
    )
  
    .def_property("channel3BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel3BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel3BreakerFault = v; }, py::doc(
    "Breaker fault on channel 3.")
    )
  
    .def_property("channel4BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel4BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel4BreakerFault = v; }, py::doc(
    "Breaker fault on channel 4.")
    )
  
    .def_property("channel5BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel5BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel5BreakerFault = v; }, py::doc(
    "Breaker fault on channel 5.")
    )
  
    .def_property("channel6BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel6BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel6BreakerFault = v; }, py::doc(
    "Breaker fault on channel 6.")
    )
  
    .def_property("channel7BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel7BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel7BreakerFault = v; }, py::doc(
    "Breaker fault on channel 7.")
    )
  
    .def_property("channel8BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel8BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel8BreakerFault = v; }, py::doc(
    "Breaker fault on channel 8.")
    )
  
    .def_property("channel9BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel9BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel9BreakerFault = v; }, py::doc(
    "Breaker fault on channel 9.")
    )
  
    .def_property("channel10BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel10BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel10BreakerFault = v; }, py::doc(
    "Breaker fault on channel 10.")
    )
  
    .def_property("channel11BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel11BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel11BreakerFault = v; }, py::doc(
    "Breaker fault on channel 12.")
    )
  
    .def_property("channel12BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel12BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel12BreakerFault = v; }, py::doc(
    "Breaker fault on channel 13.")
    )
  
    .def_property("channel13BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel13BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel13BreakerFault = v; }, py::doc(
    "Breaker fault on channel 14.")
    )
  
    .def_property("channel14BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel14BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel14BreakerFault = v; }, py::doc(
    "Breaker fault on channel 15.")
    )
  
    .def_property("channel15BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel15BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel15BreakerFault = v; }, py::doc(
    "Breaker fault on channel 16.")
    )
  
    .def_property("channel16BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel16BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel16BreakerFault = v; }, py::doc(
    "Breaker fault on channel 17.")
    )
  
    .def_property("channel17BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel17BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel17BreakerFault = v; }, py::doc(
    "Breaker fault on channel 18.")
    )
  
    .def_property("channel18BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel18BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel18BreakerFault = v; }, py::doc(
    "Breaker fault on channel 19.")
    )
  
    .def_property("channel19BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel19BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel19BreakerFault = v; }, py::doc(
    "Breaker fault on channel 20.")
    )
  
    .def_property("channel20BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel20BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel20BreakerFault = v; }, py::doc(
    "Breaker fault on channel 21.")
    )
  
    .def_property("channel21BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel21BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel21BreakerFault = v; }, py::doc(
    "Breaker fault on channel 22.")
    )
  
    .def_property("channel22BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel22BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel22BreakerFault = v; }, py::doc(
    "Breaker fault on channel 23.")
    )
  
    .def_property("channel23BreakerFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.channel23BreakerFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.channel23BreakerFault = v; }, py::doc(
    "Breaker fault on channel 24.")
    )
  
    .def_property("brownout",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.brownout; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.brownout = v; }, py::doc(
    "The input voltage is below the minimum voltage.")
    )
  
    .def_property("canWarning",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.canWarning; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.canWarning = v; }, py::doc(
    "A warning was raised by the device's CAN controller.")
    )
  
    .def_property("hardwareFault",  
        [](const ::HAL_PowerDistributionFaults& inst) -> uint32_t { return inst.hardwareFault; },
        [](::HAL_PowerDistributionFaults& inst, uint32_t v) {inst.hardwareFault = v; }, py::doc(
    "The hardware on the device has malfunctioned.")
    )
  ;

  


  }

  {
  
  
  


  

  cls_HAL_PowerDistributionStickyFaults.doc() =
    "Storage for REV PDH Sticky Faults";

  cls_HAL_PowerDistributionStickyFaults
  
    .def(py::init<>(), release_gil())
  
    .def_property("channel0BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel0BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel0BreakerFault = v; }, py::doc(
    "Breaker fault on channel 0.")
    )
  
    .def_property("channel1BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel1BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel1BreakerFault = v; }, py::doc(
    "Breaker fault on channel 1.")
    )
  
    .def_property("channel2BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel2BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel2BreakerFault = v; }, py::doc(
    "Breaker fault on channel 2.")
    )
  
    .def_property("channel3BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel3BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel3BreakerFault = v; }, py::doc(
    "Breaker fault on channel 3.")
    )
  
    .def_property("channel4BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel4BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel4BreakerFault = v; }, py::doc(
    "Breaker fault on channel 4.")
    )
  
    .def_property("channel5BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel5BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel5BreakerFault = v; }, py::doc(
    "Breaker fault on channel 5.")
    )
  
    .def_property("channel6BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel6BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel6BreakerFault = v; }, py::doc(
    "Breaker fault on channel 6.")
    )
  
    .def_property("channel7BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel7BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel7BreakerFault = v; }, py::doc(
    "Breaker fault on channel 7.")
    )
  
    .def_property("channel8BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel8BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel8BreakerFault = v; }, py::doc(
    "Breaker fault on channel 8.")
    )
  
    .def_property("channel9BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel9BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel9BreakerFault = v; }, py::doc(
    "Breaker fault on channel 9.")
    )
  
    .def_property("channel10BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel10BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel10BreakerFault = v; }, py::doc(
    "Breaker fault on channel 10.")
    )
  
    .def_property("channel11BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel11BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel11BreakerFault = v; }, py::doc(
    "Breaker fault on channel 12.")
    )
  
    .def_property("channel12BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel12BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel12BreakerFault = v; }, py::doc(
    "Breaker fault on channel 13.")
    )
  
    .def_property("channel13BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel13BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel13BreakerFault = v; }, py::doc(
    "Breaker fault on channel 14.")
    )
  
    .def_property("channel14BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel14BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel14BreakerFault = v; }, py::doc(
    "Breaker fault on channel 15.")
    )
  
    .def_property("channel15BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel15BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel15BreakerFault = v; }, py::doc(
    "Breaker fault on channel 16.")
    )
  
    .def_property("channel16BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel16BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel16BreakerFault = v; }, py::doc(
    "Breaker fault on channel 17.")
    )
  
    .def_property("channel17BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel17BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel17BreakerFault = v; }, py::doc(
    "Breaker fault on channel 18.")
    )
  
    .def_property("channel18BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel18BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel18BreakerFault = v; }, py::doc(
    "Breaker fault on channel 19.")
    )
  
    .def_property("channel19BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel19BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel19BreakerFault = v; }, py::doc(
    "Breaker fault on channel 20.")
    )
  
    .def_property("channel20BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel20BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel20BreakerFault = v; }, py::doc(
    "Breaker fault on channel 21.")
    )
  
    .def_property("channel21BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel21BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel21BreakerFault = v; }, py::doc(
    "Breaker fault on channel 22.")
    )
  
    .def_property("channel22BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel22BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel22BreakerFault = v; }, py::doc(
    "Breaker fault on channel 23.")
    )
  
    .def_property("channel23BreakerFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.channel23BreakerFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.channel23BreakerFault = v; }, py::doc(
    "Breaker fault on channel 24.")
    )
  
    .def_property("brownout",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.brownout; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.brownout = v; }, py::doc(
    "The input voltage is below the minimum voltage.")
    )
  
    .def_property("canWarning",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.canWarning; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.canWarning = v; }, py::doc(
    "A warning was raised by the device's CAN controller.")
    )
  
    .def_property("canBusOff",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.canBusOff; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.canBusOff = v; }, py::doc(
    "The device's CAN controller experienced a \"Bus Off\" event.")
    )
  
    .def_property("hardwareFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.hardwareFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.hardwareFault = v; }, py::doc(
    "The hardware on the device has malfunctioned.")
    )
  
    .def_property("firmwareFault",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.firmwareFault; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.firmwareFault = v; }, py::doc(
    "The firmware on the device has malfunctioned.")
    )
  
    .def_property("hasReset",  
        [](const ::HAL_PowerDistributionStickyFaults& inst) -> uint32_t { return inst.hasReset; },
        [](::HAL_PowerDistributionStickyFaults& inst, uint32_t v) {inst.hasReset = v; }, py::doc(
    "The device has rebooted.")
    )
  ;

  


  }



m
  .
def
("initializePowerDistribution", [](int32_t moduleNumber, HAL_PowerDistributionType type, const char* allocationLocation) {
                    int32_t status;
          auto __ret =::HAL_InitializePowerDistribution(std::move(moduleNumber), std::move(type), allocationLocation, &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("moduleNumber"), py::arg("type"), py::arg("allocationLocation"), release_gil(), py::doc(
    "Initializes a Power Distribution Panel.\n"
"\n"
":param in:  moduleNumber       the module number to initialize\n"
":param in:  type               the type of module to initialize\n"
":param in:  allocationLocation the location where the allocation is occurring\n"
":param out: status            Error status variable. 0 on success.\n"
"\n"
":returns: the created PowerDistribution handle")
  )
  
  ;
m
  .
def
("getPowerDistributionModuleNumber", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionModuleNumber(std::move(handle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), release_gil(), py::doc(
    "Gets the module number for a specific handle.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: the module number")
  )
  
  ;
m
  .
def
("cleanPowerDistribution", &::HAL_CleanPowerDistribution,
      py::arg("handle"), release_gil(), py::doc(
    "Cleans a PowerDistribution module.\n"
"\n"
":param handle: the module handle")
  )
  
  ;
m
  .
def
("checkPowerDistributionChannel", &::HAL_CheckPowerDistributionChannel,
      py::arg("handle"), py::arg("channel"), release_gil(), py::doc(
    "Checks if a PowerDistribution channel is valid.\n"
"\n"
":param handle:  the module handle\n"
":param channel: the channel to check\n"
"\n"
":returns: true if the channel is valid, otherwise false")
  )
  
  ;
m
  .
def
("checkPowerDistributionModule", &::HAL_CheckPowerDistributionModule,
      py::arg("module"), py::arg("type"), release_gil(), py::doc(
    "Checks if a PowerDistribution module is valid.\n"
"\n"
":param module: the module to check\n"
":param type:   the type of module\n"
"\n"
":returns: true if the module is valid, otherwise false")
  )
  
  ;
m
  .
def
("getPowerDistributionType", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionType(std::move(handle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), release_gil(), py::doc(
    "Gets the type of PowerDistribution module.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: the type of module")
  )
  
  ;
m
  .
def
("getPowerDistributionNumChannels", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionNumChannels(std::move(handle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), release_gil(), py::doc(
    "Gets the number of channels for this handle.\n"
"\n"
":param in:  handle the handle\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: number of channels")
  )
  
  ;
m
  .
def
("getPowerDistributionTemperature", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionTemperature(std::move(handle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), release_gil(), py::doc(
    "Gets the temperature of the Power Distribution Panel.\n"
"\n"
"Not supported on the Rev PDH and returns 0.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: the module temperature (celsius)")
  )
  
  ;
m
  .
def
("getPowerDistributionVoltage", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionVoltage(std::move(handle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), release_gil(), py::doc(
    "Gets the PowerDistribution input voltage.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: the input voltage (volts)")
  )
  
  ;
m
  .
def
("getPowerDistributionChannelCurrent", [](HAL_PowerDistributionHandle handle, int32_t channel) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionChannelCurrent(std::move(handle), std::move(channel), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), py::arg("channel"), release_gil(), py::doc(
    "Gets the current of a specific PowerDistribution channel.\n"
"\n"
":param in:  handle   the module handle\n"
":param in:  channel  the channel\n"
":param out: status  Error status variable. 0 on success.\n"
"\n"
":returns: the channel current (amps)")
  )
  
  ;
m
  .
def
("getPowerDistributionAllChannelCurrents", [](HAL_PowerDistributionHandle handle, int32_t currentsLength) {
                    double currents;
          int32_t status;
          ::HAL_GetPowerDistributionAllChannelCurrents(std::move(handle), &currents, std::move(currentsLength), &status);
          return std::make_tuple(currents,status);
        },
      py::arg("handle"), py::arg("currentsLength"), release_gil(), py::doc(
    "Gets the current of all channels on the PowerDistribution.\n"
"\n"
"The array must be large enough to hold all channels.\n"
"\n"
":param in:  handle         the module handle\n"
":param out: currents      the currents\n"
":param in:  currentsLength the length of the currents array\n"
":param out: status        Error status variable. 0 on success.")
  )
  
  ;
m
  .
def
("getPowerDistributionTotalCurrent", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionTotalCurrent(std::move(handle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), release_gil(), py::doc(
    "Gets the total current of the PowerDistribution.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: the total current (amps)")
  )
  
  ;
m
  .
def
("getPowerDistributionTotalPower", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionTotalPower(std::move(handle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), release_gil(), py::doc(
    "Gets the total power of the Power Distribution Panel.\n"
"\n"
"Not supported on the Rev PDH and returns 0.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: the total power (watts)")
  )
  
  ;
m
  .
def
("getPowerDistributionTotalEnergy", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionTotalEnergy(std::move(handle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), release_gil(), py::doc(
    "Gets the total energy of the Power Distribution Panel.\n"
"\n"
"Not supported on the Rev PDH and returns 0.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: the total energy (joules)")
  )
  
  ;
m
  .
def
("resetPowerDistributionTotalEnergy", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          ::HAL_ResetPowerDistributionTotalEnergy(std::move(handle), &status);
          return status;
        },
      py::arg("handle"), release_gil(), py::doc(
    "Resets the PowerDistribution accumulated energy.\n"
"\n"
"Not supported on the Rev PDH and does nothing.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.")
  )
  
  ;
m
  .
def
("clearPowerDistributionStickyFaults", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          ::HAL_ClearPowerDistributionStickyFaults(std::move(handle), &status);
          return status;
        },
      py::arg("handle"), release_gil(), py::doc(
    "Clears any PowerDistribution sticky faults.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.")
  )
  
  ;
m
  .
def
("setPowerDistributionSwitchableChannel", [](HAL_PowerDistributionHandle handle, HAL_Bool enabled) {
                    int32_t status;
          ::HAL_SetPowerDistributionSwitchableChannel(std::move(handle), std::move(enabled), &status);
          return status;
        },
      py::arg("handle"), py::arg("enabled"), release_gil(), py::doc(
    "Power on/off switchable channel.\n"
"\n"
"This is a REV PDH-specific function. This function will no-op on CTRE PDP.\n"
"\n"
":param in:  handle the module handle\n"
":param in:  enabled true to turn on switchable channel\n"
":param out: status Error status variable. 0 on success.")
  )
  
  ;
m
  .
def
("getPowerDistributionSwitchableChannel", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          auto __ret =::HAL_GetPowerDistributionSwitchableChannel(std::move(handle), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("handle"), release_gil(), py::doc(
    "Returns true if switchable channel is powered on.\n"
"\n"
"This is a REV PDH-specific function. This function will no-op on CTRE PDP.\n"
"\n"
":param in:  handle the module handle\n"
":param out: status Error status variable. 0 on success.\n"
"\n"
":returns: the state of the switchable channel")
  )
  
  ;
m
  .
def
("getPowerDistributionVersion", [](HAL_PowerDistributionHandle handle, HAL_PowerDistributionVersion* version) {
                    int32_t status;
          ::HAL_GetPowerDistributionVersion(std::move(handle), version, &status);
          return status;
        },
      py::arg("handle"), py::arg("version"), release_gil(), py::doc(
    "Get the version of the PowerDistribution.\n"
"\n"
":param in:  handle the module handle\n"
":param out: version the HAL_PowerDistributionVersion to populate\n"
":param out: status Error status variable. 0 on success.")
  )
  
  ;
m
  .
def
("getPowerDistributionFaults", [](HAL_PowerDistributionHandle handle, HAL_PowerDistributionFaults* faults) {
                    int32_t status;
          ::HAL_GetPowerDistributionFaults(std::move(handle), faults, &status);
          return status;
        },
      py::arg("handle"), py::arg("faults"), release_gil(), py::doc(
    "Get the current faults of the PowerDistribution.\n"
"\n"
"On a CTRE PDP, this will return an object with no faults active.\n"
"\n"
":param in:  handle the module handle\n"
":param out: faults the HAL_PowerDistributionFaults to populate\n"
":param out: status Error status variable. 0 on success.")
  )
  
  ;
m
  .
def
("getPowerDistributionStickyFaults", [](HAL_PowerDistributionHandle handle, HAL_PowerDistributionStickyFaults* stickyFaults) {
                    int32_t status;
          ::HAL_GetPowerDistributionStickyFaults(std::move(handle), stickyFaults, &status);
          return status;
        },
      py::arg("handle"), py::arg("stickyFaults"), release_gil(), py::doc(
    "Gets the sticky faults of the PowerDistribution.\n"
"\n"
"On a CTRE PDP, this will return an object with no faults active.\n"
"\n"
":param in:  handle the module handle\n"
":param out: stickyFaults the HAL_PowerDistributionStickyFaults to populate\n"
":param out: status Error status variable. 0 on success.")
  )
  
  ;
m

  #ifdef __FRC_ROBORIO__
  
  .
def
("startPowerDistributionStream", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          ::HAL_StartPowerDistributionStream(std::move(handle), &status);
          return status;
        },
      py::arg("handle"), release_gil()
  )
  
  #endif // __FRC_ROBORIO__
  
  ;
m

  #ifdef __FRC_ROBORIO__
  
  .
def
("getPowerDistributionStreamData", [](HAL_PowerDistributionHandle handle) {
                    int32_t count;
          int32_t status;
          auto __ret =::HAL_GetPowerDistributionStreamData(std::move(handle), &count, &status);
          return std::make_tuple(__ret,count,status);
        },
      py::arg("handle"), release_gil()
  )
  
  #endif // __FRC_ROBORIO__
  
  ;
m

  #ifdef __FRC_ROBORIO__
  
  .
def
("freePowerDistributionStreamData", &::HAL_FreePowerDistributionStreamData,
      py::arg("data"), py::arg("count"), release_gil()
  )
  
  #endif // __FRC_ROBORIO__
  
  ;
m

  #ifdef __FRC_ROBORIO__
  
  .
def
("stopPowerDistributionStream", [](HAL_PowerDistributionHandle handle) {
                    int32_t status;
          ::HAL_StopPowerDistributionStream(std::move(handle), &status);
          return status;
        },
      py::arg("handle"), release_gil()
  )
  
  #endif // __FRC_ROBORIO__
  
  ;



}

}; // struct rpybuild_PowerDistribution_initializer

static std::unique_ptr<rpybuild_PowerDistribution_initializer> cls;

void begin_init_PowerDistribution(py::module &m) {
  cls = std::make_unique<rpybuild_PowerDistribution_initializer>(m);
}

void finish_init_PowerDistribution() {
  cls->finish();
  cls.reset();
}