
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/DriverStationTypes.h>
















#include <type_traits>




struct rpybuild_DriverStationTypes_initializer {


  

  


  

  


  

  


  

  


  

  


  

  







  
  py::enum_<::HAL_AllianceStationID> enum1;

  
  py::enum_<::HAL_MatchType> enum2;






  py::class_<typename ::HAL_ControlWord> cls_HAL_ControlWord;

    

    
    
  py::class_<typename ::HAL_JoystickAxes> cls_HAL_JoystickAxes;

    

    
    
  py::class_<typename ::HAL_JoystickPOVs> cls_HAL_JoystickPOVs;

    

    
    
  py::class_<typename ::HAL_JoystickButtons> cls_HAL_JoystickButtons;

    

    
    
  py::class_<typename ::HAL_JoystickDescriptor> cls_HAL_JoystickDescriptor;

    

    
    
  py::class_<typename ::HAL_MatchInfo> cls_HAL_MatchInfo;

    

    
    

  py::module &m;

  
  rpybuild_DriverStationTypes_initializer(py::module &m) :

  

  
    enum1
  (m, "AllianceStationID"
  ),
  
    enum2
  (m, "MatchType"
  ),
  

  

  
    cls_HAL_ControlWord(m, "ControlWord"),

  

  
  
  
    cls_HAL_JoystickAxes(m, "JoystickAxes"),

  

  
  
  
    cls_HAL_JoystickPOVs(m, "JoystickPOVs"),

  

  
  
  
    cls_HAL_JoystickButtons(m, "JoystickButtons"),

  

  
  
  
    cls_HAL_JoystickDescriptor(m, "JoystickDescriptor"),

  

  
  
  
    cls_HAL_MatchInfo(m, "MatchInfo"),

  

  
  
  

    m(m)
  {
    
    
      enum1
  
    .value("kUnknown", ::HAL_AllianceStationID::HAL_AllianceStationID_kUnknown,
      "Unknown Alliance Station")
  
    .value("kRed1", ::HAL_AllianceStationID::HAL_AllianceStationID_kRed1,
      "Red Alliance Station 1")
  
    .value("kRed2", ::HAL_AllianceStationID::HAL_AllianceStationID_kRed2,
      "Red Alliance Station 2")
  
    .value("kRed3", ::HAL_AllianceStationID::HAL_AllianceStationID_kRed3,
      "Red Alliance Station 3")
  
    .value("kBlue1", ::HAL_AllianceStationID::HAL_AllianceStationID_kBlue1,
      "Blue Alliance Station 1")
  
    .value("kBlue2", ::HAL_AllianceStationID::HAL_AllianceStationID_kBlue2,
      "Blue Alliance Station 2")
  
    .value("kBlue3", ::HAL_AllianceStationID::HAL_AllianceStationID_kBlue3,
      "Blue Alliance Station 3")
  ;

    
      enum2
  
    .value("none", ::HAL_MatchType::HAL_kMatchType_none)
  
    .value("practice", ::HAL_MatchType::HAL_kMatchType_practice)
  
    .value("qualification", ::HAL_MatchType::HAL_kMatchType_qualification)
  
    .value("elimination", ::HAL_MatchType::HAL_kMatchType_elimination)
  ;

    

    
    
  

    
    
    
  

    
    
    
  

    
    
    
  

    
    
    
  

    
    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  

  cls_HAL_ControlWord
  
    .def(py::init<>(), release_gil())
  
    .def_property("enabled",  
        [](const ::HAL_ControlWord& inst) -> uint32_t { return inst.enabled; },
        [](::HAL_ControlWord& inst, uint32_t v) {inst.enabled = v; }
    )
  
    .def_property("autonomous",  
        [](const ::HAL_ControlWord& inst) -> uint32_t { return inst.autonomous; },
        [](::HAL_ControlWord& inst, uint32_t v) {inst.autonomous = v; }
    )
  
    .def_property("test",  
        [](const ::HAL_ControlWord& inst) -> uint32_t { return inst.test; },
        [](::HAL_ControlWord& inst, uint32_t v) {inst.test = v; }
    )
  
    .def_property("eStop",  
        [](const ::HAL_ControlWord& inst) -> uint32_t { return inst.eStop; },
        [](::HAL_ControlWord& inst, uint32_t v) {inst.eStop = v; }
    )
  
    .def_property("fmsAttached",  
        [](const ::HAL_ControlWord& inst) -> uint32_t { return inst.fmsAttached; },
        [](::HAL_ControlWord& inst, uint32_t v) {inst.fmsAttached = v; }
    )
  
    .def_property("dsAttached",  
        [](const ::HAL_ControlWord& inst) -> uint32_t { return inst.dsAttached; },
        [](::HAL_ControlWord& inst, uint32_t v) {inst.dsAttached = v; }
    )
  
    .def_property("control_reserved",  
        [](const ::HAL_ControlWord& inst) -> uint32_t { return inst.control_reserved; },
        [](::HAL_ControlWord& inst, uint32_t v) {inst.control_reserved = v; }
    )
  ;

  


  }

  {
  
  
  


  

  

  cls_HAL_JoystickAxes
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("count", &::HAL_JoystickAxes::count)
  
    .def_property_readonly("axes", [](::HAL_JoystickAxes& inst) {
        return py::memoryview::from_buffer(
          &inst.axes, sizeof(float),
          py::format_descriptor<float>::value,
          {12}, {sizeof(float)},
          false
        );
    })
  
    .def_property_readonly("raw", [](::HAL_JoystickAxes& inst) {
        return py::memoryview::from_buffer(
          &inst.raw, sizeof(uint8_t),
          py::format_descriptor<uint8_t>::value,
          {12}, {sizeof(uint8_t)},
          false
        );
    })
  ;

  


  }

  {
  
  
  


  

  

  cls_HAL_JoystickPOVs
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("count", &::HAL_JoystickPOVs::count)
  
    .def_property_readonly("povs", [](::HAL_JoystickPOVs& inst) {
        return py::memoryview::from_buffer(
          &inst.povs, sizeof(int16_t),
          py::format_descriptor<int16_t>::value,
          {12}, {sizeof(int16_t)},
          false
        );
    })
  ;

  


  }

  {
  
  
  


  

  

  cls_HAL_JoystickButtons
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("buttons", &::HAL_JoystickButtons::buttons)
  
    .def_readwrite("count", &::HAL_JoystickButtons::count)
  ;

  


  }

  {
  
  
  


  

  

  cls_HAL_JoystickDescriptor
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("isXbox", &::HAL_JoystickDescriptor::isXbox)
  
    .def_readwrite("type", &::HAL_JoystickDescriptor::type)
  
    .def_property_readonly("name", [](::HAL_JoystickDescriptor& inst) {
        return py::memoryview::from_buffer(
          &inst.name, sizeof(char),
          py::format_descriptor<char>::value,
          {256}, {sizeof(char)},
          false
        );
    })
  
    .def_readwrite("axisCount", &::HAL_JoystickDescriptor::axisCount)
  
    .def_property_readonly("axisTypes", [](::HAL_JoystickDescriptor& inst) {
        return py::memoryview::from_buffer(
          &inst.axisTypes, sizeof(uint8_t),
          py::format_descriptor<uint8_t>::value,
          {12}, {sizeof(uint8_t)},
          false
        );
    })
  
    .def_readwrite("buttonCount", &::HAL_JoystickDescriptor::buttonCount)
  
    .def_readwrite("povCount", &::HAL_JoystickDescriptor::povCount)
  ;

  


  }

  {
  
  
  


  

  

  cls_HAL_MatchInfo
  
    .def(py::init<>(), release_gil())
  
    .def_property_readonly("eventName", [](::HAL_MatchInfo& inst) {
        return py::memoryview::from_buffer(
          &inst.eventName, sizeof(char),
          py::format_descriptor<char>::value,
          {64}, {sizeof(char)},
          false
        );
    })
  
    .def_readwrite("matchType", &::HAL_MatchInfo::matchType)
  
    .def_readwrite("matchNumber", &::HAL_MatchInfo::matchNumber)
  
    .def_readwrite("replayNumber", &::HAL_MatchInfo::replayNumber)
  
    .def_property_readonly("gameSpecificMessage", [](::HAL_MatchInfo& inst) {
        return py::memoryview::from_buffer(
          &inst.gameSpecificMessage, sizeof(uint8_t),
          py::format_descriptor<uint8_t>::value,
          {64}, {sizeof(uint8_t)},
          false
        );
    })
  
    .def_readwrite("gameSpecificMessageSize", &::HAL_MatchInfo::gameSpecificMessageSize)
  ;

  


  }






}

}; // struct rpybuild_DriverStationTypes_initializer

static std::unique_ptr<rpybuild_DriverStationTypes_initializer> cls;

void begin_init_DriverStationTypes(py::module &m) {
  cls = std::make_unique<rpybuild_DriverStationTypes_initializer>(m);
}

void finish_init_DriverStationTypes() {
  cls->finish();
  cls.reset();
}