
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/Threads.h>
















#include <type_traits>






struct rpybuild_Threads_initializer {













  py::module &m;

  
  rpybuild_Threads_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("getCurrentThreadPriority", [](HAL_Bool* isRealTime) {
                    int32_t status;
          auto __ret =::HAL_GetCurrentThreadPriority(isRealTime, &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("isRealTime"), release_gil(), py::doc(
    "Gets the thread priority for the current thread.\n"
"\n"
":param out: isRealTime Set to true if thread is real-time, otherwise false.\n"
":param out: status     Error status variable. 0 on success.\n"
"\n"
":returns: The current thread priority. For real-time, this is 1-99 with 99\n"
"          being highest. For non-real-time, this is 0. See \"man 7 sched\" for\n"
"          details.")
  )
  
  ;
m
  .
def
("setCurrentThreadPriority", [](HAL_Bool realTime, int32_t priority) {
                    int32_t status;
          auto __ret =::HAL_SetCurrentThreadPriority(std::move(realTime), std::move(priority), &status);
          return std::make_tuple(__ret,status);
        },
      py::arg("realTime"), py::arg("priority"), release_gil(), py::doc(
    "Sets the thread priority for the current thread.\n"
"\n"
":param in:  realTime Set to true to set a real-time priority, false for\n"
"            standard priority.\n"
":param in:  priority Priority to set the thread to. For real-time, this is\n"
"            1-99 with 99 being highest. For non-real-time, this is\n"
"            forced to 0. See \"man 7 sched\" for more details.\n"
":param out: status  Error status variable. 0 on success.\n"
"\n"
":returns: True on success.")
  )
  
  ;



}

}; // struct rpybuild_Threads_initializer

static std::unique_ptr<rpybuild_Threads_initializer> cls;

void begin_init_Threads(py::module &m) {
  cls = std::make_unique<rpybuild_Threads_initializer>(m);
}

void finish_init_Threads() {
  cls->finish();
  cls.reset();
}