
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/AnalogInData.h>
















#include <type_traits>






struct rpybuild_AnalogInData_initializer {













  py::module &m;

  
  rpybuild_AnalogInData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("resetAnalogInData", &::HALSIM_ResetAnalogInData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelAnalogInInitializedCallback", &::HALSIM_CancelAnalogInInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInInitialized", &::HALSIM_GetAnalogInInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAnalogInInitialized", &::HALSIM_SetAnalogInInitialized,
      py::arg("index"), py::arg("initialized"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInSimDevice", &::HALSIM_GetAnalogInSimDevice,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelAnalogInAverageBitsCallback", &::HALSIM_CancelAnalogInAverageBitsCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInAverageBits", &::HALSIM_GetAnalogInAverageBits,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAnalogInAverageBits", &::HALSIM_SetAnalogInAverageBits,
      py::arg("index"), py::arg("averageBits"), release_gil()
  )
  
  ;
m
  .
def
("cancelAnalogInOversampleBitsCallback", &::HALSIM_CancelAnalogInOversampleBitsCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInOversampleBits", &::HALSIM_GetAnalogInOversampleBits,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAnalogInOversampleBits", &::HALSIM_SetAnalogInOversampleBits,
      py::arg("index"), py::arg("oversampleBits"), release_gil()
  )
  
  ;
m
  .
def
("cancelAnalogInVoltageCallback", &::HALSIM_CancelAnalogInVoltageCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInVoltage", &::HALSIM_GetAnalogInVoltage,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAnalogInVoltage", &::HALSIM_SetAnalogInVoltage,
      py::arg("index"), py::arg("voltage"), release_gil()
  )
  
  ;
m
  .
def
("cancelAnalogInAccumulatorInitializedCallback", &::HALSIM_CancelAnalogInAccumulatorInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInAccumulatorInitialized", &::HALSIM_GetAnalogInAccumulatorInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAnalogInAccumulatorInitialized", &::HALSIM_SetAnalogInAccumulatorInitialized,
      py::arg("index"), py::arg("accumulatorInitialized"), release_gil()
  )
  
  ;
m
  .
def
("cancelAnalogInAccumulatorValueCallback", &::HALSIM_CancelAnalogInAccumulatorValueCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInAccumulatorValue", &::HALSIM_GetAnalogInAccumulatorValue,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAnalogInAccumulatorValue", &::HALSIM_SetAnalogInAccumulatorValue,
      py::arg("index"), py::arg("accumulatorValue"), release_gil()
  )
  
  ;
m
  .
def
("cancelAnalogInAccumulatorCountCallback", &::HALSIM_CancelAnalogInAccumulatorCountCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInAccumulatorCount", &::HALSIM_GetAnalogInAccumulatorCount,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAnalogInAccumulatorCount", &::HALSIM_SetAnalogInAccumulatorCount,
      py::arg("index"), py::arg("accumulatorCount"), release_gil()
  )
  
  ;
m
  .
def
("cancelAnalogInAccumulatorCenterCallback", &::HALSIM_CancelAnalogInAccumulatorCenterCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInAccumulatorCenter", &::HALSIM_GetAnalogInAccumulatorCenter,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAnalogInAccumulatorCenter", &::HALSIM_SetAnalogInAccumulatorCenter,
      py::arg("index"), py::arg("accumulatorCenter"), release_gil()
  )
  
  ;
m
  .
def
("cancelAnalogInAccumulatorDeadbandCallback", &::HALSIM_CancelAnalogInAccumulatorDeadbandCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAnalogInAccumulatorDeadband", &::HALSIM_GetAnalogInAccumulatorDeadband,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAnalogInAccumulatorDeadband", &::HALSIM_SetAnalogInAccumulatorDeadband,
      py::arg("index"), py::arg("accumulatorDeadband"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_AnalogInData_initializer

static std::unique_ptr<rpybuild_AnalogInData_initializer> cls;

void begin_init_AnalogInData(py::module &m) {
  cls = std::make_unique<rpybuild_AnalogInData_initializer>(m);
}

void finish_init_AnalogInData() {
  cls->finish();
  cls.reset();
}