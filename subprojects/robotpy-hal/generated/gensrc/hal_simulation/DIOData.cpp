
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/DIOData.h>
















#include <type_traits>




struct rpybuild_DIOData_initializer {













  py::module &m;

  
  rpybuild_DIOData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("resetDIOData", &::HALSIM_ResetDIOData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelDIOInitializedCallback", &::HALSIM_CancelDIOInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDIOInitialized", &::HALSIM_GetDIOInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setDIOInitialized", &::HALSIM_SetDIOInitialized,
      py::arg("index"), py::arg("initialized"), release_gil()
  )
  
  ;
m
  .
def
("getDIOSimDevice", &::HALSIM_GetDIOSimDevice,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelDIOValueCallback", &::HALSIM_CancelDIOValueCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDIOValue", &::HALSIM_GetDIOValue,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setDIOValue", &::HALSIM_SetDIOValue,
      py::arg("index"), py::arg("value"), release_gil()
  )
  
  ;
m
  .
def
("cancelDIOPulseLengthCallback", &::HALSIM_CancelDIOPulseLengthCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDIOPulseLength", &::HALSIM_GetDIOPulseLength,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setDIOPulseLength", &::HALSIM_SetDIOPulseLength,
      py::arg("index"), py::arg("pulseLength"), release_gil()
  )
  
  ;
m
  .
def
("cancelDIOIsInputCallback", &::HALSIM_CancelDIOIsInputCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDIOIsInput", &::HALSIM_GetDIOIsInput,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setDIOIsInput", &::HALSIM_SetDIOIsInput,
      py::arg("index"), py::arg("isInput"), release_gil()
  )
  
  ;
m
  .
def
("cancelDIOFilterIndexCallback", &::HALSIM_CancelDIOFilterIndexCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDIOFilterIndex", &::HALSIM_GetDIOFilterIndex,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setDIOFilterIndex", &::HALSIM_SetDIOFilterIndex,
      py::arg("index"), py::arg("filterIndex"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_DIOData_initializer

static std::unique_ptr<rpybuild_DIOData_initializer> cls;

void begin_init_DIOData(py::module &m) {
  cls = std::make_unique<rpybuild_DIOData_initializer>(m);
}

void finish_init_DIOData() {
  cls->finish();
  cls.reset();
}