
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/AddressableLEDData.h>
















#include <type_traits>






struct rpybuild_AddressableLEDData_initializer {













  py::module &m;

  
  rpybuild_AddressableLEDData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("findAddressableLEDForChannel", &::HALSIM_FindAddressableLEDForChannel,
      py::arg("channel"), release_gil()
  )
  
  ;
m
  .
def
("resetAddressableLEDData", &::HALSIM_ResetAddressableLEDData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelAddressableLEDInitializedCallback", &::HALSIM_CancelAddressableLEDInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAddressableLEDInitialized", &::HALSIM_GetAddressableLEDInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAddressableLEDInitialized", &::HALSIM_SetAddressableLEDInitialized,
      py::arg("index"), py::arg("initialized"), release_gil()
  )
  
  ;
m
  .
def
("cancelAddressableLEDOutputPortCallback", &::HALSIM_CancelAddressableLEDOutputPortCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAddressableLEDOutputPort", &::HALSIM_GetAddressableLEDOutputPort,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAddressableLEDOutputPort", &::HALSIM_SetAddressableLEDOutputPort,
      py::arg("index"), py::arg("outputPort"), release_gil()
  )
  
  ;
m
  .
def
("cancelAddressableLEDLengthCallback", &::HALSIM_CancelAddressableLEDLengthCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAddressableLEDLength", &::HALSIM_GetAddressableLEDLength,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAddressableLEDLength", &::HALSIM_SetAddressableLEDLength,
      py::arg("index"), py::arg("length"), release_gil()
  )
  
  ;
m
  .
def
("cancelAddressableLEDRunningCallback", &::HALSIM_CancelAddressableLEDRunningCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAddressableLEDRunning", &::HALSIM_GetAddressableLEDRunning,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAddressableLEDRunning", &::HALSIM_SetAddressableLEDRunning,
      py::arg("index"), py::arg("running"), release_gil()
  )
  
  ;
m
  .
def
("cancelAddressableLEDDataCallback", &::HALSIM_CancelAddressableLEDDataCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAddressableLEDData", &::HALSIM_GetAddressableLEDData,
      py::arg("index"), py::arg("data"), release_gil()
  )
  
  ;
m
  .
def
("setAddressableLEDData", &::HALSIM_SetAddressableLEDData,
      py::arg("index"), py::arg("data"), py::arg("length"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_AddressableLEDData_initializer

static std::unique_ptr<rpybuild_AddressableLEDData_initializer> cls;

void begin_init_AddressableLEDData(py::module &m) {
  cls = std::make_unique<rpybuild_AddressableLEDData_initializer>(m);
}

void finish_init_AddressableLEDData() {
  cls->finish();
  cls.reset();
}