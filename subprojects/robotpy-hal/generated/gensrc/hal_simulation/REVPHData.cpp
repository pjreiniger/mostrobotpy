
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/REVPHData.h>
















#include <type_traits>




struct rpybuild_REVPHData_initializer {













  py::module &m;

  
  rpybuild_REVPHData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("resetREVPHData", &::HALSIM_ResetREVPHData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelREVPHInitializedCallback", &::HALSIM_CancelREVPHInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getREVPHInitialized", &::HALSIM_GetREVPHInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setREVPHInitialized", &::HALSIM_SetREVPHInitialized,
      py::arg("index"), py::arg("solenoidInitialized"), release_gil()
  )
  
  ;
m
  .
def
("cancelREVPHSolenoidOutputCallback", &::HALSIM_CancelREVPHSolenoidOutputCallback,
      py::arg("index"), py::arg("channel"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getREVPHSolenoidOutput", &::HALSIM_GetREVPHSolenoidOutput,
      py::arg("index"), py::arg("channel"), release_gil()
  )
  
  ;
m
  .
def
("setREVPHSolenoidOutput", &::HALSIM_SetREVPHSolenoidOutput,
      py::arg("index"), py::arg("channel"), py::arg("solenoidOutput"), release_gil()
  )
  
  ;
m
  .
def
("cancelREVPHCompressorOnCallback", &::HALSIM_CancelREVPHCompressorOnCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getREVPHCompressorOn", &::HALSIM_GetREVPHCompressorOn,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setREVPHCompressorOn", &::HALSIM_SetREVPHCompressorOn,
      py::arg("index"), py::arg("compressorOn"), release_gil()
  )
  
  ;
m
  .
def
("cancelREVPHCompressorConfigTypeCallback", &::HALSIM_CancelREVPHCompressorConfigTypeCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getREVPHCompressorConfigType", &::HALSIM_GetREVPHCompressorConfigType,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setREVPHCompressorConfigType", &::HALSIM_SetREVPHCompressorConfigType,
      py::arg("index"), py::arg("configType"), release_gil()
  )
  
  ;
m
  .
def
("cancelREVPHPressureSwitchCallback", &::HALSIM_CancelREVPHPressureSwitchCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getREVPHPressureSwitch", &::HALSIM_GetREVPHPressureSwitch,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setREVPHPressureSwitch", &::HALSIM_SetREVPHPressureSwitch,
      py::arg("index"), py::arg("pressureSwitch"), release_gil()
  )
  
  ;
m
  .
def
("cancelREVPHCompressorCurrentCallback", &::HALSIM_CancelREVPHCompressorCurrentCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getREVPHCompressorCurrent", &::HALSIM_GetREVPHCompressorCurrent,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setREVPHCompressorCurrent", &::HALSIM_SetREVPHCompressorCurrent,
      py::arg("index"), py::arg("compressorCurrent"), release_gil()
  )
  
  ;
m
  .
def
("getREVPHAllSolenoids", [](int32_t index) {
                    uint8_t values;
          ::HALSIM_GetREVPHAllSolenoids(std::move(index), &values);
          return values;
        },
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setREVPHAllSolenoids", &::HALSIM_SetREVPHAllSolenoids,
      py::arg("index"), py::arg("values"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_REVPHData_initializer

static std::unique_ptr<rpybuild_REVPHData_initializer> cls;

void begin_init_REVPHData(py::module &m) {
  cls = std::make_unique<rpybuild_REVPHData_initializer>(m);
}

void finish_init_REVPHData() {
  cls->finish();
  cls.reset();
}