
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/SPIAccelerometerData.h>
















#include <type_traits>






struct rpybuild_SPIAccelerometerData_initializer {













  py::module &m;

  
  rpybuild_SPIAccelerometerData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("resetSPIAccelerometerData", &::HALSIM_ResetSPIAccelerometerData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelSPIAccelerometerActiveCallback", &::HALSIM_CancelSPIAccelerometerActiveCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getSPIAccelerometerActive", &::HALSIM_GetSPIAccelerometerActive,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setSPIAccelerometerActive", &::HALSIM_SetSPIAccelerometerActive,
      py::arg("index"), py::arg("active"), release_gil()
  )
  
  ;
m
  .
def
("cancelSPIAccelerometerRangeCallback", &::HALSIM_CancelSPIAccelerometerRangeCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getSPIAccelerometerRange", &::HALSIM_GetSPIAccelerometerRange,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setSPIAccelerometerRange", &::HALSIM_SetSPIAccelerometerRange,
      py::arg("index"), py::arg("range"), release_gil()
  )
  
  ;
m
  .
def
("cancelSPIAccelerometerXCallback", &::HALSIM_CancelSPIAccelerometerXCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getSPIAccelerometerX", &::HALSIM_GetSPIAccelerometerX,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setSPIAccelerometerX", &::HALSIM_SetSPIAccelerometerX,
      py::arg("index"), py::arg("x"), release_gil()
  )
  
  ;
m
  .
def
("cancelSPIAccelerometerYCallback", &::HALSIM_CancelSPIAccelerometerYCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getSPIAccelerometerY", &::HALSIM_GetSPIAccelerometerY,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setSPIAccelerometerY", &::HALSIM_SetSPIAccelerometerY,
      py::arg("index"), py::arg("y"), release_gil()
  )
  
  ;
m
  .
def
("cancelSPIAccelerometerZCallback", &::HALSIM_CancelSPIAccelerometerZCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getSPIAccelerometerZ", &::HALSIM_GetSPIAccelerometerZ,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setSPIAccelerometerZ", &::HALSIM_SetSPIAccelerometerZ,
      py::arg("index"), py::arg("z"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_SPIAccelerometerData_initializer

static std::unique_ptr<rpybuild_SPIAccelerometerData_initializer> cls;

void begin_init_SPIAccelerometerData(py::module &m) {
  cls = std::make_unique<rpybuild_SPIAccelerometerData_initializer>(m);
}

void finish_init_SPIAccelerometerData() {
  cls->finish();
  cls.reset();
}