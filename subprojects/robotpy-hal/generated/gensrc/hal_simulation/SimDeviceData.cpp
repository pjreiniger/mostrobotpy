
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/SimDeviceData.h>














#include <sim_value_cb.h>

#include <pybind11/functional.h>



#include <type_traits>




struct rpybuild_SimDeviceData_initializer {













  py::module &m;

  
  rpybuild_SimDeviceData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("setSimDeviceEnabled", &::HALSIM_SetSimDeviceEnabled,
      py::arg("prefix"), py::arg("enabled"), release_gil()
  )
  
  ;
m
  .
def
("isSimDeviceEnabled", &::HALSIM_IsSimDeviceEnabled,
      py::arg("name"), release_gil()
  )
  
  ;
m
  .
def
("getSimDeviceHandle", &::HALSIM_GetSimDeviceHandle,
      py::arg("name"), release_gil()
  )
  
  ;
m
  .
def
("getSimDeviceName", &::HALSIM_GetSimDeviceName,
      py::arg("handle"), release_gil()
  )
  
  ;
m
  .
def
("getSimValueDeviceHandle", &::HALSIM_GetSimValueDeviceHandle,
      py::arg("handle"), release_gil()
  )
  
  ;
m
  .
def
("registerSimValueCreatedCallback", [](hal::SimDevice &simdevice, std::function<void(const char *, HAL_SimValueHandle, HAL_SimValueDirection, HAL_Value)> fn, bool initialNotify) -> std::unique_ptr<SimValueCB> {
  auto cb = std::make_unique<SimValueCB>(fn, HALSIM_CancelSimDeviceCreatedCallback);
  auto uid = HALSIM_RegisterSimValueCreatedCallback(simdevice, cb.get(),
    [](const char* name, void* param,
       HAL_SimValueHandle handle,
       int32_t direction,
       const struct HAL_Value* value) {
    ((SimValueCB*)param)->m_fn(name, handle, (HAL_SimValueDirection)direction, *value);
  }, initialNotify);
  cb->SetUID(uid);
  return std::move(cb);
}
,
      py::arg("device"), py::arg("callback"), py::arg("initialNotify")
  )
  
  ;
m
  .
def
("registerSimValueChangedCallback", [](hal::SimValue &simvalue, std::function<void(const char *, HAL_SimValueHandle, HAL_SimValueDirection, HAL_Value)> fn, bool initialNotify) -> std::unique_ptr<SimValueCB> {
  auto cb = std::make_unique<SimValueCB>(fn, HALSIM_CancelSimValueChangedCallback);
  auto uid = HALSIM_RegisterSimValueChangedCallback(simvalue, cb.get(),
    [](const char* name, void* param,
       HAL_SimValueHandle handle,
       int32_t direction,
       const struct HAL_Value* value) {
    ((SimValueCB*)param)->m_fn(name, handle, (HAL_SimValueDirection)direction, *value);
  }, initialNotify);
  cb->SetUID(uid);
  return std::move(cb);
}
,
      py::arg("value"), py::arg("callback"), py::arg("initialNotify")
  )
  
  ;
m
  .
def
("registerSimValueResetCallback", [](hal::SimValue &simvalue, std::function<void(const char *, HAL_SimValueHandle, HAL_SimValueDirection, HAL_Value)> fn, bool initialNotify) -> std::unique_ptr<SimValueCB> {
  auto cb = std::make_unique<SimValueCB>(fn, HALSIM_CancelSimValueResetCallback);
  auto uid = HALSIM_RegisterSimValueChangedCallback(simvalue, cb.get(),
    [](const char* name, void* param,
       HAL_SimValueHandle handle,
       int32_t direction,
       const struct HAL_Value* value) {
    ((SimValueCB*)param)->m_fn(name, handle, (HAL_SimValueDirection)direction, *value);
  }, initialNotify);
  cb->SetUID(uid);
  return std::move(cb);
}
,
      py::arg("value"), py::arg("callback"), py::arg("initialNotify"), py::doc(
    "Register a callback for HAL_SimValueReset(). The callback is called with the\n"
"old value.\n"
"\n"
":param value:         simulated value handle\n"
":param param:         parameter for callback\n"
":param callback:      callback\n"
":param initialNotify: ignored (present for consistency)")
  )
  
  ;
m
  .
def
("getSimValueHandle", &::HALSIM_GetSimValueHandle,
      py::arg("device"), py::arg("name"), release_gil()
  )
  
  ;
m
  .
def
("resetSimDeviceData", &::HALSIM_ResetSimDeviceData, release_gil()
  )
  
  ;



}

}; // struct rpybuild_SimDeviceData_initializer

static std::unique_ptr<rpybuild_SimDeviceData_initializer> cls;

void begin_init_SimDeviceData(py::module &m) {
  cls = std::make_unique<rpybuild_SimDeviceData_initializer>(m);
}

void finish_init_SimDeviceData() {
  cls->finish();
  cls.reset();
}