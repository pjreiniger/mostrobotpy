
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/PWMData.h>
















#include <type_traits>




struct rpybuild_PWMData_initializer {













  py::module &m;

  
  rpybuild_PWMData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("resetPWMData", &::HALSIM_ResetPWMData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelPWMInitializedCallback", &::HALSIM_CancelPWMInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getPWMInitialized", &::HALSIM_GetPWMInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setPWMInitialized", &::HALSIM_SetPWMInitialized,
      py::arg("index"), py::arg("initialized"), release_gil()
  )
  
  ;
m
  .
def
("getPWMPulseMicrosecond", &::HALSIM_GetPWMPulseMicrosecond,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setPWMPulseMicrosecond", &::HALSIM_SetPWMPulseMicrosecond,
      py::arg("index"), py::arg("microsecondPulseTime"), release_gil()
  )
  
  ;
m
  .
def
("cancelPWMSpeedCallback", &::HALSIM_CancelPWMSpeedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getPWMSpeed", &::HALSIM_GetPWMSpeed,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setPWMSpeed", &::HALSIM_SetPWMSpeed,
      py::arg("index"), py::arg("speed"), release_gil()
  )
  
  ;
m
  .
def
("cancelPWMPositionCallback", &::HALSIM_CancelPWMPositionCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getPWMPosition", &::HALSIM_GetPWMPosition,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setPWMPosition", &::HALSIM_SetPWMPosition,
      py::arg("index"), py::arg("position"), release_gil()
  )
  
  ;
m
  .
def
("cancelPWMPeriodScaleCallback", &::HALSIM_CancelPWMPeriodScaleCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getPWMPeriodScale", &::HALSIM_GetPWMPeriodScale,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setPWMPeriodScale", &::HALSIM_SetPWMPeriodScale,
      py::arg("index"), py::arg("periodScale"), release_gil()
  )
  
  ;
m
  .
def
("cancelPWMZeroLatchCallback", &::HALSIM_CancelPWMZeroLatchCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getPWMZeroLatch", &::HALSIM_GetPWMZeroLatch,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setPWMZeroLatch", &::HALSIM_SetPWMZeroLatch,
      py::arg("index"), py::arg("zeroLatch"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_PWMData_initializer

static std::unique_ptr<rpybuild_PWMData_initializer> cls;

void begin_init_PWMData(py::module &m) {
  cls = std::make_unique<rpybuild_PWMData_initializer>(m);
}

void finish_init_PWMData() {
  cls->finish();
  cls.reset();
}