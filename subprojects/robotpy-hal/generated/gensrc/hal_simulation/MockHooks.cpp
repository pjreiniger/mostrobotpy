
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/MockHooks.h>














#include <sim_cb.h>

#include <pybind11/functional.h>



#include <type_traits>






struct rpybuild_MockHooks_initializer {













  py::module &m;

  
  rpybuild_MockHooks_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("setRuntimeType", &::HALSIM_SetRuntimeType,
      py::arg("type"), release_gil()
  )
  
  ;
m
  .
def
("waitForProgramStart", &::HALSIM_WaitForProgramStart, release_gil()
  )
  
  ;
m
  .
def
("setProgramStarted", &::HALSIM_SetProgramStarted, release_gil()
  )
  
  ;
m
  .
def
("getProgramStarted", &::HALSIM_GetProgramStarted, release_gil()
  )
  
  ;
m
  .
def
("restartTiming", &::HALSIM_RestartTiming, release_gil()
  )
  
  ;
m
  .
def
("pauseTiming", &::HALSIM_PauseTiming, release_gil()
  )
  
  ;
m
  .
def
("resumeTiming", &::HALSIM_ResumeTiming, release_gil()
  )
  
  ;
m
  .
def
("isTimingPaused", &::HALSIM_IsTimingPaused, release_gil()
  )
  
  ;
m
  .
def
("stepTiming", &::HALSIM_StepTiming,
      py::arg("delta"), release_gil()
  )
  
  ;
m
  .
def
("stepTimingAsync", &::HALSIM_StepTimingAsync,
      py::arg("delta"), release_gil()
  )
  
  ;
m
  .
def
("registerSimPeriodicBeforeCallback", [](std::function<void(void)> fn) -> std::unique_ptr<SimCB> {
  auto cb = std::make_unique<SimCB>(fn, HALSIM_CancelSimPeriodicBeforeCallback);
  auto uid = HALSIM_RegisterSimPeriodicBeforeCallback([](void *param) {
    ((SimCB*)param)->m_fn();
  }, cb.get());
  cb->SetUID(uid);
  return std::move(cb);
}
,
      py::arg("callback")
  )
  
  ;
m
  .
def
("registerSimPeriodicAfterCallback", [](std::function<void(void)> fn) -> std::unique_ptr<SimCB> {
  auto cb = std::make_unique<SimCB>(fn, HALSIM_CancelSimPeriodicAfterCallback);
  auto uid = HALSIM_RegisterSimPeriodicAfterCallback([](void *param) {
    ((SimCB*)param)->m_fn();
  }, cb.get());
  cb->SetUID(uid);
  return std::move(cb);
}
,
      py::arg("callback")
  )
  
  ;
m
  .
def
("cancelAllSimPeriodicCallbacks", &::HALSIM_CancelAllSimPeriodicCallbacks, release_gil()
  )
  
  ;



}

}; // struct rpybuild_MockHooks_initializer

static std::unique_ptr<rpybuild_MockHooks_initializer> cls;

void begin_init_MockHooks(py::module &m) {
  cls = std::make_unique<rpybuild_MockHooks_initializer>(m);
}

void finish_init_MockHooks() {
  cls->finish();
  cls.reset();
}