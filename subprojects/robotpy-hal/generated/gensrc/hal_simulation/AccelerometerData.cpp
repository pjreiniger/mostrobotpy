
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/AccelerometerData.h>
















#include <type_traits>






struct rpybuild_AccelerometerData_initializer {













  py::module &m;

  
  rpybuild_AccelerometerData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("resetAccelerometerData", &::HALSIM_ResetAccelerometerData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelAccelerometerActiveCallback", &::HALSIM_CancelAccelerometerActiveCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAccelerometerActive", &::HALSIM_GetAccelerometerActive,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAccelerometerActive", &::HALSIM_SetAccelerometerActive,
      py::arg("index"), py::arg("active"), release_gil()
  )
  
  ;
m
  .
def
("cancelAccelerometerRangeCallback", &::HALSIM_CancelAccelerometerRangeCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAccelerometerRange", &::HALSIM_GetAccelerometerRange,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAccelerometerRange", &::HALSIM_SetAccelerometerRange,
      py::arg("index"), py::arg("range"), release_gil()
  )
  
  ;
m
  .
def
("cancelAccelerometerXCallback", &::HALSIM_CancelAccelerometerXCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAccelerometerX", &::HALSIM_GetAccelerometerX,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAccelerometerX", &::HALSIM_SetAccelerometerX,
      py::arg("index"), py::arg("x"), release_gil()
  )
  
  ;
m
  .
def
("cancelAccelerometerYCallback", &::HALSIM_CancelAccelerometerYCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAccelerometerY", &::HALSIM_GetAccelerometerY,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAccelerometerY", &::HALSIM_SetAccelerometerY,
      py::arg("index"), py::arg("y"), release_gil()
  )
  
  ;
m
  .
def
("cancelAccelerometerZCallback", &::HALSIM_CancelAccelerometerZCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getAccelerometerZ", &::HALSIM_GetAccelerometerZ,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setAccelerometerZ", &::HALSIM_SetAccelerometerZ,
      py::arg("index"), py::arg("z"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_AccelerometerData_initializer

static std::unique_ptr<rpybuild_AccelerometerData_initializer> cls;

void begin_init_AccelerometerData(py::module &m) {
  cls = std::make_unique<rpybuild_AccelerometerData_initializer>(m);
}

void finish_init_AccelerometerData() {
  cls->finish();
  cls.reset();
}