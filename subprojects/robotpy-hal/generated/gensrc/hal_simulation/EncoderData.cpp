
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/EncoderData.h>
















#include <type_traits>




struct rpybuild_EncoderData_initializer {













  py::module &m;

  
  rpybuild_EncoderData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("findEncoderForChannel", &::HALSIM_FindEncoderForChannel,
      py::arg("channel"), release_gil()
  )
  
  ;
m
  .
def
("resetEncoderData", &::HALSIM_ResetEncoderData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderDigitalChannelA", &::HALSIM_GetEncoderDigitalChannelA,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderDigitalChannelB", &::HALSIM_GetEncoderDigitalChannelB,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelEncoderInitializedCallback", &::HALSIM_CancelEncoderInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderInitialized", &::HALSIM_GetEncoderInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderInitialized", &::HALSIM_SetEncoderInitialized,
      py::arg("index"), py::arg("initialized"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderSimDevice", &::HALSIM_GetEncoderSimDevice,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelEncoderCountCallback", &::HALSIM_CancelEncoderCountCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderCount", &::HALSIM_GetEncoderCount,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderCount", &::HALSIM_SetEncoderCount,
      py::arg("index"), py::arg("count"), release_gil()
  )
  
  ;
m
  .
def
("cancelEncoderPeriodCallback", &::HALSIM_CancelEncoderPeriodCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderPeriod", &::HALSIM_GetEncoderPeriod,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderPeriod", &::HALSIM_SetEncoderPeriod,
      py::arg("index"), py::arg("period"), release_gil()
  )
  
  ;
m
  .
def
("cancelEncoderResetCallback", &::HALSIM_CancelEncoderResetCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderReset", &::HALSIM_GetEncoderReset,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderReset", &::HALSIM_SetEncoderReset,
      py::arg("index"), py::arg("reset"), release_gil()
  )
  
  ;
m
  .
def
("cancelEncoderMaxPeriodCallback", &::HALSIM_CancelEncoderMaxPeriodCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderMaxPeriod", &::HALSIM_GetEncoderMaxPeriod,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderMaxPeriod", &::HALSIM_SetEncoderMaxPeriod,
      py::arg("index"), py::arg("maxPeriod"), release_gil()
  )
  
  ;
m
  .
def
("cancelEncoderDirectionCallback", &::HALSIM_CancelEncoderDirectionCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderDirection", &::HALSIM_GetEncoderDirection,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderDirection", &::HALSIM_SetEncoderDirection,
      py::arg("index"), py::arg("direction"), release_gil()
  )
  
  ;
m
  .
def
("cancelEncoderReverseDirectionCallback", &::HALSIM_CancelEncoderReverseDirectionCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderReverseDirection", &::HALSIM_GetEncoderReverseDirection,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderReverseDirection", &::HALSIM_SetEncoderReverseDirection,
      py::arg("index"), py::arg("reverseDirection"), release_gil()
  )
  
  ;
m
  .
def
("cancelEncoderSamplesToAverageCallback", &::HALSIM_CancelEncoderSamplesToAverageCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderSamplesToAverage", &::HALSIM_GetEncoderSamplesToAverage,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderSamplesToAverage", &::HALSIM_SetEncoderSamplesToAverage,
      py::arg("index"), py::arg("samplesToAverage"), release_gil()
  )
  
  ;
m
  .
def
("cancelEncoderDistancePerPulseCallback", &::HALSIM_CancelEncoderDistancePerPulseCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderDistancePerPulse", &::HALSIM_GetEncoderDistancePerPulse,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderDistancePerPulse", &::HALSIM_SetEncoderDistancePerPulse,
      py::arg("index"), py::arg("distancePerPulse"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderDistance", &::HALSIM_SetEncoderDistance,
      py::arg("index"), py::arg("distance"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderDistance", &::HALSIM_GetEncoderDistance,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setEncoderRate", &::HALSIM_SetEncoderRate,
      py::arg("index"), py::arg("rate"), release_gil()
  )
  
  ;
m
  .
def
("getEncoderRate", &::HALSIM_GetEncoderRate,
      py::arg("index"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_EncoderData_initializer

static std::unique_ptr<rpybuild_EncoderData_initializer> cls;

void begin_init_EncoderData(py::module &m) {
  cls = std::make_unique<rpybuild_EncoderData_initializer>(m);
}

void finish_init_EncoderData() {
  cls->finish();
  cls.reset();
}