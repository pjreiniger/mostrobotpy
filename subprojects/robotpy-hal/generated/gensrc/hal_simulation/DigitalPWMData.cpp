
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/DigitalPWMData.h>
















#include <type_traits>






struct rpybuild_DigitalPWMData_initializer {













  py::module &m;

  
  rpybuild_DigitalPWMData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("findDigitalPWMForChannel", &::HALSIM_FindDigitalPWMForChannel,
      py::arg("channel"), release_gil()
  )
  
  ;
m
  .
def
("resetDigitalPWMData", &::HALSIM_ResetDigitalPWMData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelDigitalPWMInitializedCallback", &::HALSIM_CancelDigitalPWMInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDigitalPWMInitialized", &::HALSIM_GetDigitalPWMInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setDigitalPWMInitialized", &::HALSIM_SetDigitalPWMInitialized,
      py::arg("index"), py::arg("initialized"), release_gil()
  )
  
  ;
m
  .
def
("cancelDigitalPWMDutyCycleCallback", &::HALSIM_CancelDigitalPWMDutyCycleCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDigitalPWMDutyCycle", &::HALSIM_GetDigitalPWMDutyCycle,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setDigitalPWMDutyCycle", &::HALSIM_SetDigitalPWMDutyCycle,
      py::arg("index"), py::arg("dutyCycle"), release_gil()
  )
  
  ;
m
  .
def
("cancelDigitalPWMPinCallback", &::HALSIM_CancelDigitalPWMPinCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDigitalPWMPin", &::HALSIM_GetDigitalPWMPin,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setDigitalPWMPin", &::HALSIM_SetDigitalPWMPin,
      py::arg("index"), py::arg("pin"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_DigitalPWMData_initializer

static std::unique_ptr<rpybuild_DigitalPWMData_initializer> cls;

void begin_init_DigitalPWMData(py::module &m) {
  cls = std::make_unique<rpybuild_DigitalPWMData_initializer>(m);
}

void finish_init_DigitalPWMData() {
  cls->finish();
  cls.reset();
}