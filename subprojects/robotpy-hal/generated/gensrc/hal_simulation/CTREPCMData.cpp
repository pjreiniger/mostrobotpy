
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/CTREPCMData.h>
















#include <type_traits>




struct rpybuild_CTREPCMData_initializer {













  py::module &m;

  
  rpybuild_CTREPCMData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("resetCTREPCMData", &::HALSIM_ResetCTREPCMData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelCTREPCMInitializedCallback", &::HALSIM_CancelCTREPCMInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getCTREPCMInitialized", &::HALSIM_GetCTREPCMInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setCTREPCMInitialized", &::HALSIM_SetCTREPCMInitialized,
      py::arg("index"), py::arg("solenoidInitialized"), release_gil()
  )
  
  ;
m
  .
def
("cancelCTREPCMSolenoidOutputCallback", &::HALSIM_CancelCTREPCMSolenoidOutputCallback,
      py::arg("index"), py::arg("channel"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getCTREPCMSolenoidOutput", &::HALSIM_GetCTREPCMSolenoidOutput,
      py::arg("index"), py::arg("channel"), release_gil()
  )
  
  ;
m
  .
def
("setCTREPCMSolenoidOutput", &::HALSIM_SetCTREPCMSolenoidOutput,
      py::arg("index"), py::arg("channel"), py::arg("solenoidOutput"), release_gil()
  )
  
  ;
m
  .
def
("cancelCTREPCMCompressorOnCallback", &::HALSIM_CancelCTREPCMCompressorOnCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getCTREPCMCompressorOn", &::HALSIM_GetCTREPCMCompressorOn,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setCTREPCMCompressorOn", &::HALSIM_SetCTREPCMCompressorOn,
      py::arg("index"), py::arg("compressorOn"), release_gil()
  )
  
  ;
m
  .
def
("cancelCTREPCMClosedLoopEnabledCallback", &::HALSIM_CancelCTREPCMClosedLoopEnabledCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getCTREPCMClosedLoopEnabled", &::HALSIM_GetCTREPCMClosedLoopEnabled,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setCTREPCMClosedLoopEnabled", &::HALSIM_SetCTREPCMClosedLoopEnabled,
      py::arg("index"), py::arg("closedLoopEnabled"), release_gil()
  )
  
  ;
m
  .
def
("cancelCTREPCMPressureSwitchCallback", &::HALSIM_CancelCTREPCMPressureSwitchCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getCTREPCMPressureSwitch", &::HALSIM_GetCTREPCMPressureSwitch,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setCTREPCMPressureSwitch", &::HALSIM_SetCTREPCMPressureSwitch,
      py::arg("index"), py::arg("pressureSwitch"), release_gil()
  )
  
  ;
m
  .
def
("cancelCTREPCMCompressorCurrentCallback", &::HALSIM_CancelCTREPCMCompressorCurrentCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getCTREPCMCompressorCurrent", &::HALSIM_GetCTREPCMCompressorCurrent,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setCTREPCMCompressorCurrent", &::HALSIM_SetCTREPCMCompressorCurrent,
      py::arg("index"), py::arg("compressorCurrent"), release_gil()
  )
  
  ;
m
  .
def
("getCTREPCMAllSolenoids", [](int32_t index) {
                    uint8_t values;
          ::HALSIM_GetCTREPCMAllSolenoids(std::move(index), &values);
          return values;
        },
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setCTREPCMAllSolenoids", &::HALSIM_SetCTREPCMAllSolenoids,
      py::arg("index"), py::arg("values"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_CTREPCMData_initializer

static std::unique_ptr<rpybuild_CTREPCMData_initializer> cls;

void begin_init_CTREPCMData(py::module &m) {
  cls = std::make_unique<rpybuild_CTREPCMData_initializer>(m);
}

void finish_init_CTREPCMData() {
  cls->finish();
  cls.reset();
}