
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/DriverStationData.h>
















#include <type_traits>




struct rpybuild_DriverStationData_initializer {













  py::module &m;

  
  rpybuild_DriverStationData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("resetDriverStationData", &::HALSIM_ResetDriverStationData, release_gil()
  )
  
  ;
m
  .
def
("cancelDriverStationEnabledCallback", &::HALSIM_CancelDriverStationEnabledCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDriverStationEnabled", &::HALSIM_GetDriverStationEnabled, release_gil()
  )
  
  ;
m
  .
def
("setDriverStationEnabled", &::HALSIM_SetDriverStationEnabled,
      py::arg("enabled"), release_gil()
  )
  
  ;
m
  .
def
("cancelDriverStationAutonomousCallback", &::HALSIM_CancelDriverStationAutonomousCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDriverStationAutonomous", &::HALSIM_GetDriverStationAutonomous, release_gil()
  )
  
  ;
m
  .
def
("setDriverStationAutonomous", &::HALSIM_SetDriverStationAutonomous,
      py::arg("autonomous"), release_gil()
  )
  
  ;
m
  .
def
("cancelDriverStationTestCallback", &::HALSIM_CancelDriverStationTestCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDriverStationTest", &::HALSIM_GetDriverStationTest, release_gil()
  )
  
  ;
m
  .
def
("setDriverStationTest", &::HALSIM_SetDriverStationTest,
      py::arg("test"), release_gil()
  )
  
  ;
m
  .
def
("cancelDriverStationEStopCallback", &::HALSIM_CancelDriverStationEStopCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDriverStationEStop", &::HALSIM_GetDriverStationEStop, release_gil()
  )
  
  ;
m
  .
def
("setDriverStationEStop", &::HALSIM_SetDriverStationEStop,
      py::arg("eStop"), release_gil()
  )
  
  ;
m
  .
def
("cancelDriverStationFmsAttachedCallback", &::HALSIM_CancelDriverStationFmsAttachedCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDriverStationFmsAttached", &::HALSIM_GetDriverStationFmsAttached, release_gil()
  )
  
  ;
m
  .
def
("setDriverStationFmsAttached", &::HALSIM_SetDriverStationFmsAttached,
      py::arg("fmsAttached"), release_gil()
  )
  
  ;
m
  .
def
("cancelDriverStationDsAttachedCallback", &::HALSIM_CancelDriverStationDsAttachedCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDriverStationDsAttached", &::HALSIM_GetDriverStationDsAttached, release_gil()
  )
  
  ;
m
  .
def
("setDriverStationDsAttached", &::HALSIM_SetDriverStationDsAttached,
      py::arg("dsAttached"), release_gil()
  )
  
  ;
m
  .
def
("cancelDriverStationAllianceStationIdCallback", &::HALSIM_CancelDriverStationAllianceStationIdCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDriverStationAllianceStationId", &::HALSIM_GetDriverStationAllianceStationId, release_gil()
  )
  
  ;
m
  .
def
("setDriverStationAllianceStationId", &::HALSIM_SetDriverStationAllianceStationId,
      py::arg("allianceStationId"), release_gil()
  )
  
  ;
m
  .
def
("cancelDriverStationMatchTimeCallback", &::HALSIM_CancelDriverStationMatchTimeCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getDriverStationMatchTime", &::HALSIM_GetDriverStationMatchTime, release_gil()
  )
  
  ;
m
  .
def
("setDriverStationMatchTime", &::HALSIM_SetDriverStationMatchTime,
      py::arg("matchTime"), release_gil()
  )
  
  ;
m
  .
def
("cancelJoystickAxesCallback", &::HALSIM_CancelJoystickAxesCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getJoystickAxes", &::HALSIM_GetJoystickAxes,
      py::arg("joystickNum"), py::arg("axes"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickAxes", &::HALSIM_SetJoystickAxes,
      py::arg("joystickNum"), py::arg("axes"), release_gil()
  )
  
  ;
m
  .
def
("cancelJoystickPOVsCallback", &::HALSIM_CancelJoystickPOVsCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getJoystickPOVs", &::HALSIM_GetJoystickPOVs,
      py::arg("joystickNum"), py::arg("povs"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickPOVs", &::HALSIM_SetJoystickPOVs,
      py::arg("joystickNum"), py::arg("povs"), release_gil()
  )
  
  ;
m
  .
def
("cancelJoystickButtonsCallback", &::HALSIM_CancelJoystickButtonsCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getJoystickButtons", &::HALSIM_GetJoystickButtons,
      py::arg("joystickNum"), py::arg("buttons"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickButtons", &::HALSIM_SetJoystickButtons,
      py::arg("joystickNum"), py::arg("buttons"), release_gil()
  )
  
  ;
m
  .
def
("cancelJoystickDescriptorCallback", &::HALSIM_CancelJoystickDescriptorCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getJoystickDescriptor", &::HALSIM_GetJoystickDescriptor,
      py::arg("joystickNum"), py::arg("descriptor"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickDescriptor", &::HALSIM_SetJoystickDescriptor,
      py::arg("joystickNum"), py::arg("descriptor"), release_gil()
  )
  
  ;
m
  .
def
("cancelJoystickOutputsCallback", &::HALSIM_CancelJoystickOutputsCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getJoystickOutputs", [](int32_t joystickNum) {
                    int64_t outputs;
          int32_t leftRumble;
          int32_t rightRumble;
          ::HALSIM_GetJoystickOutputs(std::move(joystickNum), &outputs, &leftRumble, &rightRumble);
          return std::make_tuple(outputs,leftRumble,rightRumble);
        },
      py::arg("joystickNum"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickOutputs", &::HALSIM_SetJoystickOutputs,
      py::arg("joystickNum"), py::arg("outputs"), py::arg("leftRumble"), py::arg("rightRumble"), release_gil()
  )
  
  ;
m
  .
def
("cancelMatchInfoCallback", &::HALSIM_CancelMatchInfoCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getMatchInfo", &::HALSIM_GetMatchInfo,
      py::arg("info"), release_gil()
  )
  
  ;
m
  .
def
("setMatchInfo", &::HALSIM_SetMatchInfo,
      py::arg("info"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickButton", &::HALSIM_SetJoystickButton,
      py::arg("stick"), py::arg("button"), py::arg("state"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickAxis", &::HALSIM_SetJoystickAxis,
      py::arg("stick"), py::arg("axis"), py::arg("value"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickPOV", &::HALSIM_SetJoystickPOV,
      py::arg("stick"), py::arg("pov"), py::arg("value"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickButtonsValue", &::HALSIM_SetJoystickButtonsValue,
      py::arg("stick"), py::arg("buttons"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickAxisCount", &::HALSIM_SetJoystickAxisCount,
      py::arg("stick"), py::arg("count"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickPOVCount", &::HALSIM_SetJoystickPOVCount,
      py::arg("stick"), py::arg("count"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickButtonCount", &::HALSIM_SetJoystickButtonCount,
      py::arg("stick"), py::arg("count"), release_gil()
  )
  
  ;
m
  .
def
("getJoystickCounts", [](int32_t stick) {
                    int32_t axisCount;
          int32_t buttonCount;
          int32_t povCount;
          ::HALSIM_GetJoystickCounts(std::move(stick), &axisCount, &buttonCount, &povCount);
          return std::make_tuple(axisCount,buttonCount,povCount);
        },
      py::arg("stick"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickIsXbox", &::HALSIM_SetJoystickIsXbox,
      py::arg("stick"), py::arg("isXbox"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickType", &::HALSIM_SetJoystickType,
      py::arg("stick"), py::arg("type"), release_gil()
  )
  
  ;
m
  .
def
("setJoystickName", [](int32_t stick, std::string_view sv) {
  auto s = wpi::make_string(sv);
  HALSIM_SetJoystickName(stick, &s);
}
,
      py::arg("stick"), py::arg("name")
  )
  
  ;
m
  .
def
("setJoystickAxisType", &::HALSIM_SetJoystickAxisType,
      py::arg("stick"), py::arg("axis"), py::arg("type"), release_gil()
  )
  
  ;
m
  .
def
("setGameSpecificMessage", [](std::string_view sv) {
  auto s = wpi::make_string(sv);
  HALSIM_SetGameSpecificMessage(&s);
}
,
      py::arg("message")
  )
  
  ;
m
  .
def
("setEventName", [](std::string_view sv) {
  auto s = wpi::make_string(sv);
  HALSIM_SetEventName(&s);
}
,
      py::arg("name")
  )
  
  ;
m
  .
def
("setMatchType", &::HALSIM_SetMatchType,
      py::arg("type"), release_gil()
  )
  
  ;
m
  .
def
("setMatchNumber", &::HALSIM_SetMatchNumber,
      py::arg("matchNumber"), release_gil()
  )
  
  ;
m
  .
def
("setReplayNumber", &::HALSIM_SetReplayNumber,
      py::arg("replayNumber"), release_gil()
  )
  
  ;
m
  .
def
("cancelDriverStationNewDataCallback", &::HALSIM_CancelDriverStationNewDataCallback,
      py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("notifyDriverStationNewData", &::HALSIM_NotifyDriverStationNewData, release_gil()
  )
  
  ;



}

}; // struct rpybuild_DriverStationData_initializer

static std::unique_ptr<rpybuild_DriverStationData_initializer> cls;

void begin_init_DriverStationData(py::module &m) {
  cls = std::make_unique<rpybuild_DriverStationData_initializer>(m);
}

void finish_init_DriverStationData() {
  cls->finish();
  cls.reset();
}