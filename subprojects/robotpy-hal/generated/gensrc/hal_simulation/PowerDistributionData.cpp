
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <hal/simulation/PowerDistributionData.h>
















#include <type_traits>






struct rpybuild_PowerDistributionData_initializer {













  py::module &m;

  
  rpybuild_PowerDistributionData_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("resetPowerDistributionData", &::HALSIM_ResetPowerDistributionData,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("cancelPowerDistributionInitializedCallback", &::HALSIM_CancelPowerDistributionInitializedCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getPowerDistributionInitialized", &::HALSIM_GetPowerDistributionInitialized,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setPowerDistributionInitialized", &::HALSIM_SetPowerDistributionInitialized,
      py::arg("index"), py::arg("initialized"), release_gil()
  )
  
  ;
m
  .
def
("cancelPowerDistributionTemperatureCallback", &::HALSIM_CancelPowerDistributionTemperatureCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getPowerDistributionTemperature", &::HALSIM_GetPowerDistributionTemperature,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setPowerDistributionTemperature", &::HALSIM_SetPowerDistributionTemperature,
      py::arg("index"), py::arg("temperature"), release_gil()
  )
  
  ;
m
  .
def
("cancelPowerDistributionVoltageCallback", &::HALSIM_CancelPowerDistributionVoltageCallback,
      py::arg("index"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getPowerDistributionVoltage", &::HALSIM_GetPowerDistributionVoltage,
      py::arg("index"), release_gil()
  )
  
  ;
m
  .
def
("setPowerDistributionVoltage", &::HALSIM_SetPowerDistributionVoltage,
      py::arg("index"), py::arg("voltage"), release_gil()
  )
  
  ;
m
  .
def
("cancelPowerDistributionCurrentCallback", &::HALSIM_CancelPowerDistributionCurrentCallback,
      py::arg("index"), py::arg("channel"), py::arg("uid"), release_gil()
  )
  
  ;
m
  .
def
("getPowerDistributionCurrent", &::HALSIM_GetPowerDistributionCurrent,
      py::arg("index"), py::arg("channel"), release_gil()
  )
  
  ;
m
  .
def
("setPowerDistributionCurrent", &::HALSIM_SetPowerDistributionCurrent,
      py::arg("index"), py::arg("channel"), py::arg("current"), release_gil()
  )
  
  ;
m
  .
def
("getPowerDistributionAllCurrents", [](int32_t index, int length) {
                    double currents;
          ::HALSIM_GetPowerDistributionAllCurrents(std::move(index), &currents, std::move(length));
          return currents;
        },
      py::arg("index"), py::arg("length"), release_gil()
  )
  
  ;
m
  .
def
("setPowerDistributionAllCurrents", &::HALSIM_SetPowerDistributionAllCurrents,
      py::arg("index"), py::arg("currents"), py::arg("length"), release_gil()
  )
  
  ;



}

}; // struct rpybuild_PowerDistributionData_initializer

static std::unique_ptr<rpybuild_PowerDistributionData_initializer> cls;

void begin_init_PowerDistributionData(py::module &m) {
  cls = std::make_unique<rpybuild_PowerDistributionData_initializer>(m);
}

void finish_init_PowerDistributionData() {
  cls->finish();
  cls.reset();
}