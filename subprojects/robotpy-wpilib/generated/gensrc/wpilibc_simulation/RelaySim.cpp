
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/RelaySim.h>


#include <pybind11/functional.h>













#include <frc/Relay.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;





struct rpybuild_RelaySim_initializer {


  

  












  py::class_<typename frc::sim::RelaySim> cls_RelaySim;

    

    
    

  py::module &m;

  
  rpybuild_RelaySim_initializer(py::module &m) :

  

  

  

  
    cls_RelaySim(m, "RelaySim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_RelaySim.doc() =
    "Class to control a simulated relay.";

  cls_RelaySim
  
    
  .def(py::init<const Relay&>(),
      py::arg("relay"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from a Relay object.\n"
"\n"
":param relay: Relay to simulate")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructs from a relay channel number.\n"
"\n"
":param channel: Channel number")
  )
  
  
  
    
  .
def
("registerInitializedForwardCallback", &frc::sim::RelaySim::RegisterInitializedForwardCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the forward direction is initialized.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getInitializedForward", &frc::sim::RelaySim::GetInitializedForward, release_gil(), py::doc(
    "Check whether the forward direction has been initialized.\n"
"\n"
":returns: true if initialized")
  )
  
  
  
    
  .
def
("setInitializedForward", &frc::sim::RelaySim::SetInitializedForward,
      py::arg("initializedForward"), release_gil(), py::doc(
    "Define whether the forward direction has been initialized.\n"
"\n"
":param initializedForward: whether this object is initialized")
  )
  
  
  
    
  .
def
("registerInitializedReverseCallback", &frc::sim::RelaySim::RegisterInitializedReverseCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the reverse direction is initialized.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getInitializedReverse", &frc::sim::RelaySim::GetInitializedReverse, release_gil(), py::doc(
    "Check whether the reverse direction has been initialized.\n"
"\n"
":returns: true if initialized")
  )
  
  
  
    
  .
def
("setInitializedReverse", &frc::sim::RelaySim::SetInitializedReverse,
      py::arg("initializedReverse"), release_gil(), py::doc(
    "Define whether the reverse direction has been initialized.\n"
"\n"
":param initializedReverse: whether this object is initialized")
  )
  
  
  
    
  .
def
("registerForwardCallback", &frc::sim::RelaySim::RegisterForwardCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the forward direction changes state.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getForward", &frc::sim::RelaySim::GetForward, release_gil(), py::doc(
    "Check whether the forward direction is active.\n"
"\n"
":returns: true if active")
  )
  
  
  
    
  .
def
("setForward", &frc::sim::RelaySim::SetForward,
      py::arg("forward"), release_gil(), py::doc(
    "Set whether the forward direction is active.\n"
"\n"
":param forward: true to make active")
  )
  
  
  
    
  .
def
("registerReverseCallback", &frc::sim::RelaySim::RegisterReverseCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the reverse direction changes state.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getReverse", &frc::sim::RelaySim::GetReverse, release_gil(), py::doc(
    "Check whether the reverse direction is active.\n"
"\n"
":returns: true if active")
  )
  
  
  
    
  .
def
("setReverse", &frc::sim::RelaySim::SetReverse,
      py::arg("reverse"), release_gil(), py::doc(
    "Set whether the reverse direction is active.\n"
"\n"
":param reverse: true to make active")
  )
  
  
  
    
  .
def
("resetData", &frc::sim::RelaySim::ResetData, release_gil(), py::doc(
    "Reset all simulation data.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_RelaySim_initializer

static std::unique_ptr<rpybuild_RelaySim_initializer> cls;

void begin_init_RelaySim(py::module &m) {
  cls = std::make_unique<rpybuild_RelaySim_initializer>(m);
}

void finish_init_RelaySim() {
  cls->finish();
  cls.reset();
}