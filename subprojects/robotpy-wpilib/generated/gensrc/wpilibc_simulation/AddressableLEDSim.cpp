
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/AddressableLEDSim.h>


#include <pybind11/functional.h>













#include <frc/AddressableLED.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;



struct rpybuild_AddressableLEDSim_initializer {


  

  












  py::class_<typename frc::sim::AddressableLEDSim> cls_AddressableLEDSim;

    

    
    

  py::module &m;

  
  rpybuild_AddressableLEDSim_initializer(py::module &m) :

  

  

  

  
    cls_AddressableLEDSim(m, "AddressableLEDSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_AddressableLEDSim.doc() =
    "Class to control a simulated addressable LED.";

  cls_AddressableLEDSim
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "Constructs for the first addressable LED.")
  )
  
  
  
    
  .def(py::init<const AddressableLED&>(),
      py::arg("addressableLED"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from an AddressableLED object.\n"
"\n"
":param addressableLED: AddressableLED to simulate")
  )
  
  
  
    
  .
def_static
("createForChannel", &frc::sim::AddressableLEDSim::CreateForChannel,
      py::arg("pwmChannel"), release_gil(), py::doc(
    "Creates an AddressableLEDSim for a PWM channel.\n"
"\n"
":param pwmChannel: PWM channel\n"
"\n"
":returns: Simulated object\n"
"          @throws std::out_of_range if no AddressableLED is configured for that\n"
"          channel")
  )
  
  
  
    
  .
def_static
("createForIndex", &frc::sim::AddressableLEDSim::CreateForIndex,
      py::arg("index"), release_gil(), py::doc(
    "Creates an AddressableLEDSim for a simulated index.\n"
"The index is incremented for each simulated AddressableLED.\n"
"\n"
":param index: simulator index\n"
"\n"
":returns: Simulated object")
  )
  
  
  
    
  .
def
("registerInitializedCallback", &frc::sim::AddressableLEDSim::RegisterInitializedCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the Initialized property.\n"
"\n"
":param callback:      the callback that will be called whenever the Initialized\n"
"                      property is changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object storing this callback")
  )
  
  
  
    
  .
def
("getInitialized", &frc::sim::AddressableLEDSim::GetInitialized, release_gil(), py::doc(
    "Check if initialized.\n"
"\n"
":returns: true if initialized")
  )
  
  
  
    
  .
def
("setInitialized", &frc::sim::AddressableLEDSim::SetInitialized,
      py::arg("initialized"), release_gil(), py::doc(
    "Change the Initialized value of the LED strip.\n"
"\n"
":param initialized: the new value")
  )
  
  
  
    
  .
def
("registerOutputPortCallback", &frc::sim::AddressableLEDSim::RegisterOutputPortCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the output port.\n"
"\n"
":param callback:      the callback that will be called whenever the output port\n"
"                      is changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getOutputPort", &frc::sim::AddressableLEDSim::GetOutputPort, release_gil(), py::doc(
    "Get the output port.\n"
"\n"
":returns: the output port")
  )
  
  
  
    
  .
def
("setOutputPort", &frc::sim::AddressableLEDSim::SetOutputPort,
      py::arg("outputPort"), release_gil(), py::doc(
    "Change the output port.\n"
"\n"
":param outputPort: the new output port")
  )
  
  
  
    
  .
def
("registerLengthCallback", &frc::sim::AddressableLEDSim::RegisterLengthCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the length.\n"
"\n"
":param callback:      the callback that will be called whenever the length is\n"
"                      changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getLength", &frc::sim::AddressableLEDSim::GetLength, release_gil(), py::doc(
    "Get the length of the LED strip.\n"
"\n"
":returns: the length")
  )
  
  
  
    
  .
def
("setLength", &frc::sim::AddressableLEDSim::SetLength,
      py::arg("length"), release_gil(), py::doc(
    "Change the length of the LED strip.\n"
"\n"
":param length: the new value")
  )
  
  
  
    
  .
def
("registerRunningCallback", &frc::sim::AddressableLEDSim::RegisterRunningCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on whether the LEDs are running.\n"
"\n"
":param callback:      the callback that will be called whenever the LED state is\n"
"                      changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getRunning", &frc::sim::AddressableLEDSim::GetRunning, release_gil(), py::doc(
    "Check if the LEDs are running.\n"
"\n"
":returns: true if they are")
  )
  
  
  
    
  .
def
("setRunning", &frc::sim::AddressableLEDSim::SetRunning,
      py::arg("running"), release_gil(), py::doc(
    "Change whether the LEDs are active.\n"
"\n"
":param running: the new value")
  )
  
  
  
    
  .
def
("registerDataCallback", &frc::sim::AddressableLEDSim::RegisterDataCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the LED data.\n"
"\n"
":param callback:      the callback that will be called whenever the LED data is\n"
"                      changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getData", &frc::sim::AddressableLEDSim::GetData,
      py::arg("data"), release_gil(), py::doc(
    "Get the LED data.\n"
"\n"
":param data: output parameter to fill with LED data\n"
"\n"
":returns: the length of the LED data")
  )
  
  
  
    
  .
def
("setData", &frc::sim::AddressableLEDSim::SetData,
      py::arg("data"), py::arg("length"), release_gil(), py::doc(
    "Change the LED data.\n"
"\n"
":param data:   the new data\n"
":param length: the length of the LED data")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_AddressableLEDSim_initializer

static std::unique_ptr<rpybuild_AddressableLEDSim_initializer> cls;

void begin_init_AddressableLEDSim(py::module &m) {
  cls = std::make_unique<rpybuild_AddressableLEDSim_initializer>(m);
}

void finish_init_AddressableLEDSim() {
  cls->finish();
  cls.reset();
}