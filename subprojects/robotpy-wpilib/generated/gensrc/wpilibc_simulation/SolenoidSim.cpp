
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/SolenoidSim.h>


#include <pybind11/functional.h>















#include <type_traits>


  using namespace frc::sim;



struct rpybuild_SolenoidSim_initializer {


  
    using PneumaticsModuleType = frc::PneumaticsModuleType;
  

  












  py::class_<typename frc::sim::SolenoidSim> cls_SolenoidSim;

    

    
    

  py::module &m;

  
  rpybuild_SolenoidSim_initializer(py::module &m) :

  

  

  

  
    cls_SolenoidSim(m, "SolenoidSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  

  cls_SolenoidSim
  
    
  .def(py::init<std::shared_ptr<PneumaticsBaseSim>, int>(),
      py::arg("moduleSim"), py::arg("channel"), release_gil()
  )
  
  
  
    
  .def(py::init<int, PneumaticsModuleType, int>(),
      py::arg("module"), py::arg("type"), py::arg("channel"), release_gil()
  )
  
  
  
    
  .def(py::init<PneumaticsModuleType, int>(),
      py::arg("type"), py::arg("channel"), release_gil()
  )
  
  
  
    
  .
def
("getOutput", &frc::sim::SolenoidSim::GetOutput, release_gil()
  )
  
  
  
    
  .
def
("setOutput", &frc::sim::SolenoidSim::SetOutput,
      py::arg("output"), release_gil()
  )
  
  
  
    
  .
def
("registerOutputCallback", &frc::sim::SolenoidSim::RegisterOutputCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the output of this solenoid has changed.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial state\n"
"\n"
":returns: the :class:`.CallbackStore` object associated with this callback.\n"
"          Save a reference to this object; it being deconstructed cancels the\n"
"          callback.")
  )
  
  
  
    
  .
def
("getModuleSim", &frc::sim::SolenoidSim::GetModuleSim, release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_SolenoidSim_initializer

static std::unique_ptr<rpybuild_SolenoidSim_initializer> cls;

void begin_init_SolenoidSim(py::module &m) {
  cls = std::make_unique<rpybuild_SolenoidSim_initializer>(m);
}

void finish_init_SolenoidSim() {
  cls->finish();
  cls.reset();
}