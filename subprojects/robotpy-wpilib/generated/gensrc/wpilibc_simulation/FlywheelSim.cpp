
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/FlywheelSim.h>


#include <pybind11/stl.h>

#include <units_angular_velocity_type_caster.h>

#include <units_current_type_caster.h>

#include <units_moment_of_inertia_type_caster.h>

#include <units_voltage_type_caster.h>







#define RPYGEN_ENABLE_frc__sim__FlywheelSim_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__sim__FlywheelSim.hpp>









#include <type_traits>


  using namespace frc::sim;





struct rpybuild_FlywheelSim_initializer {


  
    using DCMotor = frc::DCMotor;
  
    template <int S, int I, int O> using LinearSystem = frc::LinearSystem<S, I, O>;
  

  












  
  using FlywheelSim_Trampoline = rpygen::PyTrampoline_frc__sim__FlywheelSim<typename frc::sim::FlywheelSim, typename rpygen::PyTrampolineCfg_frc__sim__FlywheelSim<>>;
    static_assert(std::is_abstract<FlywheelSim_Trampoline>::value == false, "frc::sim::FlywheelSim " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::sim::FlywheelSim, FlywheelSim_Trampoline, frc::sim::LinearSystemSim<1, 1, 1>> cls_FlywheelSim;

    

    
    

  py::module &m;

  
  rpybuild_FlywheelSim_initializer(py::module &m) :

  

  

  

  
    cls_FlywheelSim(m, "FlywheelSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_FlywheelSim.doc() =
    "Represents a simulated flywheel mechanism.";

  cls_FlywheelSim
  
    
  .def(py::init<const LinearSystem<1, 1, 1>&, const DCMotor&, double, const std::array<double, 1>&>(),
      py::arg("plant"), py::arg("gearbox"), py::arg("gearing"), py::arg("measurementStdDevs") = std::array<double, 1>{0.0}, release_gil()
    , py::keep_alive<1, 2>()
    , py::keep_alive<1, 3>()
    , py::keep_alive<1, 5>(), py::doc(
    "Creates a simulated flywheel mechanism.\n"
"\n"
":param plant:              The linear system representing the flywheel. This\n"
"                           system can be created with\n"
"                           LinearSystemId::FlywheelSystem().\n"
":param gearbox:            The type of and number of motors in the flywheel\n"
"                           gearbox.\n"
":param gearing:            The gearing of the flywheel (numbers greater than\n"
"                           1 represent reductions).\n"
":param measurementStdDevs: The standard deviation of the measurement noise.")
  )
  
  
  
    
  .def(py::init<const DCMotor&, double, units::kilogram_square_meter_t, const std::array<double, 1>&>(),
      py::arg("gearbox"), py::arg("gearing"), py::arg("moi"), py::arg("measurementStdDevs") = std::array<double, 1>{0.0}, release_gil()
    , py::keep_alive<1, 2>()
    , py::keep_alive<1, 5>(), py::doc(
    "Creates a simulated flywheel mechanism.\n"
"\n"
":param gearbox:            The type of and number of motors in the flywheel\n"
"                           gearbox.\n"
":param gearing:            The gearing of the flywheel (numbers greater than\n"
"                           1 represent reductions).\n"
":param moi:                The moment of inertia of the flywheel.\n"
":param measurementStdDevs: The standard deviation of the measurement noise.")
  )
  
  
  
    
  .
def
("setState", static_cast<void(frc::sim::FlywheelSim::*)(units::radians_per_second_t)>(
        &frc::sim::FlywheelSim::SetState),
      py::arg("velocity"), release_gil(), py::doc(
    "Sets the flywheel's state.\n"
"\n"
":param velocity: The new velocity")
  )
  
  
  
    
  .
def
("getAngularVelocity", &frc::sim::FlywheelSim::GetAngularVelocity, release_gil(), py::doc(
    "Returns the flywheel velocity.\n"
"\n"
":returns: The flywheel velocity.")
  )
  
  
  
    
  .
def
("getCurrentDraw", &frc::sim::FlywheelSim::GetCurrentDraw, release_gil(), py::doc(
    "Returns the flywheel current draw.\n"
"\n"
":returns: The flywheel current draw.")
  )
  
  
  
    
  .
def
("setInputVoltage", &frc::sim::FlywheelSim::SetInputVoltage,
      py::arg("voltage"), release_gil(), py::doc(
    "Sets the input voltage for the flywheel.\n"
"\n"
":param voltage: The input voltage.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_FlywheelSim_initializer

static std::unique_ptr<rpybuild_FlywheelSim_initializer> cls;

void begin_init_FlywheelSim(py::module &m) {
  cls = std::make_unique<rpybuild_FlywheelSim_initializer>(m);
}

void finish_init_FlywheelSim() {
  cls->finish();
  cls.reset();
}