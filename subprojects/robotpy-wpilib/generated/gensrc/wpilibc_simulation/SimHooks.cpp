
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/SimHooks.h>


#include <units_time_type_caster.h>















#include <type_traits>


  using namespace frc::sim;



struct rpybuild_SimHooks_initializer {













  py::module &m;

  
  rpybuild_SimHooks_initializer(py::module &m) :

  

  

  

  

    m(m)
  {
    
    

    
  }

void finish() {







m
  .
def
("setRuntimeType", &frc::sim::SetRuntimeType,
      py::arg("type"), release_gil(), py::doc(
    "Override the HAL runtime type (simulated/real).\n"
"\n"
":param type: runtime type")
  )
  
  ;
m
  .
def
("waitForProgramStart", &frc::sim::WaitForProgramStart, release_gil()
  )
  
  ;
m
  .
def
("setProgramStarted", &frc::sim::SetProgramStarted, release_gil()
  )
  
  ;
m
  .
def
("getProgramStarted", &frc::sim::GetProgramStarted, release_gil()
  )
  
  ;
m
  .
def
("restartTiming", &frc::sim::RestartTiming, release_gil(), py::doc(
    "Restart the simulator time.")
  )
  
  ;
m
  .
def
("pauseTiming", &frc::sim::PauseTiming, release_gil(), py::doc(
    "Pause the simulator time.")
  )
  
  ;
m
  .
def
("resumeTiming", &frc::sim::ResumeTiming, release_gil(), py::doc(
    "Resume the simulator time.")
  )
  
  ;
m
  .
def
("isTimingPaused", &frc::sim::IsTimingPaused, release_gil(), py::doc(
    "Check if the simulator time is paused.\n"
"\n"
":returns: true if paused")
  )
  
  ;
m
  .
def
("stepTiming", &frc::sim::StepTiming,
      py::arg("delta"), release_gil(), py::doc(
    "Advance the simulator time and wait for all notifiers to run.\n"
"\n"
":param delta: the amount to advance (in seconds)")
  )
  
  ;
m
  .
def
("stepTimingAsync", &frc::sim::StepTimingAsync,
      py::arg("delta"), release_gil(), py::doc(
    "Advance the simulator time and return immediately.\n"
"\n"
":param delta: the amount to advance (in seconds)")
  )
  
  ;



}

}; // struct rpybuild_SimHooks_initializer

static std::unique_ptr<rpybuild_SimHooks_initializer> cls;

void begin_init_SimHooks(py::module &m) {
  cls = std::make_unique<rpybuild_SimHooks_initializer>(m);
}

void finish_init_SimHooks() {
  cls->finish();
  cls.reset();
}