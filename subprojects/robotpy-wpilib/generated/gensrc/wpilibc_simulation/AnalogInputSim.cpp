
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/AnalogInputSim.h>


#include <pybind11/functional.h>













#include <frc/AnalogInput.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;



struct rpybuild_AnalogInputSim_initializer {


  

  












  py::class_<typename frc::sim::AnalogInputSim> cls_AnalogInputSim;

    

    
    

  py::module &m;

  
  rpybuild_AnalogInputSim_initializer(py::module &m) :

  

  

  

  
    cls_AnalogInputSim(m, "AnalogInputSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_AnalogInputSim.doc() =
    "Class to control a simulated analog input.";

  cls_AnalogInputSim
  
    
  .def(py::init<const AnalogInput&>(),
      py::arg("analogInput"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from an AnalogInput object.\n"
"\n"
":param analogInput: AnalogInput to simulate")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructs from an analog input channel number.\n"
"\n"
":param channel: Channel number")
  )
  
  
  
    
  .
def
("registerInitializedCallback", &frc::sim::AnalogInputSim::RegisterInitializedCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on whether the analog input is initialized.\n"
"\n"
":param callback:      the callback that will be called whenever the analog input\n"
"                      is initialized\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getInitialized", &frc::sim::AnalogInputSim::GetInitialized, release_gil(), py::doc(
    "Check if this analog input has been initialized.\n"
"\n"
":returns: true if initialized")
  )
  
  
  
    
  .
def
("setInitialized", &frc::sim::AnalogInputSim::SetInitialized,
      py::arg("initialized"), release_gil(), py::doc(
    "Change whether this analog input has been initialized.\n"
"\n"
":param initialized: the new value")
  )
  
  
  
    
  .
def
("registerAverageBitsCallback", &frc::sim::AnalogInputSim::RegisterAverageBitsCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the number of average bits.\n"
"\n"
":param callback:      the callback that will be called whenever the number of\n"
"                      average bits is changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getAverageBits", &frc::sim::AnalogInputSim::GetAverageBits, release_gil(), py::doc(
    "Get the number of average bits.\n"
"\n"
":returns: the number of average bits")
  )
  
  
  
    
  .
def
("setAverageBits", &frc::sim::AnalogInputSim::SetAverageBits,
      py::arg("averageBits"), release_gil(), py::doc(
    "Change the number of average bits.\n"
"\n"
":param averageBits: the new value")
  )
  
  
  
    
  .
def
("registerOversampleBitsCallback", &frc::sim::AnalogInputSim::RegisterOversampleBitsCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the amount of oversampling bits.\n"
"\n"
":param callback:      the callback that will be called whenever the oversampling\n"
"                      bits are changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getOversampleBits", &frc::sim::AnalogInputSim::GetOversampleBits, release_gil(), py::doc(
    "Get the amount of oversampling bits.\n"
"\n"
":returns: the amount of oversampling bits")
  )
  
  
  
    
  .
def
("setOversampleBits", &frc::sim::AnalogInputSim::SetOversampleBits,
      py::arg("oversampleBits"), release_gil(), py::doc(
    "Change the amount of oversampling bits.\n"
"\n"
":param oversampleBits: the new value")
  )
  
  
  
    
  .
def
("registerVoltageCallback", &frc::sim::AnalogInputSim::RegisterVoltageCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the voltage.\n"
"\n"
":param callback:      the callback that will be called whenever the voltage is\n"
"                      changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getVoltage", &frc::sim::AnalogInputSim::GetVoltage, release_gil(), py::doc(
    "Get the voltage.\n"
"\n"
":returns: the voltage")
  )
  
  
  
    
  .
def
("setVoltage", &frc::sim::AnalogInputSim::SetVoltage,
      py::arg("voltage"), release_gil(), py::doc(
    "Change the voltage.\n"
"\n"
":param voltage: the new value")
  )
  
  
  
    
  .
def
("registerAccumulatorInitializedCallback", &frc::sim::AnalogInputSim::RegisterAccumulatorInitializedCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on whether the accumulator is initialized.\n"
"\n"
":param callback:      the callback that will be called whenever the accumulator\n"
"                      is initialized\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getAccumulatorInitialized", &frc::sim::AnalogInputSim::GetAccumulatorInitialized, release_gil(), py::doc(
    "Check if the accumulator has been initialized.\n"
"\n"
":returns: true if initialized")
  )
  
  
  
    
  .
def
("setAccumulatorInitialized", &frc::sim::AnalogInputSim::SetAccumulatorInitialized,
      py::arg("accumulatorInitialized"), release_gil(), py::doc(
    "Change whether the accumulator has been initialized.\n"
"\n"
":param accumulatorInitialized: the new value")
  )
  
  
  
    
  .
def
("registerAccumulatorValueCallback", &frc::sim::AnalogInputSim::RegisterAccumulatorValueCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the accumulator value.\n"
"\n"
":param callback:      the callback that will be called whenever the accumulator\n"
"                      value is changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getAccumulatorValue", &frc::sim::AnalogInputSim::GetAccumulatorValue, release_gil(), py::doc(
    "Get the accumulator value.\n"
"\n"
":returns: the accumulator value")
  )
  
  
  
    
  .
def
("setAccumulatorValue", &frc::sim::AnalogInputSim::SetAccumulatorValue,
      py::arg("accumulatorValue"), release_gil(), py::doc(
    "Change the accumulator value.\n"
"\n"
":param accumulatorValue: the new value")
  )
  
  
  
    
  .
def
("registerAccumulatorCountCallback", &frc::sim::AnalogInputSim::RegisterAccumulatorCountCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the accumulator count.\n"
"\n"
":param callback:      the callback that will be called whenever the accumulator\n"
"                      count is changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getAccumulatorCount", &frc::sim::AnalogInputSim::GetAccumulatorCount, release_gil(), py::doc(
    "Get the accumulator count.\n"
"\n"
":returns: the accumulator count.")
  )
  
  
  
    
  .
def
("setAccumulatorCount", &frc::sim::AnalogInputSim::SetAccumulatorCount,
      py::arg("accumulatorCount"), release_gil(), py::doc(
    "Change the accumulator count.\n"
"\n"
":param accumulatorCount: the new count.")
  )
  
  
  
    
  .
def
("registerAccumulatorCenterCallback", &frc::sim::AnalogInputSim::RegisterAccumulatorCenterCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the accumulator center.\n"
"\n"
":param callback:      the callback that will be called whenever the accumulator\n"
"                      center is changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getAccumulatorCenter", &frc::sim::AnalogInputSim::GetAccumulatorCenter, release_gil(), py::doc(
    "Get the accumulator center.\n"
"\n"
":returns: the accumulator center")
  )
  
  
  
    
  .
def
("setAccumulatorCenter", &frc::sim::AnalogInputSim::SetAccumulatorCenter,
      py::arg("accumulatorCenter"), release_gil(), py::doc(
    "Change the accumulator center.\n"
"\n"
":param accumulatorCenter: the new center")
  )
  
  
  
    
  .
def
("registerAccumulatorDeadbandCallback", &frc::sim::AnalogInputSim::RegisterAccumulatorDeadbandCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the accumulator deadband.\n"
"\n"
":param callback:      the callback that will be called whenever the accumulator\n"
"                      deadband is changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getAccumulatorDeadband", &frc::sim::AnalogInputSim::GetAccumulatorDeadband, release_gil(), py::doc(
    "Get the accumulator deadband.\n"
"\n"
":returns: the accumulator deadband")
  )
  
  
  
    
  .
def
("setAccumulatorDeadband", &frc::sim::AnalogInputSim::SetAccumulatorDeadband,
      py::arg("accumulatorDeadband"), release_gil(), py::doc(
    "Change the accumulator deadband.\n"
"\n"
":param accumulatorDeadband: the new deadband")
  )
  
  
  
    
  .
def
("resetData", &frc::sim::AnalogInputSim::ResetData, release_gil(), py::doc(
    "Reset all simulation data for this object.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_AnalogInputSim_initializer

static std::unique_ptr<rpybuild_AnalogInputSim_initializer> cls;

void begin_init_AnalogInputSim(py::module &m) {
  cls = std::make_unique<rpybuild_AnalogInputSim_initializer>(m);
}

void finish_init_AnalogInputSim() {
  cls->finish();
  cls.reset();
}