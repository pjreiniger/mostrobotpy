
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/DigitalPWMSim.h>


#include <pybind11/functional.h>













#include <frc/DigitalOutput.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;





struct rpybuild_DigitalPWMSim_initializer {


  

  












  py::class_<typename frc::sim::DigitalPWMSim> cls_DigitalPWMSim;

    

    
    

  py::module &m;

  
  rpybuild_DigitalPWMSim_initializer(py::module &m) :

  

  

  

  
    cls_DigitalPWMSim(m, "DigitalPWMSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DigitalPWMSim.doc() =
    "Class to control a simulated digital PWM output.\n"
"\n"
"This is for duty cycle PWM outputs on a DigitalOutput, not for the servo\n"
"style PWM outputs on a PWM channel.";

  cls_DigitalPWMSim
  
    
  .def(py::init<const DigitalOutput&>(),
      py::arg("digitalOutput"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from a DigitalOutput object.\n"
"\n"
":param digitalOutput: DigitalOutput to simulate")
  )
  
  
  
    
  .
def_static
("createForChannel", &frc::sim::DigitalPWMSim::CreateForChannel,
      py::arg("channel"), release_gil(), py::doc(
    "Creates an DigitalPWMSim for a digital I/O channel.\n"
"\n"
":param channel: DIO channel\n"
"\n"
":returns: Simulated object\n"
"          @throws std::out_of_range if no Digital PWM is configured for that channel")
  )
  
  
  
    
  .
def_static
("createForIndex", &frc::sim::DigitalPWMSim::CreateForIndex,
      py::arg("index"), release_gil(), py::doc(
    "Creates an DigitalPWMSim for a simulated index.\n"
"The index is incremented for each simulated DigitalPWM.\n"
"\n"
":param index: simulator index\n"
"\n"
":returns: Simulated object")
  )
  
  
  
    
  .
def
("registerInitializedCallback", &frc::sim::DigitalPWMSim::RegisterInitializedCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when this PWM output is initialized.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getInitialized", &frc::sim::DigitalPWMSim::GetInitialized, release_gil(), py::doc(
    "Check whether this PWM output has been initialized.\n"
"\n"
":returns: true if initialized")
  )
  
  
  
    
  .
def
("setInitialized", &frc::sim::DigitalPWMSim::SetInitialized,
      py::arg("initialized"), release_gil(), py::doc(
    "Define whether this PWM output has been initialized.\n"
"\n"
":param initialized: whether this object is initialized")
  )
  
  
  
    
  .
def
("registerDutyCycleCallback", &frc::sim::DigitalPWMSim::RegisterDutyCycleCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run whenever the duty cycle value changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to call the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getDutyCycle", &frc::sim::DigitalPWMSim::GetDutyCycle, release_gil(), py::doc(
    "Read the duty cycle value.\n"
"\n"
":returns: the duty cycle value of this PWM output")
  )
  
  
  
    
  .
def
("setDutyCycle", &frc::sim::DigitalPWMSim::SetDutyCycle,
      py::arg("dutyCycle"), release_gil(), py::doc(
    "Set the duty cycle value of this PWM output.\n"
"\n"
":param dutyCycle: the new value")
  )
  
  
  
    
  .
def
("registerPinCallback", &frc::sim::DigitalPWMSim::RegisterPinCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run whenever the pin changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to call the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getPin", &frc::sim::DigitalPWMSim::GetPin, release_gil(), py::doc(
    "Check the pin number.\n"
"\n"
":returns: the pin number")
  )
  
  
  
    
  .
def
("setPin", &frc::sim::DigitalPWMSim::SetPin,
      py::arg("pin"), release_gil(), py::doc(
    "Change the pin number.\n"
"\n"
":param pin: the new pin number")
  )
  
  
  
    
  .
def
("resetData", &frc::sim::DigitalPWMSim::ResetData, release_gil(), py::doc(
    "Reset all simulation data.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DigitalPWMSim_initializer

static std::unique_ptr<rpybuild_DigitalPWMSim_initializer> cls;

void begin_init_DigitalPWMSim(py::module &m) {
  cls = std::make_unique<rpybuild_DigitalPWMSim_initializer>(m);
}

void finish_init_DigitalPWMSim() {
  cls->finish();
  cls.reset();
}