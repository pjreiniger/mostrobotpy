
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/BatterySim.h>


#include <units_current_type_caster.h>

#include <units_impedance_type_caster.h>

#include <units_voltage_type_caster.h>

#include <wpi_span_type_caster.h>















#include <type_traits>


  using namespace frc::sim;



struct rpybuild_BatterySim_initializer {


  

  












  py::class_<typename frc::sim::BatterySim> cls_BatterySim;

    

    
    

  py::module &m;

  
  rpybuild_BatterySim_initializer(py::module &m) :

  

  

  

  
    cls_BatterySim(m, "BatterySim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_BatterySim.doc() =
    "A utility class to simulate the robot battery.";

  cls_BatterySim
  
    .def(py::init<>(), release_gil())
  
    
  .
def_static
("calculate", static_cast<units::volt_t(*)(units::volt_t, units::ohm_t, std::span<const units::ampere_t>)>(
        &frc::sim::BatterySim::Calculate),
      py::arg("nominalVoltage"), py::arg("resistance"), py::arg("currents"), release_gil(), py::doc(
    "Calculate the loaded battery voltage. Use this with\n"
"RoboRioSim::SetVInVoltage(double) to set the simulated battery voltage,\n"
"which can then be retrieved with the RobotController::GetBatteryVoltage()\n"
"method.\n"
"\n"
":param nominalVoltage: The nominal battery voltage. Usually 12v.\n"
":param resistance:     The forward resistance of the battery. Most batteries\n"
"                       are at or below 20 milliohms.\n"
":param currents:       The currents drawn from the battery.\n"
"\n"
":returns: The battery's voltage under load.")
  )
  
  
  
    
  .
def_static
("calculate", static_cast<units::volt_t(*)(std::span<const units::ampere_t>)>(
        &frc::sim::BatterySim::Calculate),
      py::arg("currents"), release_gil(), py::doc(
    "Calculate the loaded battery voltage. Use this with\n"
"RoboRioSimSetVInVoltage(double) to set the simulated battery voltage, which\n"
"can then be retrieved with the RobotController::GetBatteryVoltage() method.\n"
"This function assumes a nominal voltage of 12V and a resistance of 20\n"
"milliohms (0.020 ohms).\n"
"\n"
":param currents: The currents drawn from the battery.\n"
"\n"
":returns: The battery's voltage under load.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_BatterySim_initializer

static std::unique_ptr<rpybuild_BatterySim_initializer> cls;

void begin_init_BatterySim(py::module &m) {
  cls = std::make_unique<rpybuild_BatterySim_initializer>(m);
}

void finish_init_BatterySim() {
  cls->finish();
  cls.reset();
}