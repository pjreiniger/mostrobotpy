
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/GenericHIDSim.h>
















#include <type_traits>


  using namespace frc;

  using namespace frc::sim;





struct rpybuild_GenericHIDSim_initializer {


  

  












  py::class_<typename frc::sim::GenericHIDSim> cls_GenericHIDSim;

    

    
    

  py::module &m;

  
  rpybuild_GenericHIDSim_initializer(py::module &m) :

  

  

  

  
    cls_GenericHIDSim(m, "GenericHIDSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_GenericHIDSim.doc() =
    "Class to control a simulated generic joystick.";

  cls_GenericHIDSim
  
    
  .def(py::init<const GenericHID&>(),
      py::arg("joystick"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from a GenericHID object.\n"
"\n"
":param joystick: joystick to simulate")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("port"), release_gil(), py::doc(
    "Constructs from a joystick port number.\n"
"\n"
":param port: port number")
  )
  
  
  
    
  .
def
("notifyNewData", &frc::sim::GenericHIDSim::NotifyNewData, release_gil(), py::doc(
    "Updates joystick data so that new values are visible to the user program.")
  )
  
  
  
    
  .
def
("setRawButton", &frc::sim::GenericHIDSim::SetRawButton,
      py::arg("button"), py::arg("value"), release_gil(), py::doc(
    "Set the value of a given button.\n"
"\n"
":param button: the button to set\n"
":param value:  the new value")
  )
  
  
  
    
  .
def
("setRawAxis", &frc::sim::GenericHIDSim::SetRawAxis,
      py::arg("axis"), py::arg("value"), release_gil(), py::doc(
    "Set the value of a given axis.\n"
"\n"
":param axis:  the axis to set\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setPOV", static_cast<void(frc::sim::GenericHIDSim::*)(int, int)>(
        &frc::sim::GenericHIDSim::SetPOV),
      py::arg("pov"), py::arg("value"), release_gil(), py::doc(
    "Set the value of a given POV.\n"
"\n"
":param pov:   the POV to set\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setPOV", static_cast<void(frc::sim::GenericHIDSim::*)(int)>(
        &frc::sim::GenericHIDSim::SetPOV),
      py::arg("value"), release_gil(), py::doc(
    "Set the value of the default POV (port 0).\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setAxisCount", &frc::sim::GenericHIDSim::SetAxisCount,
      py::arg("count"), release_gil(), py::doc(
    "Set the axis count of this device.\n"
"\n"
":param count: the new axis count")
  )
  
  
  
    
  .
def
("setPOVCount", &frc::sim::GenericHIDSim::SetPOVCount,
      py::arg("count"), release_gil(), py::doc(
    "Set the POV count of this device.\n"
"\n"
":param count: the new POV count")
  )
  
  
  
    
  .
def
("setButtonCount", &frc::sim::GenericHIDSim::SetButtonCount,
      py::arg("count"), release_gil(), py::doc(
    "Set the button count of this device.\n"
"\n"
":param count: the new button count")
  )
  
  
  
    
  .
def
("setType", &frc::sim::GenericHIDSim::SetType,
      py::arg("type"), release_gil(), py::doc(
    "Set the type of this device.\n"
"\n"
":param type: the new device type")
  )
  
  
  
    
  .
def
("setName", &frc::sim::GenericHIDSim::SetName,
      py::arg("name"), release_gil(), py::doc(
    "Set the name of this device.\n"
"\n"
":param name: the new device name")
  )
  
  
  
    
  .
def
("setAxisType", &frc::sim::GenericHIDSim::SetAxisType,
      py::arg("axis"), py::arg("type"), release_gil(), py::doc(
    "Set the type of an axis.\n"
"\n"
":param axis: the axis\n"
":param type: the type")
  )
  
  
  
    
  .
def
("getOutput", &frc::sim::GenericHIDSim::GetOutput,
      py::arg("outputNumber"), release_gil(), py::doc(
    "Read the output of a button.\n"
"\n"
":param outputNumber: the button number\n"
"\n"
":returns: the value of the button (true = pressed)")
  )
  
  
  
    
  .
def
("getOutputs", &frc::sim::GenericHIDSim::GetOutputs, release_gil(), py::doc(
    "Get the encoded 16-bit integer that passes button values.\n"
"\n"
":returns: the button values")
  )
  
  
  
    
  .
def
("getRumble", &frc::sim::GenericHIDSim::GetRumble,
      py::arg("type"), release_gil(), py::doc(
    "Get the joystick rumble.\n"
"\n"
":param type: the rumble to read\n"
"\n"
":returns: the rumble value")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_GenericHIDSim_initializer

static std::unique_ptr<rpybuild_GenericHIDSim_initializer> cls;

void begin_init_GenericHIDSim(py::module &m) {
  cls = std::make_unique<rpybuild_GenericHIDSim_initializer>(m);
}

void finish_init_GenericHIDSim() {
  cls->finish();
  cls.reset();
}