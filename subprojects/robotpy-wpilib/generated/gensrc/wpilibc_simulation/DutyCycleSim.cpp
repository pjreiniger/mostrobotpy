
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/DutyCycleSim.h>


#include <pybind11/functional.h>













#include <frc/DutyCycle.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;





struct rpybuild_DutyCycleSim_initializer {


  

  












  py::class_<typename frc::sim::DutyCycleSim> cls_DutyCycleSim;

    

    
    

  py::module &m;

  
  rpybuild_DutyCycleSim_initializer(py::module &m) :

  

  

  

  
    cls_DutyCycleSim(m, "DutyCycleSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DutyCycleSim.doc() =
    "Class to control a simulated duty cycle digital input.";

  cls_DutyCycleSim
  
    
  .def(py::init<const DutyCycle&>(),
      py::arg("dutyCycle"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from a DutyCycle object.\n"
"\n"
":param dutyCycle: DutyCycle to simulate")
  )
  
  
  
    
  .
def_static
("createForChannel", &frc::sim::DutyCycleSim::CreateForChannel,
      py::arg("channel"), release_gil(), py::doc(
    "Creates a DutyCycleSim for a digital input channel.\n"
"\n"
":param channel: digital input channel\n"
"\n"
":returns: Simulated object\n"
"          @throws std::out_of_range if no DutyCycle is configured for that channel")
  )
  
  
  
    
  .
def_static
("createForIndex", &frc::sim::DutyCycleSim::CreateForIndex,
      py::arg("index"), release_gil(), py::doc(
    "Creates a DutyCycleSim for a simulated index.\n"
"The index is incremented for each simulated DutyCycle.\n"
"\n"
":param index: simulator index\n"
"\n"
":returns: Simulated object")
  )
  
  
  
    
  .
def
("registerInitializedCallback", &frc::sim::DutyCycleSim::RegisterInitializedCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when this duty cycle input is initialized.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getInitialized", &frc::sim::DutyCycleSim::GetInitialized, release_gil(), py::doc(
    "Check whether this duty cycle input has been initialized.\n"
"\n"
":returns: true if initialized")
  )
  
  
  
    
  .
def
("setInitialized", &frc::sim::DutyCycleSim::SetInitialized,
      py::arg("initialized"), release_gil(), py::doc(
    "Define whether this duty cycle input has been initialized.\n"
"\n"
":param initialized: whether this object is initialized")
  )
  
  
  
    
  .
def
("registerFrequencyCallback", &frc::sim::DutyCycleSim::RegisterFrequencyCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run whenever the frequency changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to call the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getFrequency", &frc::sim::DutyCycleSim::GetFrequency, release_gil(), py::doc(
    "Measure the frequency.\n"
"\n"
":returns: the duty cycle frequency")
  )
  
  
  
    
  .
def
("setFrequency", &frc::sim::DutyCycleSim::SetFrequency,
      py::arg("frequency"), release_gil(), py::doc(
    "Change the duty cycle frequency.\n"
"\n"
":param frequency: the new frequency")
  )
  
  
  
    
  .
def
("registerOutputCallback", &frc::sim::DutyCycleSim::RegisterOutputCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run whenever the output changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to call the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getOutput", &frc::sim::DutyCycleSim::GetOutput, release_gil(), py::doc(
    "Measure the output from this duty cycle port.\n"
"\n"
":returns: the output value")
  )
  
  
  
    
  .
def
("setOutput", &frc::sim::DutyCycleSim::SetOutput,
      py::arg("output"), release_gil(), py::doc(
    "Change the duty cycle output.\n"
"\n"
":param output: the new output value")
  )
  
  
  
    
  .
def
("resetData", &frc::sim::DutyCycleSim::ResetData, release_gil(), py::doc(
    "Reset all simulation data for the duty cycle output.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DutyCycleSim_initializer

static std::unique_ptr<rpybuild_DutyCycleSim_initializer> cls;

void begin_init_DutyCycleSim(py::module &m) {
  cls = std::make_unique<rpybuild_DutyCycleSim_initializer>(m);
}

void finish_init_DutyCycleSim() {
  cls->finish();
  cls.reset();
}