
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/PS4ControllerSim.h>














#include <frc/PS4Controller.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;



struct rpybuild_PS4ControllerSim_initializer {


  

  












  py::class_<typename frc::sim::PS4ControllerSim, frc::sim::GenericHIDSim> cls_PS4ControllerSim;

    

    
    

  py::module &m;

  
  rpybuild_PS4ControllerSim_initializer(py::module &m) :

  

  

  

  
    cls_PS4ControllerSim(m, "PS4ControllerSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_PS4ControllerSim.doc() =
    "Class to control a simulated PS4 controller.";

  cls_PS4ControllerSim
  
    
  .def(py::init<const PS4Controller&>(),
      py::arg("joystick"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from a PS4Controller object.\n"
"\n"
":param joystick: controller to simulate")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("port"), release_gil(), py::doc(
    "Constructs from a joystick port number.\n"
"\n"
":param port: port number")
  )
  
  
  
    
  .
def
("setLeftX", &frc::sim::PS4ControllerSim::SetLeftX,
      py::arg("value"), release_gil(), py::doc(
    "Change the left X value of the controller's joystick.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setLeftY", &frc::sim::PS4ControllerSim::SetLeftY,
      py::arg("value"), release_gil(), py::doc(
    "Change the left Y value of the controller's joystick.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setRightX", &frc::sim::PS4ControllerSim::SetRightX,
      py::arg("value"), release_gil(), py::doc(
    "Change the right X value of the controller's joystick.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setRightY", &frc::sim::PS4ControllerSim::SetRightY,
      py::arg("value"), release_gil(), py::doc(
    "Change the right Y value of the controller's joystick.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setL2Axis", &frc::sim::PS4ControllerSim::SetL2Axis,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the left trigger 2 axis on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setR2Axis", &frc::sim::PS4ControllerSim::SetR2Axis,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the right trigger 2 axis on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setSquareButton", &frc::sim::PS4ControllerSim::SetSquareButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the square button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setCrossButton", &frc::sim::PS4ControllerSim::SetCrossButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the cross button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setCircleButton", &frc::sim::PS4ControllerSim::SetCircleButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the circle button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setTriangleButton", &frc::sim::PS4ControllerSim::SetTriangleButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the triangle button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setL1Button", &frc::sim::PS4ControllerSim::SetL1Button,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the left trigger 1 button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setR1Button", &frc::sim::PS4ControllerSim::SetR1Button,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the right trigger 1 button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setL2Button", &frc::sim::PS4ControllerSim::SetL2Button,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the left trigger 2 button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setR2Button", &frc::sim::PS4ControllerSim::SetR2Button,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the right trigger 2 button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setShareButton", &frc::sim::PS4ControllerSim::SetShareButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the share button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setOptionsButton", &frc::sim::PS4ControllerSim::SetOptionsButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the options button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setL3Button", &frc::sim::PS4ControllerSim::SetL3Button,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the L3 (left stick) button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setR3Button", &frc::sim::PS4ControllerSim::SetR3Button,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the R3 (right stick) button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setPSButton", &frc::sim::PS4ControllerSim::SetPSButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the PlayStation button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setTouchpadButton", &frc::sim::PS4ControllerSim::SetTouchpadButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the touchpad button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_PS4ControllerSim_initializer

static std::unique_ptr<rpybuild_PS4ControllerSim_initializer> cls;

void begin_init_PS4ControllerSim(py::module &m) {
  cls = std::make_unique<rpybuild_PS4ControllerSim_initializer>(m);
}

void finish_init_PS4ControllerSim() {
  cls->finish();
  cls.reset();
}