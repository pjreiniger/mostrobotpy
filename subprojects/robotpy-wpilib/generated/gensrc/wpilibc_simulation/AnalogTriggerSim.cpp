
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/AnalogTriggerSim.h>


#include <pybind11/functional.h>













#include <frc/AnalogTrigger.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;





struct rpybuild_AnalogTriggerSim_initializer {


  

  












  py::class_<typename frc::sim::AnalogTriggerSim> cls_AnalogTriggerSim;

    

    
    

  py::module &m;

  
  rpybuild_AnalogTriggerSim_initializer(py::module &m) :

  

  

  

  
    cls_AnalogTriggerSim(m, "AnalogTriggerSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_AnalogTriggerSim.doc() =
    "Class to control a simulated analog trigger.";

  cls_AnalogTriggerSim
  
    
  .def(py::init<const AnalogTrigger&>(),
      py::arg("analogTrigger"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from an AnalogTrigger object.\n"
"\n"
":param analogTrigger: AnalogTrigger to simulate")
  )
  
  
  
    
  .
def_static
("createForChannel", &frc::sim::AnalogTriggerSim::CreateForChannel,
      py::arg("channel"), release_gil(), py::doc(
    "Creates an AnalogTriggerSim for an analog input channel.\n"
"\n"
":param channel: analog input channel\n"
"\n"
":returns: Simulated object\n"
"          @throws std::out_of_range if no AnalogTrigger is configured for that\n"
"          channel")
  )
  
  
  
    
  .
def_static
("createForIndex", &frc::sim::AnalogTriggerSim::CreateForIndex,
      py::arg("index"), release_gil(), py::doc(
    "Creates an AnalogTriggerSim for a simulated index.\n"
"The index is incremented for each simulated AnalogTrigger.\n"
"\n"
":param index: simulator index\n"
"\n"
":returns: Simulated object")
  )
  
  
  
    
  .
def
("registerInitializedCallback", &frc::sim::AnalogTriggerSim::RegisterInitializedCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on whether the analog trigger is initialized.\n"
"\n"
":param callback:      the callback that will be called whenever the analog\n"
"                      trigger is initialized\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getInitialized", &frc::sim::AnalogTriggerSim::GetInitialized, release_gil(), py::doc(
    "Check if this analog trigger has been initialized.\n"
"\n"
":returns: true if initialized")
  )
  
  
  
    
  .
def
("setInitialized", &frc::sim::AnalogTriggerSim::SetInitialized,
      py::arg("initialized"), release_gil(), py::doc(
    "Change whether this analog trigger has been initialized.\n"
"\n"
":param initialized: the new value")
  )
  
  
  
    
  .
def
("registerTriggerLowerBoundCallback", &frc::sim::AnalogTriggerSim::RegisterTriggerLowerBoundCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the lower bound.\n"
"\n"
":param callback:      the callback that will be called whenever the lower bound\n"
"                      is changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getTriggerLowerBound", &frc::sim::AnalogTriggerSim::GetTriggerLowerBound, release_gil(), py::doc(
    "Get the lower bound.\n"
"\n"
":returns: the lower bound")
  )
  
  
  
    
  .
def
("setTriggerLowerBound", &frc::sim::AnalogTriggerSim::SetTriggerLowerBound,
      py::arg("triggerLowerBound"), release_gil(), py::doc(
    "Change the lower bound.\n"
"\n"
":param triggerLowerBound: the new lower bound")
  )
  
  
  
    
  .
def
("registerTriggerUpperBoundCallback", &frc::sim::AnalogTriggerSim::RegisterTriggerUpperBoundCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback on the upper bound.\n"
"\n"
":param callback:      the callback that will be called whenever the upper bound\n"
"                      is changed\n"
":param initialNotify: if true, the callback will be run on the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getTriggerUpperBound", &frc::sim::AnalogTriggerSim::GetTriggerUpperBound, release_gil(), py::doc(
    "Get the upper bound.\n"
"\n"
":returns: the upper bound")
  )
  
  
  
    
  .
def
("setTriggerUpperBound", &frc::sim::AnalogTriggerSim::SetTriggerUpperBound,
      py::arg("triggerUpperBound"), release_gil(), py::doc(
    "Change the upper bound.\n"
"\n"
":param triggerUpperBound: the new upper bound")
  )
  
  
  
    
  .
def
("resetData", &frc::sim::AnalogTriggerSim::ResetData, release_gil(), py::doc(
    "Reset all simulation data for this object.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_AnalogTriggerSim_initializer

static std::unique_ptr<rpybuild_AnalogTriggerSim_initializer> cls;

void begin_init_AnalogTriggerSim(py::module &m) {
  cls = std::make_unique<rpybuild_AnalogTriggerSim_initializer>(m);
}

void finish_init_AnalogTriggerSim() {
  cls->finish();
  cls.reset();
}