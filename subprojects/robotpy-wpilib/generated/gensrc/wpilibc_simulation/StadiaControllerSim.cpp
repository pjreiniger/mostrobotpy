
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/StadiaControllerSim.h>














#include <frc/StadiaController.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;



struct rpybuild_StadiaControllerSim_initializer {


  

  












  py::class_<typename frc::sim::StadiaControllerSim, frc::sim::GenericHIDSim> cls_StadiaControllerSim;

    

    
    

  py::module &m;

  
  rpybuild_StadiaControllerSim_initializer(py::module &m) :

  

  

  

  
    cls_StadiaControllerSim(m, "StadiaControllerSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_StadiaControllerSim.doc() =
    "Class to control a simulated Stadia controller.";

  cls_StadiaControllerSim
  
    
  .def(py::init<const StadiaController&>(),
      py::arg("joystick"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from a StadiaController object.\n"
"\n"
":param joystick: controller to simulate")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("port"), release_gil(), py::doc(
    "Constructs from a joystick port number.\n"
"\n"
":param port: port number")
  )
  
  
  
    
  .
def
("setLeftX", &frc::sim::StadiaControllerSim::SetLeftX,
      py::arg("value"), release_gil(), py::doc(
    "Change the left X value of the controller's joystick.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setRightX", &frc::sim::StadiaControllerSim::SetRightX,
      py::arg("value"), release_gil(), py::doc(
    "Change the right X value of the controller's joystick.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setLeftY", &frc::sim::StadiaControllerSim::SetLeftY,
      py::arg("value"), release_gil(), py::doc(
    "Change the left Y value of the controller's joystick.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setRightY", &frc::sim::StadiaControllerSim::SetRightY,
      py::arg("value"), release_gil(), py::doc(
    "Change the right Y value of the controller's joystick.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setAButton", &frc::sim::StadiaControllerSim::SetAButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the A button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setBButton", &frc::sim::StadiaControllerSim::SetBButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the B button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setXButton", &frc::sim::StadiaControllerSim::SetXButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the X button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setYButton", &frc::sim::StadiaControllerSim::SetYButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the Y button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setLeftBumperButton", &frc::sim::StadiaControllerSim::SetLeftBumperButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the left bumper button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setRightBumperButton", &frc::sim::StadiaControllerSim::SetRightBumperButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the right bumper button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setLeftStickButton", &frc::sim::StadiaControllerSim::SetLeftStickButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the left stick button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setRightStickButton", &frc::sim::StadiaControllerSim::SetRightStickButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the right stick button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setEllipsesButton", &frc::sim::StadiaControllerSim::SetEllipsesButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the ellipses button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setHamburgerButton", &frc::sim::StadiaControllerSim::SetHamburgerButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the hamburger button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setStadiaButton", &frc::sim::StadiaControllerSim::SetStadiaButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the stadia button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setRightTriggerButton", &frc::sim::StadiaControllerSim::SetRightTriggerButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the right trigger button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setLeftTriggerButton", &frc::sim::StadiaControllerSim::SetLeftTriggerButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the left trigger button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setGoogleButton", &frc::sim::StadiaControllerSim::SetGoogleButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the google button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  
    
  .
def
("setFrameButton", &frc::sim::StadiaControllerSim::SetFrameButton,
      py::arg("value"), release_gil(), py::doc(
    "Change the value of the frame button on the controller.\n"
"\n"
":param value: the new value")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_StadiaControllerSim_initializer

static std::unique_ptr<rpybuild_StadiaControllerSim_initializer> cls;

void begin_init_StadiaControllerSim(py::module &m) {
  cls = std::make_unique<rpybuild_StadiaControllerSim_initializer>(m);
}

void finish_init_StadiaControllerSim() {
  cls->finish();
  cls.reset();
}