
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/AnalogEncoderSim.h>


#include <pybind11/functional.h>

#include <units_angle_type_caster.h>













#include <frc/AnalogEncoder.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;





struct rpybuild_AnalogEncoderSim_initializer {


  

  












  py::class_<typename frc::sim::AnalogEncoderSim> cls_AnalogEncoderSim;

    

    
    

  py::module &m;

  
  rpybuild_AnalogEncoderSim_initializer(py::module &m) :

  

  

  

  
    cls_AnalogEncoderSim(m, "AnalogEncoderSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_AnalogEncoderSim.doc() =
    "Class to control a simulated analog encoder.";

  cls_AnalogEncoderSim
  
    
  .def(py::init<const AnalogEncoder&>(),
      py::arg("encoder"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from an AnalogEncoder object.\n"
"\n"
":param encoder: AnalogEncoder to simulate")
  )
  
  
  
    
  .
def
("setPosition", &frc::sim::AnalogEncoderSim::SetPosition,
      py::arg("angle"), release_gil(), py::doc(
    "Set the position using an Rotation2d.\n"
"\n"
":param angle: The angle.")
  )
  
  
  
    
  .
def
("setTurns", &frc::sim::AnalogEncoderSim::SetTurns,
      py::arg("turns"), release_gil(), py::doc(
    "Set the position of the encoder.\n"
"\n"
":param turns: The position.")
  )
  
  
  
    
  .
def
("getTurns", &frc::sim::AnalogEncoderSim::GetTurns, release_gil(), py::doc(
    "Get the simulated position.")
  )
  
  
  
    
  .
def
("getPosition", &frc::sim::AnalogEncoderSim::GetPosition, release_gil(), py::doc(
    "Get the position as a Rotation2d.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_AnalogEncoderSim_initializer

static std::unique_ptr<rpybuild_AnalogEncoderSim_initializer> cls;

void begin_init_AnalogEncoderSim(py::module &m) {
  cls = std::make_unique<rpybuild_AnalogEncoderSim_initializer>(m);
}

void finish_init_AnalogEncoderSim() {
  cls->finish();
  cls.reset();
}