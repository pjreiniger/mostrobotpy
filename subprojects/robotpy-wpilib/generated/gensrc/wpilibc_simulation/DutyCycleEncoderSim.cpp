
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/DutyCycleEncoderSim.h>


#include <units_angle_type_caster.h>













#include <frc/DutyCycleEncoder.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;





struct rpybuild_DutyCycleEncoderSim_initializer {


  

  












  py::class_<typename frc::sim::DutyCycleEncoderSim> cls_DutyCycleEncoderSim;

    

    
    

  py::module &m;

  
  rpybuild_DutyCycleEncoderSim_initializer(py::module &m) :

  

  

  

  
    cls_DutyCycleEncoderSim(m, "DutyCycleEncoderSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DutyCycleEncoderSim.doc() =
    "Class to control a simulated duty cycle encoder.";

  cls_DutyCycleEncoderSim
  
    
  .def(py::init<const DutyCycleEncoder&>(),
      py::arg("encoder"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from a DutyCycleEncoder object.\n"
"\n"
":param encoder: DutyCycleEncoder to simulate")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructs from a digital input channel.\n"
"\n"
":param channel: digital input channel")
  )
  
  
  
    
  .
def
("get", &frc::sim::DutyCycleEncoderSim::Get, release_gil(), py::doc(
    "Get the position in turns.\n"
"\n"
":returns: The position.")
  )
  
  
  
    
  .
def
("set", &frc::sim::DutyCycleEncoderSim::Set,
      py::arg("turns"), release_gil(), py::doc(
    "Set the position in turns.\n"
"\n"
":param turns: The position.")
  )
  
  
  
    
  .
def
("getDistance", &frc::sim::DutyCycleEncoderSim::GetDistance, release_gil()
  )
  
  
  
    
  .
def
("setDistance", &frc::sim::DutyCycleEncoderSim::SetDistance,
      py::arg("distance"), release_gil(), py::doc(
    "Set the distance.\n"
"\n"
":param distance: The distance.")
  )
  
  
  
    
  .
def
("getAbsolutePosition", &frc::sim::DutyCycleEncoderSim::GetAbsolutePosition, release_gil(), py::doc(
    "Get the absolute position.\n"
"\n"
":returns: The absolute position")
  )
  
  
  
    
  .
def
("setAbsolutePosition", &frc::sim::DutyCycleEncoderSim::SetAbsolutePosition,
      py::arg("position"), release_gil(), py::doc(
    "Set the absolute position.\n"
"\n"
":param position: The absolute position")
  )
  
  
  
    
  .
def
("getDistancePerRotation", &frc::sim::DutyCycleEncoderSim::GetDistancePerRotation, release_gil(), py::doc(
    "Get the distance per rotation for this encoder.\n"
"\n"
":returns: The scale factor that will be used to convert rotation to useful\n"
"          units.")
  )
  
  
  
    
  .
def
("isConnected", &frc::sim::DutyCycleEncoderSim::IsConnected, release_gil(), py::doc(
    "Get if the encoder is connected.\n"
"\n"
":returns: true if the encoder is connected.")
  )
  
  
  
    
  .
def
("setConnected", &frc::sim::DutyCycleEncoderSim::SetConnected,
      py::arg("isConnected"), release_gil(), py::doc(
    "Set if the encoder is connected.\n"
"\n"
":param isConnected: Whether or not the sensor is connected.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DutyCycleEncoderSim_initializer

static std::unique_ptr<rpybuild_DutyCycleEncoderSim_initializer> cls;

void begin_init_DutyCycleEncoderSim(py::module &m) {
  cls = std::make_unique<rpybuild_DutyCycleEncoderSim_initializer>(m);
}

void finish_init_DutyCycleEncoderSim() {
  cls->finish();
  cls.reset();
}