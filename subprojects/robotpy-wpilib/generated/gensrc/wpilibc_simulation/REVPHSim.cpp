
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/REVPHSim.h>


#include <pybind11/functional.h>







#define RPYGEN_ENABLE_frc__sim__REVPHSim_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__sim__REVPHSim.hpp>







#include <frc/Compressor.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;





struct rpybuild_REVPHSim_initializer {


  
    using PneumaticsBase = frc::PneumaticsBase;
  

  












  
  using REVPHSim_Trampoline = rpygen::PyTrampoline_frc__sim__REVPHSim<typename frc::sim::REVPHSim, typename rpygen::PyTrampolineCfg_frc__sim__REVPHSim<>>;
    static_assert(std::is_abstract<REVPHSim_Trampoline>::value == false, "frc::sim::REVPHSim " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::sim::REVPHSim, REVPHSim_Trampoline, frc::sim::PneumaticsBaseSim> cls_REVPHSim;

    

    
    

  py::module &m;

  
  rpybuild_REVPHSim_initializer(py::module &m) :

  

  

  

  
    cls_REVPHSim(m, "REVPHSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_REVPHSim.doc() =
    "Class to control a simulated Pneumatic Control Module (PCM).";

  cls_REVPHSim
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "Constructs with the default PCM module number (CAN ID).")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("module"), release_gil(), py::doc(
    "Constructs from a PCM module number (CAN ID).\n"
"\n"
":param module: module number")
  )
  
  
  
    
  .def(py::init<const PneumaticsBase&>(),
      py::arg("pneumatics"), release_gil()
    , py::keep_alive<1, 2>()
  )
  
  
  
    
  .
def
("registerInitializedCallback", &frc::sim::REVPHSim::RegisterInitializedCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil()
  )
  
  
  
    
  .
def
("getInitialized", &frc::sim::REVPHSim::GetInitialized, release_gil()
  )
  
  
  
    
  .
def
("setInitialized", &frc::sim::REVPHSim::SetInitialized,
      py::arg("solenoidInitialized"), release_gil()
  )
  
  
  
    
  .
def
("registerSolenoidOutputCallback", &frc::sim::REVPHSim::RegisterSolenoidOutputCallback,
      py::arg("channel"), py::arg("callback"), py::arg("initialNotify"), release_gil()
  )
  
  
  
    
  .
def
("getSolenoidOutput", &frc::sim::REVPHSim::GetSolenoidOutput,
      py::arg("channel"), release_gil()
  )
  
  
  
    
  .
def
("setSolenoidOutput", &frc::sim::REVPHSim::SetSolenoidOutput,
      py::arg("channel"), py::arg("solenoidOutput"), release_gil()
  )
  
  
  
    
  .
def
("registerCompressorOnCallback", &frc::sim::REVPHSim::RegisterCompressorOnCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil()
  )
  
  
  
    
  .
def
("getCompressorOn", &frc::sim::REVPHSim::GetCompressorOn, release_gil(), py::doc(
    "Check if the compressor is on.\n"
"\n"
":returns: true if the compressor is active")
  )
  
  
  
    
  .
def
("setCompressorOn", &frc::sim::REVPHSim::SetCompressorOn,
      py::arg("compressorOn"), release_gil(), py::doc(
    "Set whether the compressor is active.\n"
"\n"
":param compressorOn: the new value")
  )
  
  
  
    
  .
def
("registerCompressorConfigTypeCallback", &frc::sim::REVPHSim::RegisterCompressorConfigTypeCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run whenever the closed loop state changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether the callback should be called with the\n"
"                      initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getCompressorConfigType", &frc::sim::REVPHSim::GetCompressorConfigType, release_gil(), py::doc(
    "Check whether the closed loop compressor control is active.\n"
"\n"
":returns: compressor config type")
  )
  
  
  
    
  .
def
("setCompressorConfigType", &frc::sim::REVPHSim::SetCompressorConfigType,
      py::arg("compressorConfigType"), release_gil(), py::doc(
    "Turn on/off the closed loop control of the compressor.\n"
"\n"
":param compressorConfigType: compressor config type")
  )
  
  
  
    
  .
def
("registerPressureSwitchCallback", &frc::sim::REVPHSim::RegisterPressureSwitchCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil()
  )
  
  
  
    
  .
def
("getPressureSwitch", &frc::sim::REVPHSim::GetPressureSwitch, release_gil()
  )
  
  
  
    
  .
def
("setPressureSwitch", &frc::sim::REVPHSim::SetPressureSwitch,
      py::arg("pressureSwitch"), release_gil()
  )
  
  
  
    
  .
def
("registerCompressorCurrentCallback", &frc::sim::REVPHSim::RegisterCompressorCurrentCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil()
  )
  
  
  
    
  .
def
("getCompressorCurrent", &frc::sim::REVPHSim::GetCompressorCurrent, release_gil()
  )
  
  
  
    
  .
def
("setCompressorCurrent", &frc::sim::REVPHSim::SetCompressorCurrent,
      py::arg("compressorCurrent"), release_gil()
  )
  
  
  
    
  .
def
("getAllSolenoidOutputs", &frc::sim::REVPHSim::GetAllSolenoidOutputs, release_gil()
  )
  
  
  
    
  .
def
("setAllSolenoidOutputs", &frc::sim::REVPHSim::SetAllSolenoidOutputs,
      py::arg("outputs"), release_gil()
  )
  
  
  
    
  .
def
("resetData", &frc::sim::REVPHSim::ResetData, release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_REVPHSim_initializer

static std::unique_ptr<rpybuild_REVPHSim_initializer> cls;

void begin_init_REVPHSim(py::module &m) {
  cls = std::make_unique<rpybuild_REVPHSim_initializer>(m);
}

void finish_init_REVPHSim() {
  cls->finish();
  cls.reset();
}