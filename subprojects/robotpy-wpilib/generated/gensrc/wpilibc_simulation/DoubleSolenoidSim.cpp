
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/DoubleSolenoidSim.h>
















#include <type_traits>


  using namespace frc::sim;



struct rpybuild_DoubleSolenoidSim_initializer {


  
    using PneumaticsModuleType = frc::PneumaticsModuleType;
  

  












  py::class_<typename frc::sim::DoubleSolenoidSim> cls_DoubleSolenoidSim;

    

    
    

  py::module &m;

  
  rpybuild_DoubleSolenoidSim_initializer(py::module &m) :

  

  

  

  
    cls_DoubleSolenoidSim(m, "DoubleSolenoidSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  

  cls_DoubleSolenoidSim
  
    
  .def(py::init<std::shared_ptr<PneumaticsBaseSim>, int, int>(),
      py::arg("moduleSim"), py::arg("fwd"), py::arg("rev"), release_gil()
  )
  
  
  
    
  .def(py::init<int, PneumaticsModuleType, int, int>(),
      py::arg("module"), py::arg("type"), py::arg("fwd"), py::arg("rev"), release_gil()
  )
  
  
  
    
  .def(py::init<PneumaticsModuleType, int, int>(),
      py::arg("type"), py::arg("fwd"), py::arg("rev"), release_gil()
  )
  
  
  
    
  .
def
("get", &frc::sim::DoubleSolenoidSim::Get, release_gil()
  )
  
  
  
    
  .
def
("set", &frc::sim::DoubleSolenoidSim::Set,
      py::arg("output"), release_gil()
  )
  
  
  
    
  .
def
("getModuleSim", &frc::sim::DoubleSolenoidSim::GetModuleSim, release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DoubleSolenoidSim_initializer

static std::unique_ptr<rpybuild_DoubleSolenoidSim_initializer> cls;

void begin_init_DoubleSolenoidSim(py::module &m) {
  cls = std::make_unique<rpybuild_DoubleSolenoidSim_initializer>(m);
}

void finish_init_DoubleSolenoidSim() {
  cls->finish();
  cls.reset();
}