
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/PWMSim.h>


#include <pybind11/functional.h>













#include <frc/PWM.h>

#include <frc/motorcontrol/PWMMotorController.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;





struct rpybuild_PWMSim_initializer {


  

  












  py::class_<typename frc::sim::PWMSim> cls_PWMSim;

    

    
    

  py::module &m;

  
  rpybuild_PWMSim_initializer(py::module &m) :

  

  

  

  
    cls_PWMSim(m, "PWMSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_PWMSim.doc() =
    "Class to control a simulated PWM output.";

  cls_PWMSim
  
    
  .def(py::init<const PWM&>(),
      py::arg("pwm"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from a PWM object.\n"
"\n"
":param pwm: PWM to simulate")
  )
  
  
  
    
  .def(py::init<const PWMMotorController&>(),
      py::arg("motorctrl"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs from a PWMMotorController object.\n"
"\n"
":param motorctrl: PWMMotorController to simulate")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructs from a PWM channel number.\n"
"\n"
":param channel: Channel number")
  )
  
  
  
    
  .
def
("registerInitializedCallback", &frc::sim::PWMSim::RegisterInitializedCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the PWM is initialized.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getInitialized", &frc::sim::PWMSim::GetInitialized, release_gil(), py::doc(
    "Check whether the PWM has been initialized.\n"
"\n"
":returns: true if initialized")
  )
  
  
  
    
  .
def
("setInitialized", &frc::sim::PWMSim::SetInitialized,
      py::arg("initialized"), release_gil(), py::doc(
    "Define whether the PWM has been initialized.\n"
"\n"
":param initialized: whether this object is initialized")
  )
  
  
  
    
  .
def
("registerPulseMicrosecondCallback", &frc::sim::PWMSim::RegisterPulseMicrosecondCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the PWM pulse microsecond value changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getPulseMicrosecond", &frc::sim::PWMSim::GetPulseMicrosecond, release_gil(), py::doc(
    "Get the PWM pulse microsecond value.\n"
"\n"
":returns: the PWM pulse microsecond value")
  )
  
  
  
    
  .
def
("setPulseMicrosecond", &frc::sim::PWMSim::SetPulseMicrosecond,
      py::arg("microsecondPulseTime"), release_gil(), py::doc(
    "Set the PWM pulse microsecond value.\n"
"\n"
":param microsecondPulseTime: the PWM pulse microsecond value")
  )
  
  
  
    
  .
def
("registerSpeedCallback", &frc::sim::PWMSim::RegisterSpeedCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the PWM speed changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getSpeed", &frc::sim::PWMSim::GetSpeed, release_gil(), py::doc(
    "Get the PWM speed.\n"
"\n"
":returns: the PWM speed (-1.0 to 1.0)")
  )
  
  
  
    
  .
def
("setSpeed", &frc::sim::PWMSim::SetSpeed,
      py::arg("speed"), release_gil(), py::doc(
    "Set the PWM speed.\n"
"\n"
":param speed: the PWM speed (-1.0 to 1.0)")
  )
  
  
  
    
  .
def
("registerPositionCallback", &frc::sim::PWMSim::RegisterPositionCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the PWM position changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getPosition", &frc::sim::PWMSim::GetPosition, release_gil(), py::doc(
    "Get the PWM position.\n"
"\n"
":returns: the PWM position (0.0 to 1.0)")
  )
  
  
  
    
  .
def
("setPosition", &frc::sim::PWMSim::SetPosition,
      py::arg("position"), release_gil(), py::doc(
    "Set the PWM position.\n"
"\n"
":param position: the PWM position (0.0 to 1.0)")
  )
  
  
  
    
  .
def
("registerPeriodScaleCallback", &frc::sim::PWMSim::RegisterPeriodScaleCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the PWM period scale changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial value\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getPeriodScale", &frc::sim::PWMSim::GetPeriodScale, release_gil(), py::doc(
    "Get the PWM period scale.\n"
"\n"
":returns: the PWM period scale")
  )
  
  
  
    
  .
def
("setPeriodScale", &frc::sim::PWMSim::SetPeriodScale,
      py::arg("periodScale"), release_gil(), py::doc(
    "Set the PWM period scale.\n"
"\n"
":param periodScale: the PWM period scale")
  )
  
  
  
    
  .
def
("registerZeroLatchCallback", &frc::sim::PWMSim::RegisterZeroLatchCallback,
      py::arg("callback"), py::arg("initialNotify"), release_gil(), py::doc(
    "Register a callback to be run when the PWM zero latch state changes.\n"
"\n"
":param callback:      the callback\n"
":param initialNotify: whether to run the callback with the initial state\n"
"\n"
":returns: the CallbackStore object associated with this callback")
  )
  
  
  
    
  .
def
("getZeroLatch", &frc::sim::PWMSim::GetZeroLatch, release_gil(), py::doc(
    "Check whether the PWM is zero latched.\n"
"\n"
":returns: true if zero latched")
  )
  
  
  
    
  .
def
("setZeroLatch", &frc::sim::PWMSim::SetZeroLatch,
      py::arg("zeroLatch"), release_gil(), py::doc(
    "Define whether the PWM has been zero latched.\n"
"\n"
":param zeroLatch: true to indicate zero latched")
  )
  
  
  
    
  .
def
("resetData", &frc::sim::PWMSim::ResetData, release_gil(), py::doc(
    "Reset all simulation data.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_PWMSim_initializer

static std::unique_ptr<rpybuild_PWMSim_initializer> cls;

void begin_init_PWMSim(py::module &m) {
  cls = std::make_unique<rpybuild_PWMSim_initializer>(m);
}

void finish_init_PWMSim() {
  cls->finish();
  cls.reset();
}