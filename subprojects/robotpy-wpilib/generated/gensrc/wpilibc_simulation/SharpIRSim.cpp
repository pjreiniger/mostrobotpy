
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/SharpIRSim.h>


#include <units_length_type_caster.h>















#include <type_traits>


  using namespace frc;



struct rpybuild_SharpIRSim_initializer {


  

  












  py::class_<typename frc::SharpIRSim> cls_SharpIRSim;

    

    
    

  py::module &m;

  
  rpybuild_SharpIRSim_initializer(py::module &m) :

  

  

  

  
    cls_SharpIRSim(m, "SharpIRSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_SharpIRSim.doc() =
    "Simulation class for Sharp IR sensors.";

  cls_SharpIRSim
  
    
  .def(py::init<const SharpIR&>(),
      py::arg("sharpIR"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructor.\n"
"\n"
":param sharpIR: The real sensor to simulate")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructor.\n"
"\n"
":param channel: Analog channel for this sensor")
  )
  
  
  
    
  .
def
("setRange", &frc::SharpIRSim::SetRange,
      py::arg("rng"), release_gil(), py::doc(
    "Set the range returned by the distance sensor.\n"
"\n"
":param rng: range of the target returned by the sensor")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_SharpIRSim_initializer

static std::unique_ptr<rpybuild_SharpIRSim_initializer> cls;

void begin_init_SharpIRSim(py::module &m) {
  cls = std::make_unique<rpybuild_SharpIRSim_initializer>(m);
}

void finish_init_SharpIRSim() {
  cls->finish();
  cls.reset();
}