
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/simulation/UltrasonicSim.h>


#include <units_length_type_caster.h>













#include <frc/Ultrasonic.h>



#include <type_traits>


  using namespace frc;

  using namespace frc::sim;



struct rpybuild_UltrasonicSim_initializer {


  
    using Ultrasonic = frc::Ultrasonic;
  

  












  py::class_<typename frc::sim::UltrasonicSim> cls_UltrasonicSim;

    

    
    

  py::module &m;

  
  rpybuild_UltrasonicSim_initializer(py::module &m) :

  

  

  

  
    cls_UltrasonicSim(m, "UltrasonicSim"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_UltrasonicSim.doc() =
    "Class to control a simulated :class:`.Ultrasonic`.";

  cls_UltrasonicSim
  
    
  .def(py::init<const Ultrasonic&>(),
      py::arg("ultrasonic"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructor.\n"
"\n"
":param ultrasonic: The real ultrasonic to simulate")
  )
  
  
  
    
  .def(py::init<int, int>(),
      py::arg("ping"), py::arg("echo"), release_gil(), py::doc(
    "Constructor.\n"
"\n"
":param ping: unused.\n"
":param echo: the ultrasonic's echo channel.")
  )
  
  
  
    
  .
def
("setRangeValid", &frc::sim::UltrasonicSim::SetRangeValid,
      py::arg("valid"), release_gil(), py::doc(
    "Sets if the range measurement is valid.\n"
"\n"
":param valid: True if valid")
  )
  
  
  
    
  .
def
("setRange", &frc::sim::UltrasonicSim::SetRange,
      py::arg("range"), release_gil(), py::doc(
    "Sets the range measurement.\n"
"\n"
":param range: The range.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_UltrasonicSim_initializer

static std::unique_ptr<rpybuild_UltrasonicSim_initializer> cls;

void begin_init_UltrasonicSim(py::module &m) {
  cls = std::make_unique<rpybuild_UltrasonicSim_initializer>(m);
}

void finish_init_UltrasonicSim() {
  cls->finish();
  cls.reset();
}