
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/drive/RobotDriveBase.h>


#include <wpi_span_type_caster.h>







#define RPYGEN_ENABLE_frc__RobotDriveBase_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__RobotDriveBase.hpp>







#include <frc/motorcontrol/MotorController.h>

#include <wpi/SmallString.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_RobotDriveBase_initializer {


  

  












  
  using RobotDriveBase_Trampoline = rpygen::PyTrampoline_frc__RobotDriveBase<typename frc::RobotDriveBase, typename rpygen::PyTrampolineCfg_frc__RobotDriveBase<>>;
    static_assert(std::is_abstract<RobotDriveBase_Trampoline>::value == false, "frc::RobotDriveBase " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::RobotDriveBase, RobotDriveBase_Trampoline, frc::MotorSafety> cls_RobotDriveBase;

    
    
  py::enum_<frc::RobotDriveBase::MotorType> cls_RobotDriveBase_enum1;
    

    
    

  py::module &m;

  
  rpybuild_RobotDriveBase_initializer(py::module &m) :

  

  

  

  
    cls_RobotDriveBase(m, "RobotDriveBase"),

  
    cls_RobotDriveBase_enum1
  (cls_RobotDriveBase, "MotorType"
  ,
    "The location of a motor on the robot for the purpose of driving."),
  

  
  
  

    m(m)
  {
    
    

    
    
  
    cls_RobotDriveBase_enum1
  
    .value("kFrontLeft", frc::RobotDriveBase::MotorType::kFrontLeft,
      "Front-left motor.")
  
    .value("kFrontRight", frc::RobotDriveBase::MotorType::kFrontRight,
      "Front-right motor.")
  
    .value("kRearLeft", frc::RobotDriveBase::MotorType::kRearLeft,
      "Rear-left motor.")
  
    .value("kRearRight", frc::RobotDriveBase::MotorType::kRearRight,
      "Rear-right motor.")
  
    .value("kLeft", frc::RobotDriveBase::MotorType::kLeft,
      "Left motor.")
  
    .value("kRight", frc::RobotDriveBase::MotorType::kRight,
      "Right motor.")
  
    .value("kBack", frc::RobotDriveBase::MotorType::kBack,
      "Back motor.")
  ;

  

    
    
  }

void finish() {





  {
  
  
  using MotorType [[maybe_unused]] = typename frc::RobotDriveBase::MotorType;
  
  


  

  cls_RobotDriveBase.doc() =
    "Common base class for drive platforms.\n"
"\n"
"MotorSafety is enabled by default.";

  cls_RobotDriveBase
  
    
  .def(py::init<>(), release_gil()
  )
  
  
  
    
  .
def
("setDeadband", &frc::RobotDriveBase::SetDeadband,
      py::arg("deadband"), release_gil(), py::doc(
    "Sets the deadband applied to the drive inputs (e.g., joystick values).\n"
"\n"
"The default value is 0.02. Inputs smaller than the deadband are set to 0.0\n"
"while inputs larger than the deadband are scaled from 0.0 to 1.0. See\n"
"frc::ApplyDeadband().\n"
"\n"
":param deadband: The deadband to set.")
  )
  
  
  
    
  .
def
("setMaxOutput", &frc::RobotDriveBase::SetMaxOutput,
      py::arg("maxOutput"), release_gil(), py::doc(
    "Configure the scaling factor for using RobotDrive with motor controllers in\n"
"a mode other than PercentVbus or to limit the maximum output.\n"
"\n"
":param maxOutput: Multiplied with the output percentage computed by the\n"
"                  drive functions.")
  )
  
  
  
    
  .
def
("feedWatchdog", &frc::RobotDriveBase::FeedWatchdog, release_gil(), py::doc(
    "Feed the motor safety object. Resets the timer that will stop the motors if\n"
"it completes.\n"
"\n"
"@see MotorSafetyHelper::Feed()")
  )
  
  
  
    
  .
def
("stopMotor", &frc::RobotDriveBase::StopMotor, release_gil()
  )
  
  
  
    
  .
def
("getDescription", &frc::RobotDriveBase::GetDescription, release_gil()
  )
  
  
  
    
  .
def_static
("_desaturate", static_cast<void(*)(std::span<double>)>(&RobotDriveBase_Trampoline::Desaturate),
      py::arg("wheelSpeeds"), release_gil(), py::doc(
    "Renormalize all wheel speeds if the magnitude of any wheel is greater than\n"
"1.0.")
  )
  
  
  
    .def_readonly_static("_kDefaultDeadband", &rpygen::PyTrampoline_frc__RobotDriveBase<typename frc::RobotDriveBase, typename rpygen::PyTrampolineCfg_frc__RobotDriveBase<>>::kDefaultDeadband, py::doc(
    "Default input deadband."))
    .def_readonly_static("_kDefaultMaxOutput", &rpygen::PyTrampoline_frc__RobotDriveBase<typename frc::RobotDriveBase, typename rpygen::PyTrampolineCfg_frc__RobotDriveBase<>>::kDefaultMaxOutput, py::doc(
    "Default maximum output."))
    .def_readwrite("_m_deadband", &rpygen::PyTrampoline_frc__RobotDriveBase<typename frc::RobotDriveBase, typename rpygen::PyTrampolineCfg_frc__RobotDriveBase<>>::m_deadband, py::doc(
    "Input deadband."))
    .def_readwrite("_m_maxOutput", &rpygen::PyTrampoline_frc__RobotDriveBase<typename frc::RobotDriveBase, typename rpygen::PyTrampolineCfg_frc__RobotDriveBase<>>::m_maxOutput, py::doc(
    "Maximum output."));

  


  }






}

}; // struct rpybuild_RobotDriveBase_initializer

static std::unique_ptr<rpybuild_RobotDriveBase_initializer> cls;

void begin_init_RobotDriveBase(py::module &m) {
  cls = std::make_unique<rpybuild_RobotDriveBase_initializer>(m);
}

void finish_init_RobotDriveBase() {
  cls->finish();
  cls.reset();
}