
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/drive/MecanumDrive.h>


#include <pybind11/functional.h>

#include <units_angle_type_caster.h>







#define RPYGEN_ENABLE_frc__MecanumDrive_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__MecanumDrive.hpp>







#include <wpi/sendable/SendableBuilder.h>

#include <frc/motorcontrol/MotorController.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_MecanumDrive_initializer {


  

  












  
  using MecanumDrive_Trampoline = rpygen::PyTrampoline_frc__MecanumDrive<typename frc::MecanumDrive, typename rpygen::PyTrampolineCfg_frc__MecanumDrive<>>;
    static_assert(std::is_abstract<MecanumDrive_Trampoline>::value == false, "frc::MecanumDrive " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::MecanumDrive, MecanumDrive_Trampoline, frc::RobotDriveBase, wpi::Sendable> cls_MecanumDrive;

    

    
    
    py::class_<typename frc::MecanumDrive::WheelSpeeds> cls_WheelSpeeds;

    

    
    
    

  py::module &m;

  
  rpybuild_MecanumDrive_initializer(py::module &m) :

  

  

  

  
    cls_MecanumDrive(m, "MecanumDrive"),

  

  
  
    cls_WheelSpeeds(cls_MecanumDrive, "WheelSpeeds"),

  

  
  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  

    
    
  }

void finish() {





  {
  
  using WheelSpeeds [[maybe_unused]] = typename frc::MecanumDrive::WheelSpeeds;
  
  
  


  

  cls_MecanumDrive.doc() =
    "A class for driving Mecanum drive platforms.\n"
"\n"
"Mecanum drives are rectangular with one wheel on each corner. Each wheel has\n"
"rollers toed in 45 degrees toward the front or back. When looking at the\n"
"wheels from the top, the roller axles should form an X across the robot.\n"
"\n"
"Drive base diagram:\n"
"::\n"
"\n"
"  \\\\_______/\n"
"  \\\\ |   | /\n"
"    |   |\n"
"  /_|___|_\\\\\n"
"  /       \\\\\n"
"\n"
"Each Drive() function provides different inverse kinematic relations for a\n"
"Mecanum drive robot.\n"
"\n"
"This library uses the NWU axes convention (North-West-Up as external\n"
"reference in the world frame). The positive X axis points ahead, the positive\n"
"Y axis points to the left, and the positive Z axis points up. Rotations\n"
"follow the right-hand rule, so counterclockwise rotation around the Z axis is\n"
"positive.\n"
"\n"
"Note: the axis conventions used in this class differ from DifferentialDrive.\n"
"This may change in a future year's WPILib release.\n"
"\n"
"Inputs smaller then 0.02 will be set to 0, and larger values will be scaled\n"
"so that the full range is still used. This deadband value can be changed\n"
"with SetDeadband().\n"
"\n"
"MotorSafety is enabled by default. The DriveCartesian or DrivePolar\n"
"methods should be called periodically to avoid Motor Safety timeouts.";

  cls_MecanumDrive
  
    
  .def(py::init<MotorController&, MotorController&, MotorController&, MotorController&>(),
      py::arg("frontLeftMotor"), py::arg("rearLeftMotor"), py::arg("frontRightMotor"), py::arg("rearRightMotor"), release_gil()
    , py::keep_alive<1, 2>()
    , py::keep_alive<1, 3>()
    , py::keep_alive<1, 4>()
    , py::keep_alive<1, 5>(), py::doc(
    "Construct a MecanumDrive.\n"
"\n"
"If a motor needs to be inverted, do so before passing it in.\n"
"\n"
":param frontLeftMotor:  Front-left motor.\n"
":param rearLeftMotor:   Rear-left motor.\n"
":param frontRightMotor: Front-right motor.\n"
":param rearRightMotor:  Rear-right motor.")
  )
  
  
  
    
  .def(py::init<std::function<void (double)>, std::function<void (double)>, std::function<void (double)>, std::function<void (double)>>(),
      py::arg("frontLeftMotor").none(false), py::arg("rearLeftMotor").none(false), py::arg("frontRightMotor").none(false), py::arg("rearRightMotor").none(false), release_gil()
    , py::keep_alive<1, 2>()
    , py::keep_alive<1, 3>()
    , py::keep_alive<1, 4>()
    , py::keep_alive<1, 5>(), py::doc(
    "Construct a MecanumDrive.\n"
"\n"
"If a motor needs to be inverted, do so before passing it in.\n"
"\n"
":param frontLeftMotor:  Front-left motor setter.\n"
":param rearLeftMotor:   Rear-left motor setter.\n"
":param frontRightMotor: Front-right motor setter.\n"
":param rearRightMotor:  Rear-right motor setter.")
  )
  
  
  
    
  .
def
("driveCartesian", &frc::MecanumDrive::DriveCartesian,
      py::arg("xSpeed"), py::arg("ySpeed"), py::arg("zRotation"), py::arg("gyroAngle") = frc::Rotation2d(0_rad), release_gil(), py::doc(
    "Drive method for Mecanum platform.\n"
"\n"
"Angles are measured counterclockwise from the positive X axis. The robot's\n"
"speed is independent from its angle or rotation rate.\n"
"\n"
":param xSpeed:    The robot's speed along the X axis [-1.0..1.0]. Forward is\n"
"                  positive.\n"
":param ySpeed:    The robot's speed along the Y axis [-1.0..1.0]. Left is\n"
"                  positive.\n"
":param zRotation: The robot's rotation rate around the Z axis [-1.0..1.0].\n"
"                  Counterclockwise is positive.\n"
":param gyroAngle: The gyro heading around the Z axis. Use this to implement\n"
"                  field-oriented controls.")
  )
  
  
  
    
  .
def
("drivePolar", &frc::MecanumDrive::DrivePolar,
      py::arg("magnitude"), py::arg("angle"), py::arg("zRotation"), release_gil(), py::doc(
    "Drive method for Mecanum platform.\n"
"\n"
"Angles are measured counterclockwise from the positive X axis. The robot's\n"
"speed is independent from its angle or rotation rate.\n"
"\n"
":param magnitude: The robot's speed at a given angle [-1.0..1.0]. Forward is\n"
"                  positive.\n"
":param angle:     The angle around the Z axis at which the robot drives.\n"
":param zRotation: The robot's rotation rate around the Z axis [-1.0..1.0].\n"
"                  Counterclockwise is positive.")
  )
  
  
  
    
  .
def_static
("driveCartesianIK", &frc::MecanumDrive::DriveCartesianIK,
      py::arg("xSpeed"), py::arg("ySpeed"), py::arg("zRotation"), py::arg("gyroAngle") = frc::Rotation2d(0_rad), release_gil(), py::doc(
    "Cartesian inverse kinematics for Mecanum platform.\n"
"\n"
"Angles are measured counterclockwise from the positive X axis. The robot's\n"
"speed is independent from its angle or rotation rate.\n"
"\n"
":param xSpeed:    The robot's speed along the X axis [-1.0..1.0]. Forward is\n"
"                  positive.\n"
":param ySpeed:    The robot's speed along the Y axis [-1.0..1.0]. Left is\n"
"                  positive.\n"
":param zRotation: The robot's rotation rate around the Z axis [-1.0..1.0].\n"
"                  Counterclockwise is positive.\n"
":param gyroAngle: The gyro heading around the Z axis. Use this to implement\n"
"                  field-oriented controls.\n"
"\n"
":returns: Wheel speeds [-1.0..1.0].")
  )
  
  
  
    
  .
def
("stopMotor", &frc::MecanumDrive::StopMotor, release_gil()
  )
  
  
  
    
  .
def
("getDescription", &frc::MecanumDrive::GetDescription, release_gil()
  )
  
  
  
    
  .
def
("initSendable", &frc::MecanumDrive::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  

  cls_WheelSpeeds.doc() =
    "Wheel speeds for a mecanum drive.\n"
"\n"
"Uses normalized voltage [-1.0..1.0].";

  cls_WheelSpeeds
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("frontLeft", &frc::MecanumDrive::WheelSpeeds::frontLeft, py::doc(
    "Front-left wheel speed."))
  
    .def_readwrite("frontRight", &frc::MecanumDrive::WheelSpeeds::frontRight, py::doc(
    "Front-right wheel speed."))
  
    .def_readwrite("rearLeft", &frc::MecanumDrive::WheelSpeeds::rearLeft, py::doc(
    "Rear-left wheel speed."))
  
    .def_readwrite("rearRight", &frc::MecanumDrive::WheelSpeeds::rearRight, py::doc(
    "Rear-right wheel speed."))
  ;

  


  
  }






}

}; // struct rpybuild_MecanumDrive_initializer

static std::unique_ptr<rpybuild_MecanumDrive_initializer> cls;

void begin_init_MecanumDrive(py::module &m) {
  cls = std::make_unique<rpybuild_MecanumDrive_initializer>(m);
}

void finish_init_MecanumDrive() {
  cls->finish();
  cls.reset();
}