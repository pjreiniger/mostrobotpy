
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/PWMTalonFX.h>








#define RPYGEN_ENABLE_frc__PWMTalonFX_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__PWMTalonFX.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_PWMTalonFX_initializer {


  

  












  
  using PWMTalonFX_Trampoline = rpygen::PyTrampoline_frc__PWMTalonFX<typename frc::PWMTalonFX, typename rpygen::PyTrampolineCfg_frc__PWMTalonFX<>>;
    static_assert(std::is_abstract<PWMTalonFX_Trampoline>::value == false, "frc::PWMTalonFX " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::PWMTalonFX, PWMTalonFX_Trampoline, frc::PWMMotorController> cls_PWMTalonFX;

    

    
    

  py::module &m;

  
  rpybuild_PWMTalonFX_initializer(py::module &m) :

  

  

  

  
    cls_PWMTalonFX(m, "PWMTalonFX"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_PWMTalonFX.doc() =
    "Cross the Road Electronics (CTRE) Talon FX Motor Controller with PWM control.\n"
"\n"
"Note that the Talon FX uses the following bounds for PWM values. These\n"
"values should work reasonably well for most controllers, but if users\n"
"experience issues such as asymmetric behavior around the deadband or\n"
"inability to saturate the controller in either direction, calibration is\n"
"recommended. The calibration procedure can be found in the Talon FX User\n"
"Manual available from Cross the Road Electronics (CTRE).\n"
"\n"
"- 2.004ms = full \"forward\"\n"
"- 1.520ms = the \"high end\" of the deadband range\n"
"- 1.500ms = center of the deadband range (off)\n"
"- 1.480ms = the \"low end\" of the deadband range\n"
"- 0.997ms = full \"reverse\"";

  cls_PWMTalonFX
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructor for a Talon FX connected via PWM.\n"
"\n"
":param channel: The PWM channel that the Talon FX is attached to. 0-9 are\n"
"                on-board, 10-19 are on the MXP port")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_PWMTalonFX_initializer

static std::unique_ptr<rpybuild_PWMTalonFX_initializer> cls;

void begin_init_PWMTalonFX(py::module &m) {
  cls = std::make_unique<rpybuild_PWMTalonFX_initializer>(m);
}

void finish_init_PWMTalonFX() {
  cls->finish();
  cls.reset();
}