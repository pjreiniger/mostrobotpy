
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/DataLogManager.h>














#include <wpi/DataLog.h>



#include <type_traits>


  using namespace wpi::log;

  using namespace frc;





struct rpybuild_DataLogManager_initializer {


  

  












  py::class_<typename frc::DataLogManager> cls_DataLogManager;

    

    
    

  py::module &m;

  
  rpybuild_DataLogManager_initializer(py::module &m) :

  

  

  

  
    cls_DataLogManager(m, "DataLogManager", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DataLogManager.doc() =
    "Centralized data log that provides automatic data log file management. It\n"
"automatically cleans up old files when disk space is low and renames the file\n"
"based either on current date/time or (if available) competition match number.\n"
"The data file will be saved to a USB flash drive in a folder named \"logs\" if\n"
"one is attached, or to /home/lvuser/logs otherwise.\n"
"\n"
"Log files are initially named \"FRC_TBD\\_{random}.wpilog\" until the DS\n"
"connects. After the DS connects, the log file is renamed to\n"
"\"FRC_yyyyMMdd_HHmmss.wpilog\" (where the date/time is UTC). If the FMS is\n"
"connected and provides a match number, the log file is renamed to\n"
"\"FRC_yyyyMMdd_HHmmss\\_{event}_{match}.wpilog\".\n"
"\n"
"On startup, all existing FRC_TBD log files are deleted. If there is less than\n"
"50 MB of free space on the target storage, FRC\\_ log files are deleted (oldest\n"
"to newest) until there is 50 MB free OR there are 10 files remaining.\n"
"\n"
"By default, all NetworkTables value changes are stored to the data log.";

  cls_DataLogManager
  
    
  .
def_static
("start", &frc::DataLogManager::Start,
      py::arg("dir") = "", py::arg("filename") = "", py::arg("period") = 0.25, release_gil(), py::doc(
    "Start data log manager. The parameters have no effect if the data log\n"
"manager was already started (e.g. by calling another static function).\n"
"\n"
":param dir:      if not empty, directory to use for data log storage\n"
":param filename: filename to use; if none provided, the filename is\n"
"                 automatically generated\n"
":param period:   time between automatic flushes to disk, in seconds;\n"
"                 this is a time/storage tradeoff")
  )
  
  
  
    
  .
def_static
("stop", &frc::DataLogManager::Stop, release_gil(), py::doc(
    "Stop data log manager.")
  )
  
  
  
    
  .
def_static
("log", &frc::DataLogManager::Log,
      py::arg("message"), release_gil(), py::doc(
    "Log a message to the \"messages\" entry. The message is also printed to\n"
"standard output (followed by a newline).\n"
"\n"
":param message: message")
  )
  
  
  
    
  .
def_static
("getLog", &frc::DataLogManager::GetLog, release_gil(), py::return_value_policy::reference, py::doc(
    "Get the managed data log (for custom logging). Starts the data log manager\n"
"if not already started.\n"
"\n"
":returns: data log")
  )
  
  
  
    
  .
def_static
("getLogDir", &frc::DataLogManager::GetLogDir, release_gil(), py::doc(
    "Get the log directory.\n"
"\n"
":returns: log directory")
  )
  
  
  
    
  .
def_static
("logNetworkTables", &frc::DataLogManager::LogNetworkTables,
      py::arg("enabled"), release_gil(), py::doc(
    "Enable or disable logging of NetworkTables data. Note that unlike the\n"
"network interface for NetworkTables, this will capture every value change.\n"
"Defaults to enabled.\n"
"\n"
":param enabled: true to enable, false to disable")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DataLogManager_initializer

static std::unique_ptr<rpybuild_DataLogManager_initializer> cls;

void begin_init_DataLogManager(py::module &m) {
  cls = std::make_unique<rpybuild_DataLogManager_initializer>(m);
}

void finish_init_DataLogManager() {
  cls->finish();
  cls.reset();
}