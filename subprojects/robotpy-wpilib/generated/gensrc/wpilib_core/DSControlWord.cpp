
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/DSControlWord.h>
















#include <type_traits>


  using namespace frc;



struct rpybuild_DSControlWord_initializer {


  

  












  py::class_<typename frc::DSControlWord> cls_DSControlWord;

    

    
    

  py::module &m;

  
  rpybuild_DSControlWord_initializer(py::module &m) :

  

  

  

  
    cls_DSControlWord(m, "DSControlWord"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DSControlWord.doc() =
    "A wrapper around Driver Station control word.";

  cls_DSControlWord
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "DSControlWord constructor.\n"
"\n"
"Upon construction, the current Driver Station control word is read and\n"
"stored internally.")
  )
  
  
  
    
  .
def
("isEnabled", &frc::DSControlWord::IsEnabled, py::doc(
    "Check if the DS has enabled the robot.\n"
"\n"
":returns: True if the robot is enabled and the DS is connected")
  )
  
  
  
    
  .
def
("isDisabled", &frc::DSControlWord::IsDisabled, py::doc(
    "Check if the robot is disabled.\n"
"\n"
":returns: True if the robot is explicitly disabled or the DS is not connected")
  )
  
  
  
    
  .
def
("isEStopped", &frc::DSControlWord::IsEStopped, py::doc(
    "Check if the robot is e-stopped.\n"
"\n"
":returns: True if the robot is e-stopped")
  )
  
  
  
    
  .
def
("isAutonomous", &frc::DSControlWord::IsAutonomous, py::doc(
    "Check if the DS is commanding autonomous mode.\n"
"\n"
":returns: True if the robot is being commanded to be in autonomous mode")
  )
  
  
  
    
  .
def
("isAutonomousEnabled", &frc::DSControlWord::IsAutonomousEnabled, py::doc(
    "Check if the DS is commanding autonomous mode and if it has enabled the\n"
"robot.\n"
"\n"
":returns: True if the robot is being commanded to be in autonomous mode and\n"
"          enabled.")
  )
  
  
  
    
  .
def
("isTeleop", &frc::DSControlWord::IsTeleop, py::doc(
    "Check if the DS is commanding teleop mode.\n"
"\n"
":returns: True if the robot is being commanded to be in teleop mode")
  )
  
  
  
    
  .
def
("isTeleopEnabled", &frc::DSControlWord::IsTeleopEnabled, py::doc(
    "Check if the DS is commanding teleop mode and if it has enabled the robot.\n"
"\n"
":returns: True if the robot is being commanded to be in teleop mode and\n"
"          enabled.")
  )
  
  
  
    
  .
def
("isTest", &frc::DSControlWord::IsTest, py::doc(
    "Check if the DS is commanding test mode.\n"
"\n"
":returns: True if the robot is being commanded to be in test mode")
  )
  
  
  
    
  .
def
("isDSAttached", &frc::DSControlWord::IsDSAttached, py::doc(
    "Check if the DS is attached.\n"
"\n"
":returns: True if the DS is connected to the robot")
  )
  
  
  
    
  .
def
("isFMSAttached", &frc::DSControlWord::IsFMSAttached, py::doc(
    "Is the driver station attached to a Field Management System?\n"
"\n"
":returns: True if the robot is competing on a field being controlled by a\n"
"          Field Management System")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DSControlWord_initializer

static std::unique_ptr<rpybuild_DSControlWord_initializer> cls;

void begin_init_DSControlWord(py::module &m) {
  cls = std::make_unique<rpybuild_DSControlWord_initializer>(m);
}

void finish_init_DSControlWord() {
  cls->finish();
  cls.reset();
}