
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/Solenoid.h>


#include <units_time_type_caster.h>







#define RPYGEN_ENABLE_frc__Solenoid_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__Solenoid.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_Solenoid_initializer {


  

  












  
  using Solenoid_Trampoline = rpygen::PyTrampoline_frc__Solenoid<typename frc::Solenoid, typename rpygen::PyTrampolineCfg_frc__Solenoid<>>;
    static_assert(std::is_abstract<Solenoid_Trampoline>::value == false, "frc::Solenoid " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::Solenoid, Solenoid_Trampoline, wpi::Sendable> cls_Solenoid;

    

    
    

  py::module &m;

  
  rpybuild_Solenoid_initializer(py::module &m) :

  

  

  

  
    cls_Solenoid(m, "Solenoid"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_Solenoid.doc() =
    "Solenoid class for running high voltage Digital Output on a pneumatics\n"
"module.\n"
"\n"
"The Solenoid class is typically used for pneumatics solenoids, but could be\n"
"used for any device within the current spec of the module.";

  cls_Solenoid
  
    
  .def(py::init<int, PneumaticsModuleType, int>(),
      py::arg("module"), py::arg("moduleType"), py::arg("channel"), release_gil(), py::doc(
    "Constructs a solenoid for a specified module and type.\n"
"\n"
":param module:     The module ID to use.\n"
":param moduleType: The module type to use.\n"
":param channel:    The channel the solenoid is on.")
  )
  
  
  
    
  .def(py::init<PneumaticsModuleType, int>(),
      py::arg("moduleType"), py::arg("channel"), release_gil(), py::doc(
    "Constructs a solenoid for a default module and specified type.\n"
"\n"
":param moduleType: The module type to use.\n"
":param channel:    The channel the solenoid is on.")
  )
  
  
  
    
  .
def
("set", &frc::Solenoid::Set,
      py::arg("on"), release_gil(), py::doc(
    "Set the value of a solenoid.\n"
"\n"
":param on: Turn the solenoid output off or on.")
  )
  
  
  
    
  .
def
("get", &frc::Solenoid::Get, release_gil(), py::doc(
    "Read the current value of the solenoid.\n"
"\n"
":returns: The current value of the solenoid.")
  )
  
  
  
    
  .
def
("toggle", &frc::Solenoid::Toggle, release_gil(), py::doc(
    "Toggle the value of the solenoid.\n"
"\n"
"If the solenoid is set to on, it'll be turned off. If the solenoid is set\n"
"to off, it'll be turned on.")
  )
  
  
  
    
  .
def
("getChannel", &frc::Solenoid::GetChannel, release_gil(), py::doc(
    "Get the channel this solenoid is connected to.")
  )
  
  
  
    
  .
def
("isDisabled", &frc::Solenoid::IsDisabled, release_gil(), py::doc(
    "Check if solenoid is Disabled.\n"
"\n"
"If a solenoid is shorted, it is added to the DisabledList and\n"
"disabled until power cycle, or until faults are cleared.\n"
"\n"
"@see ClearAllPCMStickyFaults()\n"
"\n"
":returns: If solenoid is disabled due to short.")
  )
  
  
  
    
  .
def
("setPulseDuration", &frc::Solenoid::SetPulseDuration,
      py::arg("duration"), release_gil(), py::doc(
    "Set the pulse duration in the pneumatics module. This is used in\n"
"conjunction with the startPulse method to allow the pneumatics module to\n"
"control the timing of a pulse.\n"
"\n"
"On the PCM, the timing can be controlled in 0.01 second increments, with a\n"
"maximum of 2.55 seconds. On the PH, the timing can be controlled in 0.001\n"
"second increments, with a maximum of 65.534 seconds.\n"
"\n"
"@see startPulse()\n"
"\n"
":param duration: The duration of the pulse.")
  )
  
  
  
    
  .
def
("startPulse", &frc::Solenoid::StartPulse, release_gil(), py::doc(
    "%Trigger the pneumatics module to generate a pulse of the duration set in\n"
"setPulseDuration.\n"
"\n"
"@see setPulseDuration()")
  )
  
  
  
    
  .
def
("initSendable", &frc::Solenoid::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_Solenoid_initializer

static std::unique_ptr<rpybuild_Solenoid_initializer> cls;

void begin_init_Solenoid(py::module &m) {
  cls = std::make_unique<rpybuild_Solenoid_initializer>(m);
}

void finish_init_Solenoid() {
  cls->finish();
  cls.reset();
}