
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/DoubleSolenoid.h>








#define RPYGEN_ENABLE_frc__DoubleSolenoid_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__DoubleSolenoid.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_DoubleSolenoid_initializer {


  

  












  
  using DoubleSolenoid_Trampoline = rpygen::PyTrampoline_frc__DoubleSolenoid<typename frc::DoubleSolenoid, typename rpygen::PyTrampolineCfg_frc__DoubleSolenoid<>>;
    static_assert(std::is_abstract<DoubleSolenoid_Trampoline>::value == false, "frc::DoubleSolenoid " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::DoubleSolenoid, DoubleSolenoid_Trampoline, wpi::Sendable> cls_DoubleSolenoid;

    
    
  py::enum_<frc::DoubleSolenoid::Value> cls_DoubleSolenoid_enum1;
    

    
    

  py::module &m;

  
  rpybuild_DoubleSolenoid_initializer(py::module &m) :

  

  

  

  
    cls_DoubleSolenoid(m, "DoubleSolenoid"),

  
    cls_DoubleSolenoid_enum1
  (cls_DoubleSolenoid, "Value"
  ,
    "Possible values for a DoubleSolenoid."),
  

  
  
  

    m(m)
  {
    
    

    
    
  
    cls_DoubleSolenoid_enum1
  
    .value("kOff", frc::DoubleSolenoid::Value::kOff,
      "Off position.")
  
    .value("kForward", frc::DoubleSolenoid::Value::kForward,
      "Forward position.")
  
    .value("kReverse", frc::DoubleSolenoid::Value::kReverse,
      "Reverse position.")
  ;

  

    
    
  }

void finish() {





  {
  
  
  using Value [[maybe_unused]] = typename frc::DoubleSolenoid::Value;
  
  


  

  cls_DoubleSolenoid.doc() =
    "DoubleSolenoid class for running 2 channels of high voltage Digital Output\n"
"on a pneumatics module.\n"
"\n"
"The DoubleSolenoid class is typically used for pneumatics solenoids that\n"
"have two positions controlled by two separate channels.";

  cls_DoubleSolenoid
  
    
  .def(py::init<int, PneumaticsModuleType, int, int>(),
      py::arg("module"), py::arg("moduleType"), py::arg("forwardChannel"), py::arg("reverseChannel"), release_gil(), py::doc(
    "Constructs a double solenoid for a specified module of a specific module\n"
"type.\n"
"\n"
":param module:         The module of the solenoid module to use.\n"
":param moduleType:     The module type to use.\n"
":param forwardChannel: The forward channel on the module to control.\n"
":param reverseChannel: The reverse channel on the module to control.")
  )
  
  
  
    
  .def(py::init<PneumaticsModuleType, int, int>(),
      py::arg("moduleType"), py::arg("forwardChannel"), py::arg("reverseChannel"), release_gil(), py::doc(
    "Constructs a double solenoid for a default module of a specific module\n"
"type.\n"
"\n"
":param moduleType:     The module type to use.\n"
":param forwardChannel: The forward channel on the module to control.\n"
":param reverseChannel: The reverse channel on the module to control.")
  )
  
  
  
    
  .
def
("set", &frc::DoubleSolenoid::Set,
      py::arg("value"), release_gil(), py::doc(
    "Set the value of a solenoid.\n"
"\n"
":param value: The value to set (Off, Forward or Reverse)")
  )
  
  
  
    
  .
def
("get", &frc::DoubleSolenoid::Get, release_gil(), py::doc(
    "Read the current value of the solenoid.\n"
"\n"
":returns: The current value of the solenoid.")
  )
  
  
  
    
  .
def
("toggle", &frc::DoubleSolenoid::Toggle, release_gil(), py::doc(
    "Toggle the value of the solenoid.\n"
"\n"
"If the solenoid is set to forward, it'll be set to reverse. If the solenoid\n"
"is set to reverse, it'll be set to forward. If the solenoid is set to off,\n"
"nothing happens.")
  )
  
  
  
    
  .
def
("getFwdChannel", &frc::DoubleSolenoid::GetFwdChannel, release_gil(), py::doc(
    "Get the forward channel.\n"
"\n"
":returns: the forward channel.")
  )
  
  
  
    
  .
def
("getRevChannel", &frc::DoubleSolenoid::GetRevChannel, release_gil(), py::doc(
    "Get the reverse channel.\n"
"\n"
":returns: the reverse channel.")
  )
  
  
  
    
  .
def
("isFwdSolenoidDisabled", &frc::DoubleSolenoid::IsFwdSolenoidDisabled, release_gil(), py::doc(
    "Check if the forward solenoid is Disabled.\n"
"\n"
"If a solenoid is shorted, it is added to the DisabledList and disabled\n"
"until power cycle, or until faults are cleared.\n"
"\n"
"@see ClearAllStickyFaults()\n"
"\n"
":returns: If solenoid is disabled due to short.")
  )
  
  
  
    
  .
def
("isRevSolenoidDisabled", &frc::DoubleSolenoid::IsRevSolenoidDisabled, release_gil(), py::doc(
    "Check if the reverse solenoid is Disabled.\n"
"\n"
"If a solenoid is shorted, it is added to the DisabledList and disabled\n"
"until power cycle, or until faults are cleared.\n"
"\n"
"@see ClearAllStickyFaults()\n"
"\n"
":returns: If solenoid is disabled due to short.")
  )
  
  
  
    
  .
def
("initSendable", &frc::DoubleSolenoid::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DoubleSolenoid_initializer

static std::unique_ptr<rpybuild_DoubleSolenoid_initializer> cls;

void begin_init_DoubleSolenoid(py::module &m) {
  cls = std::make_unique<rpybuild_DoubleSolenoid_initializer>(m);
}

void finish_init_DoubleSolenoid() {
  cls->finish();
  cls.reset();
}