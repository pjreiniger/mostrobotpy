
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/PneumaticHub.h>


#include <units_current_type_caster.h>

#include <units_pressure_type_caster.h>

#include <units_time_type_caster.h>

#include <units_voltage_type_caster.h>







#define RPYGEN_ENABLE_frc__PneumaticHub_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__PneumaticHub.hpp>







#include <wpi/sendable/SendableBuilder.h>

#include <frc/Compressor.h>

#include <frc/Solenoid.h>

#include <frc/DoubleSolenoid.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_PneumaticHub_initializer {


  

  












  
  using PneumaticHub_Trampoline = rpygen::PyTrampoline_frc__PneumaticHub<typename frc::PneumaticHub, typename rpygen::PyTrampolineCfg_frc__PneumaticHub<>>;
    static_assert(std::is_abstract<PneumaticHub_Trampoline>::value == false, "frc::PneumaticHub " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::PneumaticHub, PneumaticHub_Trampoline, frc::PneumaticsBase> cls_PneumaticHub;

    

    
    
    py::class_<typename frc::PneumaticHub::Version> cls_Version;

    

    
    
    
    py::class_<typename frc::PneumaticHub::Faults> cls_Faults;

    

    
    
    
    py::class_<typename frc::PneumaticHub::StickyFaults> cls_StickyFaults;

    

    
    
    

  py::module &m;

  
  rpybuild_PneumaticHub_initializer(py::module &m) :

  

  

  

  
    cls_PneumaticHub(m, "PneumaticHub"),

  

  
  
    cls_Version(cls_PneumaticHub, "Version"),

  

  
  
  
    cls_Faults(cls_PneumaticHub, "Faults"),

  

  
  
  
    cls_StickyFaults(cls_PneumaticHub, "StickyFaults"),

  

  
  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  

    
    
  

    
    
  

    
    
  }

void finish() {





  {
  
  using Version [[maybe_unused]] = typename frc::PneumaticHub::Version;
  
  using Faults [[maybe_unused]] = typename frc::PneumaticHub::Faults;
  
  using StickyFaults [[maybe_unused]] = typename frc::PneumaticHub::StickyFaults;
  
  
  


  

  cls_PneumaticHub.doc() =
    "Module class for controlling a REV Robotics Pneumatic Hub.";

  cls_PneumaticHub
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "Constructs a PneumaticHub with the default ID (1).")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("module"), release_gil(), py::doc(
    "Constructs a PneumaticHub.\n"
"\n"
":param module: module number to construct")
  )
  
  
  
    
  .
def
("getCompressor", &frc::PneumaticHub::GetCompressor, release_gil()
  )
  
  
  
    
  .
def
("disableCompressor", &frc::PneumaticHub::DisableCompressor, release_gil(), py::doc(
    "Disables the compressor. The compressor will not turn on until\n"
"EnableCompressorDigital(), EnableCompressorAnalog(), or\n"
"EnableCompressorHybrid() are called.")
  )
  
  
  
    
  .
def
("enableCompressorDigital", &frc::PneumaticHub::EnableCompressorDigital, release_gil()
  )
  
  
  
    
  .
def
("enableCompressorAnalog", &frc::PneumaticHub::EnableCompressorAnalog,
      py::arg("minPressure"), py::arg("maxPressure"), release_gil(), py::doc(
    "Enables the compressor in analog mode. This mode uses an analog pressure\n"
"sensor connected to analog channel 0 to cycle the compressor. The\n"
"compressor will turn on when the pressure drops below ``minPressure``\n"
"and will turn off when the pressure reaches ``maxPressure``.\n"
"\n"
":param minPressure: The minimum pressure. The compressor will turn on when\n"
"                    the pressure drops below this value. Range 0 - 120 PSI.\n"
":param maxPressure: The maximum pressure. The compressor will turn off when\n"
"                    the pressure reaches this value. Range 0 - 120 PSI. Must be larger then\n"
"                    minPressure.")
  )
  
  
  
    
  .
def
("enableCompressorHybrid", &frc::PneumaticHub::EnableCompressorHybrid,
      py::arg("minPressure"), py::arg("maxPressure"), release_gil(), py::doc(
    "Enables the compressor in hybrid mode. This mode uses both a digital\n"
"pressure switch and an analog pressure sensor connected to analog channel 0\n"
"to cycle the compressor.\n"
"\n"
"The compressor will turn on when \\a both:\n"
"\n"
"- The digital pressure switch indicates the system is not full AND\n"
"- The analog pressure sensor indicates that the pressure in the system is\n"
"below the specified minimum pressure.\n"
"\n"
"The compressor will turn off when \\a either:\n"
"\n"
"- The digital pressure switch is disconnected or indicates that the system\n"
"is full OR\n"
"- The pressure detected by the analog sensor is greater than the specified\n"
"maximum pressure.\n"
"\n"
":param minPressure: The minimum pressure. The compressor will turn on when\n"
"                    the pressure drops below this value and the pressure switch indicates that\n"
"                    the system is not full.  Range 0 - 120 PSI.\n"
":param maxPressure: The maximum pressure. The compressor will turn off when\n"
"                    the pressure reaches this value or the pressure switch is disconnected or\n"
"                    indicates that the system is full. Range 0 - 120 PSI. Must be larger then\n"
"                    minPressure.")
  )
  
  
  
    
  .
def
("getCompressorConfigType", &frc::PneumaticHub::GetCompressorConfigType, release_gil()
  )
  
  
  
    
  .
def
("getPressureSwitch", &frc::PneumaticHub::GetPressureSwitch, release_gil()
  )
  
  
  
    
  .
def
("getCompressorCurrent", &frc::PneumaticHub::GetCompressorCurrent, release_gil()
  )
  
  
  
    
  .
def
("setSolenoids", &frc::PneumaticHub::SetSolenoids,
      py::arg("mask"), py::arg("values"), release_gil()
  )
  
  
  
    
  .
def
("getSolenoids", &frc::PneumaticHub::GetSolenoids, release_gil()
  )
  
  
  
    
  .
def
("getModuleNumber", &frc::PneumaticHub::GetModuleNumber, release_gil()
  )
  
  
  
    
  .
def
("getSolenoidDisabledList", &frc::PneumaticHub::GetSolenoidDisabledList, release_gil()
  )
  
  
  
    
  .
def
("fireOneShot", &frc::PneumaticHub::FireOneShot,
      py::arg("index"), release_gil()
  )
  
  
  
    
  .
def
("setOneShotDuration", &frc::PneumaticHub::SetOneShotDuration,
      py::arg("index"), py::arg("duration"), release_gil()
  )
  
  
  
    
  .
def
("checkSolenoidChannel", &frc::PneumaticHub::CheckSolenoidChannel,
      py::arg("channel"), release_gil()
  )
  
  
  
    
  .
def
("checkAndReserveSolenoids", &frc::PneumaticHub::CheckAndReserveSolenoids,
      py::arg("mask"), release_gil()
  )
  
  
  
    
  .
def
("unreserveSolenoids", &frc::PneumaticHub::UnreserveSolenoids,
      py::arg("mask"), release_gil()
  )
  
  
  
    
  .
def
("reserveCompressor", &frc::PneumaticHub::ReserveCompressor, release_gil()
  )
  
  
  
    
  .
def
("unreserveCompressor", &frc::PneumaticHub::UnreserveCompressor, release_gil()
  )
  
  
  
    
  .
def
("makeSolenoid", &frc::PneumaticHub::MakeSolenoid,
      py::arg("channel"), release_gil()
  )
  
  
  
    
  .
def
("makeDoubleSolenoid", &frc::PneumaticHub::MakeDoubleSolenoid,
      py::arg("forwardChannel"), py::arg("reverseChannel"), release_gil()
  )
  
  
  
    
  .
def
("makeCompressor", &frc::PneumaticHub::MakeCompressor, release_gil()
  )
  
  
  
    
  .
def
("getVersion", &frc::PneumaticHub::GetVersion, release_gil(), py::doc(
    "Returns the hardware and firmware versions of this device.\n"
"\n"
":returns: The hardware and firmware versions.")
  )
  
  
  
    
  .
def
("getFaults", &frc::PneumaticHub::GetFaults, release_gil(), py::doc(
    "Returns the faults currently active on this device.\n"
"\n"
":returns: The faults.")
  )
  
  
  
    
  .
def
("getStickyFaults", &frc::PneumaticHub::GetStickyFaults, release_gil(), py::doc(
    "Returns the sticky faults currently active on this device.\n"
"\n"
":returns: The sticky faults.")
  )
  
  
  
    
  .
def
("clearStickyFaults", &frc::PneumaticHub::ClearStickyFaults, release_gil(), py::doc(
    "Clears the sticky faults.")
  )
  
  
  
    
  .
def
("getInputVoltage", &frc::PneumaticHub::GetInputVoltage, release_gil(), py::doc(
    "Returns the current input voltage for this device.\n"
"\n"
":returns: The input voltage.")
  )
  
  
  
    
  .
def
("get5VRegulatedVoltage", &frc::PneumaticHub::Get5VRegulatedVoltage, release_gil(), py::doc(
    "Returns the current voltage of the regulated 5v supply.\n"
"\n"
":returns: The current voltage of the 5v supply.")
  )
  
  
  
    
  .
def
("getSolenoidsTotalCurrent", &frc::PneumaticHub::GetSolenoidsTotalCurrent, release_gil(), py::doc(
    "Returns the total current drawn by all solenoids.\n"
"\n"
":returns: Total current drawn by all solenoids.")
  )
  
  
  
    
  .
def
("getSolenoidsVoltage", &frc::PneumaticHub::GetSolenoidsVoltage, release_gil(), py::doc(
    "Returns the current voltage of the solenoid power supply.\n"
"\n"
":returns: The current voltage of the solenoid power supply.")
  )
  
  
  
    
  .
def
("getAnalogVoltage", &frc::PneumaticHub::GetAnalogVoltage,
      py::arg("channel"), release_gil(), py::doc(
    "Returns the raw voltage of the specified analog input channel.\n"
"\n"
":param channel: The analog input channel to read voltage from.\n"
"\n"
":returns: The voltage of the specified analog input channel.")
  )
  
  
  
    
  .
def
("getPressure", &frc::PneumaticHub::GetPressure,
      py::arg("channel"), release_gil(), py::doc(
    "Returns the pressure read by an analog pressure sensor on the specified\n"
"analog input channel.\n"
"\n"
":param channel: The analog input channel to read pressure from.\n"
"\n"
":returns: The pressure read by an analog pressure sensor on the specified\n"
"          analog input channel.")
  )
  
  
  ;

  


  

  cls_Version.doc() =
    "Version and device data received from a REV PH.";

  cls_Version
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("FirmwareMajor", &frc::PneumaticHub::Version::FirmwareMajor, py::doc(
    "The firmware major version."))
  
    .def_readwrite("FirmwareMinor", &frc::PneumaticHub::Version::FirmwareMinor, py::doc(
    "The firmware minor version."))
  
    .def_readwrite("FirmwareFix", &frc::PneumaticHub::Version::FirmwareFix, py::doc(
    "The firmware fix version."))
  
    .def_readwrite("HardwareMinor", &frc::PneumaticHub::Version::HardwareMinor, py::doc(
    "The hardware minor version."))
  
    .def_readwrite("HardwareMajor", &frc::PneumaticHub::Version::HardwareMajor, py::doc(
    "The hardware major version."))
  
    .def_readwrite("UniqueId", &frc::PneumaticHub::Version::UniqueId, py::doc(
    "The device's unique ID."))
  ;

  


  
  

  cls_Faults.doc() =
    "Faults for a REV PH. These faults are only active while the condition is\n"
"active.";

  cls_Faults
  
    .def(py::init<>(), release_gil())
  
    
  .
def
("getChannelFault", &frc::PneumaticHub::Faults::GetChannelFault,
      py::arg("channel"), release_gil(), py::doc(
    "Gets whether there is a fault at the specified channel.\n"
"\n"
":param channel: Channel to check for faults.\n"
"\n"
":returns: True if a a fault exists at the channel, otherwise false.\n"
"          @throws A ChannelIndexOutOfRange error if the provided channel is outside\n"
"          of the range supported by the hardware.")
  )
  
  
  
    .def_property("Channel0Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel0Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel0Fault = v; }, py::doc(
    "Fault on channel 0.")
    )
  
    .def_property("Channel1Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel1Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel1Fault = v; }, py::doc(
    "Fault on channel 1.")
    )
  
    .def_property("Channel2Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel2Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel2Fault = v; }, py::doc(
    "Fault on channel 2.")
    )
  
    .def_property("Channel3Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel3Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel3Fault = v; }, py::doc(
    "Fault on channel 3.")
    )
  
    .def_property("Channel4Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel4Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel4Fault = v; }, py::doc(
    "Fault on channel 4.")
    )
  
    .def_property("Channel5Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel5Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel5Fault = v; }, py::doc(
    "Fault on channel 5.")
    )
  
    .def_property("Channel6Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel6Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel6Fault = v; }, py::doc(
    "Fault on channel 6.")
    )
  
    .def_property("Channel7Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel7Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel7Fault = v; }, py::doc(
    "Fault on channel 7.")
    )
  
    .def_property("Channel8Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel8Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel8Fault = v; }, py::doc(
    "Fault on channel 8.")
    )
  
    .def_property("Channel9Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel9Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel9Fault = v; }, py::doc(
    "Fault on channel 9.")
    )
  
    .def_property("Channel10Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel10Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel10Fault = v; }, py::doc(
    "Fault on channel 10.")
    )
  
    .def_property("Channel11Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel11Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel11Fault = v; }, py::doc(
    "Fault on channel 11.")
    )
  
    .def_property("Channel12Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel12Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel12Fault = v; }, py::doc(
    "Fault on channel 12.")
    )
  
    .def_property("Channel13Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel13Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel13Fault = v; }, py::doc(
    "Fault on channel 13.")
    )
  
    .def_property("Channel14Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel14Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel14Fault = v; }, py::doc(
    "Fault on channel 14.")
    )
  
    .def_property("Channel15Fault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Channel15Fault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Channel15Fault = v; }, py::doc(
    "Fault on channel 15.")
    )
  
    .def_property("CompressorOverCurrent",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.CompressorOverCurrent; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.CompressorOverCurrent = v; }, py::doc(
    "An overcurrent event occurred on the compressor output.")
    )
  
    .def_property("CompressorOpen",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.CompressorOpen; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.CompressorOpen = v; }, py::doc(
    "The compressor output has an open circuit.")
    )
  
    .def_property("SolenoidOverCurrent",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.SolenoidOverCurrent; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.SolenoidOverCurrent = v; }, py::doc(
    "An overcurrent event occurred on a solenoid output.")
    )
  
    .def_property("Brownout",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.Brownout; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.Brownout = v; }, py::doc(
    "The input voltage is below the minimum voltage.")
    )
  
    .def_property("CanWarning",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.CanWarning; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.CanWarning = v; }, py::doc(
    "A warning was raised by the device's CAN controller.")
    )
  
    .def_property("HardwareFault",  
        [](const frc::PneumaticHub::Faults& inst) -> uint32_t { return inst.HardwareFault; },
        [](frc::PneumaticHub::Faults& inst, uint32_t v) {inst.HardwareFault = v; }, py::doc(
    "The hardware on the device has malfunctioned.")
    )
  ;

  


  
  

  cls_StickyFaults.doc() =
    "Sticky faults for a REV PH. These faults will remain active until they\n"
"are reset by the user.";

  cls_StickyFaults
  
    .def(py::init<>(), release_gil())
  
    .def_property("CompressorOverCurrent",  
        [](const frc::PneumaticHub::StickyFaults& inst) -> uint32_t { return inst.CompressorOverCurrent; },
        [](frc::PneumaticHub::StickyFaults& inst, uint32_t v) {inst.CompressorOverCurrent = v; }, py::doc(
    "An overcurrent event occurred on the compressor output.")
    )
  
    .def_property("CompressorOpen",  
        [](const frc::PneumaticHub::StickyFaults& inst) -> uint32_t { return inst.CompressorOpen; },
        [](frc::PneumaticHub::StickyFaults& inst, uint32_t v) {inst.CompressorOpen = v; }, py::doc(
    "The compressor output has an open circuit.")
    )
  
    .def_property("SolenoidOverCurrent",  
        [](const frc::PneumaticHub::StickyFaults& inst) -> uint32_t { return inst.SolenoidOverCurrent; },
        [](frc::PneumaticHub::StickyFaults& inst, uint32_t v) {inst.SolenoidOverCurrent = v; }, py::doc(
    "An overcurrent event occurred on a solenoid output.")
    )
  
    .def_property("Brownout",  
        [](const frc::PneumaticHub::StickyFaults& inst) -> uint32_t { return inst.Brownout; },
        [](frc::PneumaticHub::StickyFaults& inst, uint32_t v) {inst.Brownout = v; }, py::doc(
    "The input voltage is below the minimum voltage.")
    )
  
    .def_property("CanWarning",  
        [](const frc::PneumaticHub::StickyFaults& inst) -> uint32_t { return inst.CanWarning; },
        [](frc::PneumaticHub::StickyFaults& inst, uint32_t v) {inst.CanWarning = v; }, py::doc(
    "A warning was raised by the device's CAN controller.")
    )
  
    .def_property("CanBusOff",  
        [](const frc::PneumaticHub::StickyFaults& inst) -> uint32_t { return inst.CanBusOff; },
        [](frc::PneumaticHub::StickyFaults& inst, uint32_t v) {inst.CanBusOff = v; }, py::doc(
    "The device's CAN controller experienced a \"Bus Off\" event.")
    )
  
    .def_property("HardwareFault",  
        [](const frc::PneumaticHub::StickyFaults& inst) -> uint32_t { return inst.HardwareFault; },
        [](frc::PneumaticHub::StickyFaults& inst, uint32_t v) {inst.HardwareFault = v; }, py::doc(
    "The hardware on the device has malfunctioned.")
    )
  
    .def_property("FirmwareFault",  
        [](const frc::PneumaticHub::StickyFaults& inst) -> uint32_t { return inst.FirmwareFault; },
        [](frc::PneumaticHub::StickyFaults& inst, uint32_t v) {inst.FirmwareFault = v; }, py::doc(
    "The firmware on the device has malfunctioned.")
    )
  
    .def_property("HasReset",  
        [](const frc::PneumaticHub::StickyFaults& inst) -> uint32_t { return inst.HasReset; },
        [](frc::PneumaticHub::StickyFaults& inst, uint32_t v) {inst.HasReset = v; }, py::doc(
    "The device has rebooted.")
    )
  ;

  


  
  }






}

}; // struct rpybuild_PneumaticHub_initializer

static std::unique_ptr<rpybuild_PneumaticHub_initializer> cls;

void begin_init_PneumaticHub(py::module &m) {
  cls = std::make_unique<rpybuild_PneumaticHub_initializer>(m);
}

void finish_init_PneumaticHub() {
  cls->finish();
  cls.reset();
}