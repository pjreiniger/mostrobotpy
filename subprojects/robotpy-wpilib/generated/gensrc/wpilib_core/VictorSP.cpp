
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/VictorSP.h>








#define RPYGEN_ENABLE_frc__VictorSP_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__VictorSP.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_VictorSP_initializer {


  

  












  
  using VictorSP_Trampoline = rpygen::PyTrampoline_frc__VictorSP<typename frc::VictorSP, typename rpygen::PyTrampolineCfg_frc__VictorSP<>>;
    static_assert(std::is_abstract<VictorSP_Trampoline>::value == false, "frc::VictorSP " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::VictorSP, VictorSP_Trampoline, frc::PWMMotorController> cls_VictorSP;

    

    
    

  py::module &m;

  
  rpybuild_VictorSP_initializer(py::module &m) :

  

  

  

  
    cls_VictorSP(m, "VictorSP"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_VictorSP.doc() =
    "Vex Robotics %Victor SP Motor %Controller.\n"
"\n"
"Note that the %Victor SP uses the following bounds for PWM values. These\n"
"values should work reasonably well for most controllers, but if users\n"
"experience issues such as asymmetric behavior around the deadband or\n"
"inability to saturate the controller in either direction, calibration is\n"
"recommended. The calibration procedure can be found in the %Victor SP User\n"
"Manual available from Vex.\n"
"\n"
"- 2.004ms = full \"forward\"\n"
"- 1.520ms = the \"high end\" of the deadband range\n"
"- 1.500ms = center of the deadband range (off)\n"
"- 1.480ms = the \"low end\" of the deadband range\n"
"- 0.997ms = full \"reverse\"";

  cls_VictorSP
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructor for a %Victor SP.\n"
"\n"
":param channel: The PWM channel that the Victor SP is attached to. 0-9 are\n"
"                on-board, 10-19 are on the MXP port")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_VictorSP_initializer

static std::unique_ptr<rpybuild_VictorSP_initializer> cls;

void begin_init_VictorSP(py::module &m) {
  cls = std::make_unique<rpybuild_VictorSP_initializer>(m);
}

void finish_init_VictorSP() {
  cls->finish();
  cls.reset();
}