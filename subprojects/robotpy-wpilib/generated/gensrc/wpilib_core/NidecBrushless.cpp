
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/NidecBrushless.h>








#define RPYGEN_ENABLE_frc__NidecBrushless_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__NidecBrushless.hpp>







#include <wpi/sendable/SendableBuilder.h>

#include <wpi/SmallString.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_NidecBrushless_initializer {


  

  












  
  using NidecBrushless_Trampoline = rpygen::PyTrampoline_frc__NidecBrushless<typename frc::NidecBrushless, typename rpygen::PyTrampolineCfg_frc__NidecBrushless<>>;
    static_assert(std::is_abstract<NidecBrushless_Trampoline>::value == false, "frc::NidecBrushless " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::NidecBrushless, NidecBrushless_Trampoline, frc::MotorController, frc::MotorSafety, wpi::Sendable> cls_NidecBrushless;

    

    
    

  py::module &m;

  
  rpybuild_NidecBrushless_initializer(py::module &m) :

  

  

  

  
    cls_NidecBrushless(m, "NidecBrushless"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_NidecBrushless.doc() =
    "Nidec Brushless Motor.";

  cls_NidecBrushless
  
    
  .def(py::init<int, int>(),
      py::arg("pwmChannel"), py::arg("dioChannel"), release_gil(), py::doc(
    "Constructor.\n"
"\n"
":param pwmChannel: The PWM channel that the Nidec Brushless controller is\n"
"                   attached to. 0-9 are on-board, 10-19 are on the MXP port.\n"
":param dioChannel: The DIO channel that the Nidec Brushless controller is\n"
"                   attached to. 0-9 are on-board, 10-25 are on the MXP port.")
  )
  
  
  
    
  .
def
("set", &frc::NidecBrushless::Set,
      py::arg("speed"), release_gil(), py::doc(
    "Set the PWM value.\n"
"\n"
"The PWM value is set using a range of -1.0 to 1.0, appropriately scaling\n"
"the value for the FPGA.\n"
"\n"
":param speed: The speed value between -1.0 and 1.0 to set.")
  )
  
  
  
    
  .
def
("get", &frc::NidecBrushless::Get, release_gil(), py::doc(
    "Get the recently set value of the PWM.\n"
"\n"
":returns: The most recently set value for the PWM between -1.0 and 1.0.")
  )
  
  
  
    
  .
def
("setInverted", &frc::NidecBrushless::SetInverted,
      py::arg("isInverted"), release_gil()
  )
  
  
  
    
  .
def
("getInverted", &frc::NidecBrushless::GetInverted, release_gil()
  )
  
  
  
    
  .
def
("disable", &frc::NidecBrushless::Disable, release_gil(), py::doc(
    "Disable the motor. The Enable() function must be called to re-enable the\n"
"motor.")
  )
  
  
  
    
  .
def
("enable", &frc::NidecBrushless::Enable, release_gil(), py::doc(
    "Re-enable the motor after Disable() has been called. The Set() function\n"
"must be called to set a new motor speed.")
  )
  
  
  
    
  .
def
("stopMotor", &frc::NidecBrushless::StopMotor, release_gil()
  )
  
  
  
    
  .
def
("getDescription", &frc::NidecBrushless::GetDescription, release_gil()
  )
  
  
  
    
  .
def
("getChannel", &frc::NidecBrushless::GetChannel, release_gil(), py::doc(
    "Gets the channel number associated with the object.\n"
"\n"
":returns: The channel number.")
  )
  
  
  
    
  .
def
("initSendable", &frc::NidecBrushless::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_NidecBrushless_initializer

static std::unique_ptr<rpybuild_NidecBrushless_initializer> cls;

void begin_init_NidecBrushless(py::module &m) {
  cls = std::make_unique<rpybuild_NidecBrushless_initializer>(m);
}

void finish_init_NidecBrushless() {
  cls->finish();
  cls.reset();
}