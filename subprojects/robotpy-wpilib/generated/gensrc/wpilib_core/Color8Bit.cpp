
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/util/Color8Bit.h>


#include <wpi_ct_string_type_caster.h>



#include <pybind11/operators.h>











#include <pybind11/operators.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_Color8Bit_initializer {


  

  












  py::class_<typename frc::Color8Bit> cls_Color8Bit;

    

    
    

  py::module &m;

  
  rpybuild_Color8Bit_initializer(py::module &m) :

  

  

  

  
    cls_Color8Bit(m, "Color8Bit"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_Color8Bit.doc() =
    "Represents colors that can be used with Addressable LEDs.";

  cls_Color8Bit
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "Constructs a default color (black).")
  )
  
  
  
    
  .def(py::init<int, int, int>(),
      py::arg("red"), py::arg("green"), py::arg("blue"), release_gil(), py::doc(
    "Constructs a Color8Bit.\n"
"\n"
":param red:   Red value (0-255)\n"
":param green: Green value (0-255)\n"
":param blue:  Blue value (0-255)")
  )
  
  
  
    
  .def(py::init<const Color&>(),
      py::arg("color"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Constructs a Color8Bit from a Color.\n"
"\n"
":param color: The color")
  )
  
  
  
    
  .def(py::init<std::string_view>(),
      py::arg("hexString"), release_gil(), py::doc(
    "Constructs a Color8Bit from a hex string.\n"
"\n"
":param hexString: a string of the format <tt>\\#RRGGBB</tt>\n"
"                  @throws std::invalid_argument if the hex string is invalid.")
  )
  
  
  
    
  .def(py::self == py::self
  )
  
  
  
    
  .
def_static
("fromHexString", &frc::Color8Bit::FromHexString,
      py::arg("hexString"), release_gil(), py::doc(
    "Create a Color8Bit from a hex string.\n"
"\n"
":param hexString: a string of the format <tt>\\#RRGGBB</tt>\n"
"\n"
":returns: Color8Bit object from hex string.\n"
"          @throws std::invalid_argument if the hex string is invalid.")
  )
  
  
  
    
  .
def
("hexString", &frc::Color8Bit::HexString, release_gil(), py::doc(
    "Return this color represented as a hex string.\n"
"\n"
":returns: a string of the format <tt>\\#RRGGBB</tt>")
  )
  
  
  
    .def_readonly("red", &frc::Color8Bit::red, py::doc(
    "Red component (0-255)."))
  
    .def_readonly("green", &frc::Color8Bit::green, py::doc(
    "Green component (0-255)."))
  
    .def_readonly("blue", &frc::Color8Bit::blue, py::doc(
    "Blue component (0-255)."))
  ;

  


  }







  cls_Color8Bit
  .def("toColor", [](const Color8Bit &self) -> frc::Color {
    return self;
  })
  .def("__hash__", [](Color8Bit *self) -> size_t {
    return (self->red) | (self->green << 8) | (self->blue << 16);
  })
  .def("__repr__", [](Color8Bit *self) {
    return "Color8Bit("
      "red=" + std::to_string(self->red) + ", "
      "green=" + std::to_string(self->green) + ", "
      "blue=" + std::to_string(self->blue) + ")";
  });


}

}; // struct rpybuild_Color8Bit_initializer

static std::unique_ptr<rpybuild_Color8Bit_initializer> cls;

void begin_init_Color8Bit(py::module &m) {
  cls = std::make_unique<rpybuild_Color8Bit_initializer>(m);
}

void finish_init_Color8Bit() {
  cls->finish();
  cls.reset();
}