
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/StadiaController.h>








#define RPYGEN_ENABLE_frc__StadiaController_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__StadiaController.hpp>









#include <type_traits>


  using namespace frc;





struct rpybuild_StadiaController_initializer {


  

  












  
  using StadiaController_Trampoline = rpygen::PyTrampoline_frc__StadiaController<typename frc::StadiaController, typename rpygen::PyTrampolineCfg_frc__StadiaController<>>;
    static_assert(std::is_abstract<StadiaController_Trampoline>::value == false, "frc::StadiaController " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::StadiaController, StadiaController_Trampoline, frc::GenericHID> cls_StadiaController;

    

    
    
    py::class_<typename frc::StadiaController::Button> cls_Button;

    

    
    
    
    py::class_<typename frc::StadiaController::Axis> cls_Axis;

    

    
    
    

  py::module &m;

  
  rpybuild_StadiaController_initializer(py::module &m) :

  

  

  

  
    cls_StadiaController(m, "StadiaController"),

  

  
  
    cls_Button(cls_StadiaController, "Button"),

  

  
  
  
    cls_Axis(cls_StadiaController, "Axis"),

  

  
  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  

    
    
  

    
    
  }

void finish() {





  {
  
  using Button [[maybe_unused]] = typename frc::StadiaController::Button;
  
  using Axis [[maybe_unused]] = typename frc::StadiaController::Axis;
  
  
  


  

  cls_StadiaController.doc() =
    "Handle input from Stadia controllers connected to the Driver\n"
"Station.\n"
"\n"
"This class handles Stadia input that comes from the Driver Station. Each time\n"
"a value is requested the most recent value is returned. There is a single\n"
"class instance for each controller and the mapping of ports to hardware\n"
"buttons depends on the code in the Driver Station.";

  cls_StadiaController
  
    
  .def(py::init<int>(),
      py::arg("port"), release_gil(), py::doc(
    "Construct an instance of a Stadia controller.\n"
"\n"
"The controller index is the USB port on the Driver Station.\n"
"\n"
":param port: The port on the Driver Station that the controller is plugged\n"
"             into (0-5).")
  )
  
  
  
    
  .
def
("getLeftX", &frc::StadiaController::GetLeftX, release_gil(), py::doc(
    "Get the X axis value of left side of the controller.\n"
"\n"
":returns: the axis value")
  )
  
  
  
    
  .
def
("getRightX", &frc::StadiaController::GetRightX, release_gil(), py::doc(
    "Get the X axis value of right side of the controller.\n"
"\n"
":returns: the axis value")
  )
  
  
  
    
  .
def
("getLeftY", &frc::StadiaController::GetLeftY, release_gil(), py::doc(
    "Get the Y axis value of left side of the controller.\n"
"\n"
":returns: the axis value")
  )
  
  
  
    
  .
def
("getRightY", &frc::StadiaController::GetRightY, release_gil(), py::doc(
    "Get the Y axis value of right side of the controller.\n"
"\n"
":returns: the axis value")
  )
  
  
  
    
  .
def
("getLeftBumper", &frc::StadiaController::GetLeftBumper, release_gil(), py::doc(
    "Read the value of the left bumper (LB) button on the controller.\n"
"\n"
":returns: the state of the button")
  )
  
  
  
    
  .
def
("getRightBumper", &frc::StadiaController::GetRightBumper, release_gil(), py::doc(
    "Read the value of the right bumper (RB) button on the controller.\n"
"\n"
":returns: the state of the button")
  )
  
  
  
    
  .
def
("getLeftBumperPressed", &frc::StadiaController::GetLeftBumperPressed, release_gil(), py::doc(
    "Whether the left bumper (LB) was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check")
  )
  
  
  
    
  .
def
("getRightBumperPressed", &frc::StadiaController::GetRightBumperPressed, release_gil(), py::doc(
    "Whether the right bumper (RB) was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check")
  )
  
  
  
    
  .
def
("getLeftBumperReleased", &frc::StadiaController::GetLeftBumperReleased, release_gil(), py::doc(
    "Whether the left bumper (LB) was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("getRightBumperReleased", &frc::StadiaController::GetRightBumperReleased, release_gil(), py::doc(
    "Whether the right bumper (RB) was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("leftBumper", &frc::StadiaController::LeftBumper,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the left bumper's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the left bumper's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("rightBumper", &frc::StadiaController::RightBumper,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the right bumper's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the right bumper's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getLeftStickButton", &frc::StadiaController::GetLeftStickButton, release_gil(), py::doc(
    "Read the value of the left stick button (LSB) on the controller.\n"
"\n"
":returns: the state of the button")
  )
  
  
  
    
  .
def
("getRightStickButton", &frc::StadiaController::GetRightStickButton, release_gil(), py::doc(
    "Read the value of the right stick button (RSB) on the controller.\n"
"\n"
":returns: the state of the button")
  )
  
  
  
    
  .
def
("getLeftStickButtonPressed", &frc::StadiaController::GetLeftStickButtonPressed, release_gil(), py::doc(
    "Whether the left stick button (LSB) was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getRightStickButtonPressed", &frc::StadiaController::GetRightStickButtonPressed, release_gil(), py::doc(
    "Whether the right stick button (RSB) was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check")
  )
  
  
  
    
  .
def
("getLeftStickButtonReleased", &frc::StadiaController::GetLeftStickButtonReleased, release_gil(), py::doc(
    "Whether the left stick button (LSB) was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("getRightStickButtonReleased", &frc::StadiaController::GetRightStickButtonReleased, release_gil(), py::doc(
    "Whether the right stick button (RSB) was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("leftStick", &frc::StadiaController::LeftStick,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the left stick's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the left stick's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("rightStick", &frc::StadiaController::RightStick,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the right stick's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the right stick's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getAButton", &frc::StadiaController::GetAButton, release_gil(), py::doc(
    "Read the value of the A button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getAButtonPressed", &frc::StadiaController::GetAButtonPressed, release_gil(), py::doc(
    "Whether the A button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getAButtonReleased", &frc::StadiaController::GetAButtonReleased, release_gil(), py::doc(
    "Whether the A button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("A", &frc::StadiaController::A,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the A button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the A button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getBButton", &frc::StadiaController::GetBButton, release_gil(), py::doc(
    "Read the value of the B button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getBButtonPressed", &frc::StadiaController::GetBButtonPressed, release_gil(), py::doc(
    "Whether the B button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getBButtonReleased", &frc::StadiaController::GetBButtonReleased, release_gil(), py::doc(
    "Whether the B button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("B", &frc::StadiaController::B,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the B button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the B button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getXButton", &frc::StadiaController::GetXButton, release_gil(), py::doc(
    "Read the value of the X button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getXButtonPressed", &frc::StadiaController::GetXButtonPressed, release_gil(), py::doc(
    "Whether the X button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getXButtonReleased", &frc::StadiaController::GetXButtonReleased, release_gil(), py::doc(
    "Whether the X button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("X", &frc::StadiaController::X,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the X button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the X button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getYButton", &frc::StadiaController::GetYButton, release_gil(), py::doc(
    "Read the value of the Y button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getYButtonPressed", &frc::StadiaController::GetYButtonPressed, release_gil(), py::doc(
    "Whether the Y button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getYButtonReleased", &frc::StadiaController::GetYButtonReleased, release_gil(), py::doc(
    "Whether the Y button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("Y", &frc::StadiaController::Y,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the Y button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the Y button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getEllipsesButton", &frc::StadiaController::GetEllipsesButton, release_gil(), py::doc(
    "Read the value of the ellipses button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getEllipsesButtonPressed", &frc::StadiaController::GetEllipsesButtonPressed, release_gil(), py::doc(
    "Whether the ellipses button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getEllipsesButtonReleased", &frc::StadiaController::GetEllipsesButtonReleased, release_gil(), py::doc(
    "Whether the ellipses button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("ellipses", &frc::StadiaController::Ellipses,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the ellipses button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the ellipses button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getHamburgerButton", &frc::StadiaController::GetHamburgerButton, release_gil(), py::doc(
    "Read the value of the hamburger button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getHamburgerButtonPressed", &frc::StadiaController::GetHamburgerButtonPressed, release_gil(), py::doc(
    "Whether the hamburger button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getHamburgerButtonReleased", &frc::StadiaController::GetHamburgerButtonReleased, release_gil(), py::doc(
    "Whether the hamburger button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("hamburger", &frc::StadiaController::Hamburger,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the hamburger button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the hamburger button's digital\n"
"          signal attached to the given loop.")
  )
  
  
  
    
  .
def
("getStadiaButton", &frc::StadiaController::GetStadiaButton, release_gil(), py::doc(
    "Read the value of the stadia button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getStadiaButtonPressed", &frc::StadiaController::GetStadiaButtonPressed, release_gil(), py::doc(
    "Whether the stadia button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getStadiaButtonReleased", &frc::StadiaController::GetStadiaButtonReleased, release_gil(), py::doc(
    "Whether the stadia button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("stadia", &frc::StadiaController::Stadia,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the stadia button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the stadia button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getGoogleButton", &frc::StadiaController::GetGoogleButton, release_gil(), py::doc(
    "Read the value of the google button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getGoogleButtonPressed", &frc::StadiaController::GetGoogleButtonPressed, release_gil(), py::doc(
    "Whether the google button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getGoogleButtonReleased", &frc::StadiaController::GetGoogleButtonReleased, release_gil(), py::doc(
    "Whether the google button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("google", &frc::StadiaController::Google,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the google button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the google button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getFrameButton", &frc::StadiaController::GetFrameButton, release_gil(), py::doc(
    "Read the value of the frame button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getFrameButtonPressed", &frc::StadiaController::GetFrameButtonPressed, release_gil(), py::doc(
    "Whether the frame button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getFrameButtonReleased", &frc::StadiaController::GetFrameButtonReleased, release_gil(), py::doc(
    "Whether the frame button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("frame", &frc::StadiaController::Frame,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the frame button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the frame button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getLeftTriggerButton", &frc::StadiaController::GetLeftTriggerButton, release_gil(), py::doc(
    "Read the value of the left trigger button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getLeftTriggerButtonPressed", &frc::StadiaController::GetLeftTriggerButtonPressed, release_gil(), py::doc(
    "Whether the left trigger button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getLeftTriggerButtonReleased", &frc::StadiaController::GetLeftTriggerButtonReleased, release_gil(), py::doc(
    "Whether the left trigger button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("leftTrigger", &frc::StadiaController::LeftTrigger,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the left trigger button's digital\n"
"signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the left trigger button's digital\n"
"          signal attached to the given loop.")
  )
  
  
  
    
  .
def
("getRightTriggerButton", &frc::StadiaController::GetRightTriggerButton, release_gil(), py::doc(
    "Read the value of the right trigger button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getRightTriggerButtonPressed", &frc::StadiaController::GetRightTriggerButtonPressed, release_gil(), py::doc(
    "Whether the right trigger button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getRightTriggerButtonReleased", &frc::StadiaController::GetRightTriggerButtonReleased, release_gil(), py::doc(
    "Whether the right trigger button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("rightTrigger", &frc::StadiaController::RightTrigger,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the right trigger button's digital\n"
"signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the right trigger button's digital\n"
"          signal attached to the given loop.")
  )
  
  
  ;

  


  

  cls_Button.doc() =
    "Represents a digital button on a StadiaController.";

  cls_Button
  
    .def(py::init<>(), release_gil())
  
    .def_readonly_static("kA", &frc::StadiaController::Button::kA, py::doc(
    "A button."))
  
    .def_readonly_static("kB", &frc::StadiaController::Button::kB, py::doc(
    "B button."))
  
    .def_readonly_static("kX", &frc::StadiaController::Button::kX, py::doc(
    "X button."))
  
    .def_readonly_static("kY", &frc::StadiaController::Button::kY, py::doc(
    "Y button."))
  
    .def_readonly_static("kLeftBumper", &frc::StadiaController::Button::kLeftBumper, py::doc(
    "Left bumper button."))
  
    .def_readonly_static("kRightBumper", &frc::StadiaController::Button::kRightBumper, py::doc(
    "Right bumper button."))
  
    .def_readonly_static("kLeftStick", &frc::StadiaController::Button::kLeftStick, py::doc(
    "Left stick button."))
  
    .def_readonly_static("kRightStick", &frc::StadiaController::Button::kRightStick, py::doc(
    "Right stick button."))
  
    .def_readonly_static("kEllipses", &frc::StadiaController::Button::kEllipses, py::doc(
    "Ellipses button."))
  
    .def_readonly_static("kHamburger", &frc::StadiaController::Button::kHamburger, py::doc(
    "Hamburger button."))
  
    .def_readonly_static("kStadia", &frc::StadiaController::Button::kStadia, py::doc(
    "Stadia button."))
  
    .def_readonly_static("kRightTrigger", &frc::StadiaController::Button::kRightTrigger, py::doc(
    "Right trigger button."))
  
    .def_readonly_static("kLeftTrigger", &frc::StadiaController::Button::kLeftTrigger, py::doc(
    "Left trigger button."))
  
    .def_readonly_static("kGoogle", &frc::StadiaController::Button::kGoogle, py::doc(
    "Google button."))
  
    .def_readonly_static("kFrame", &frc::StadiaController::Button::kFrame, py::doc(
    "Frame button."))
  ;

  


  
  

  cls_Axis.doc() =
    "Represents an axis on a StadiaController.";

  cls_Axis
  
    .def(py::init<>(), release_gil())
  
    .def_readonly_static("kLeftX", &frc::StadiaController::Axis::kLeftX, py::doc(
    "Left X axis."))
  
    .def_readonly_static("kRightX", &frc::StadiaController::Axis::kRightX, py::doc(
    "Right X axis."))
  
    .def_readonly_static("kLeftY", &frc::StadiaController::Axis::kLeftY, py::doc(
    "Left Y axis."))
  
    .def_readonly_static("kRightY", &frc::StadiaController::Axis::kRightY, py::doc(
    "Right Y axis."))
  ;

  


  
  }






}

}; // struct rpybuild_StadiaController_initializer

static std::unique_ptr<rpybuild_StadiaController_initializer> cls;

void begin_init_StadiaController(py::module &m) {
  cls = std::make_unique<rpybuild_StadiaController_initializer>(m);
}

void finish_init_StadiaController() {
  cls->finish();
  cls.reset();
}