
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/smartdashboard/Field2d.h>


#include <units_length_type_caster.h>







#define RPYGEN_ENABLE_frc__Field2d_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__Field2d.hpp>







#include <networktables/NTSendableBuilder.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_Field2d_initializer {


  

  












  
  using Field2d_Trampoline = rpygen::PyTrampoline_frc__Field2d<typename frc::Field2d, typename rpygen::PyTrampolineCfg_frc__Field2d<>>;
    static_assert(std::is_abstract<Field2d_Trampoline>::value == false, "frc::Field2d " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::Field2d, Field2d_Trampoline, nt::NTSendable> cls_Field2d;

    

    
    

  py::module &m;

  
  rpybuild_Field2d_initializer(py::module &m) :

  

  

  

  
    cls_Field2d(m, "Field2d"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  
    using Entry [[maybe_unused]] = typename frc::Field2d::Entry;
  


  

  cls_Field2d.doc() =
    "2D representation of game field for dashboards.\n"
"\n"
"An object's pose is the location shown on the dashboard view.  Note that\n"
"for the robot, this may or may not match the internal odometry.  For example,\n"
"if the robot is shown at a particular starting location, the pose in this\n"
"class would represent the actual location on the field, but the robot's\n"
"internal state might have a 0,0,0 pose (unless it's initialized to\n"
"something different).\n"
"\n"
"As the user is able to edit the pose, code performing updates should get\n"
"the robot pose, transform it as appropriate (e.g. based on wheel odometry),\n"
"and set the new pose.\n"
"\n"
"This class provides methods to set the robot pose, but other objects can\n"
"also be shown by using the GetObject() function.  Other objects can\n"
"also have multiple poses (which will show the object at multiple locations).";

  cls_Field2d
  
    
  .def(py::init<>(), release_gil()
  )
  
  
  
    
  .
def
("setRobotPose", static_cast<void(frc::Field2d::*)(const Pose2d&)>(
        &frc::Field2d::SetRobotPose),
      py::arg("pose"), release_gil(), py::doc(
    "Set the robot pose from a Pose object.\n"
"\n"
":param pose: 2D pose")
  )
  
  
  
    
  .
def
("setRobotPose", static_cast<void(frc::Field2d::*)(units::meter_t, units::meter_t, Rotation2d)>(
        &frc::Field2d::SetRobotPose),
      py::arg("x"), py::arg("y"), py::arg("rotation"), release_gil(), py::doc(
    "Set the robot pose from x, y, and rotation.\n"
"\n"
":param x:        X location\n"
":param y:        Y location\n"
":param rotation: rotation")
  )
  
  
  
    
  .
def
("getRobotPose", &frc::Field2d::GetRobotPose, release_gil(), py::doc(
    "Get the robot pose.\n"
"\n"
":returns: 2D pose")
  )
  
  
  
    
  .
def
("getObject", &frc::Field2d::GetObject,
      py::arg("name"), release_gil(), py::return_value_policy::reference_internal, py::doc(
    "Get or create a field object.\n"
"\n"
":returns: Field object")
  )
  
  
  
    
  .
def
("getRobotObject", &frc::Field2d::GetRobotObject, release_gil(), py::return_value_policy::reference_internal, py::doc(
    "Get the robot object.\n"
"\n"
":returns: Field object for robot")
  )
  
  
  
    
  .
def
("initSendable", &frc::Field2d::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_Field2d_initializer

static std::unique_ptr<rpybuild_Field2d_initializer> cls;

void begin_init_Field2d(py::module &m) {
  cls = std::make_unique<rpybuild_Field2d_initializer>(m);
}

void finish_init_Field2d() {
  cls->finish();
  cls.reset();
}