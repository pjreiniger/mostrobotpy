
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/PS4Controller.h>








#define RPYGEN_ENABLE_frc__PS4Controller_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__PS4Controller.hpp>







#include <frc/event/BooleanEvent.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_PS4Controller_initializer {


  

  












  
  using PS4Controller_Trampoline = rpygen::PyTrampoline_frc__PS4Controller<typename frc::PS4Controller, typename rpygen::PyTrampolineCfg_frc__PS4Controller<>>;
    static_assert(std::is_abstract<PS4Controller_Trampoline>::value == false, "frc::PS4Controller " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::PS4Controller, PS4Controller_Trampoline, frc::GenericHID> cls_PS4Controller;

    

    
    
    py::class_<typename frc::PS4Controller::Button> cls_Button;

    

    
    
    
    py::class_<typename frc::PS4Controller::Axis> cls_Axis;

    

    
    
    

  py::module &m;

  
  rpybuild_PS4Controller_initializer(py::module &m) :

  

  

  

  
    cls_PS4Controller(m, "PS4Controller"),

  

  
  
    cls_Button(cls_PS4Controller, "Button"),

  

  
  
  
    cls_Axis(cls_PS4Controller, "Axis"),

  

  
  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  

    
    
  

    
    
  }

void finish() {





  {
  
  using Button [[maybe_unused]] = typename frc::PS4Controller::Button;
  
  using Axis [[maybe_unused]] = typename frc::PS4Controller::Axis;
  
  
  


  

  cls_PS4Controller.doc() =
    "Handle input from PS4 controllers connected to the Driver Station.\n"
"\n"
"This class handles PS4 input that comes from the Driver Station. Each time\n"
"a value is requested the most recent value is returned. There is a single\n"
"class instance for each controller and the mapping of ports to hardware\n"
"buttons depends on the code in the Driver Station.\n"
"\n"
"Only first party controllers from Sony are guaranteed to have the correct\n"
"mapping, and only through the official NI DS. Sim is not guaranteed to have\n"
"the same mapping, as well as any 3rd party controllers.";

  cls_PS4Controller
  
    
  .def(py::init<int>(),
      py::arg("port"), release_gil(), py::doc(
    "Construct an instance of an PS4 controller.\n"
"\n"
"The controller index is the USB port on the Driver Station.\n"
"\n"
":param port: The port on the Driver Station that the controller is plugged\n"
"             into (0-5).")
  )
  
  
  
    
  .
def
("getLeftX", &frc::PS4Controller::GetLeftX, release_gil(), py::doc(
    "Get the X axis value of left side of the controller.\n"
"\n"
":returns: the axis value.")
  )
  
  
  
    
  .
def
("getRightX", &frc::PS4Controller::GetRightX, release_gil(), py::doc(
    "Get the X axis value of right side of the controller.\n"
"\n"
":returns: the axis value.")
  )
  
  
  
    
  .
def
("getLeftY", &frc::PS4Controller::GetLeftY, release_gil(), py::doc(
    "Get the Y axis value of left side of the controller.\n"
"\n"
":returns: the axis value.")
  )
  
  
  
    
  .
def
("getRightY", &frc::PS4Controller::GetRightY, release_gil(), py::doc(
    "Get the Y axis value of right side of the controller.\n"
"\n"
":returns: the axis value.")
  )
  
  
  
    
  .
def
("getL2Axis", &frc::PS4Controller::GetL2Axis, release_gil(), py::doc(
    "Get the L2 axis value of the controller. Note that this axis is bound to\n"
"the range of [0, 1] as opposed to the usual [-1, 1].\n"
"\n"
":returns: the axis value.")
  )
  
  
  
    
  .
def
("getR2Axis", &frc::PS4Controller::GetR2Axis, release_gil(), py::doc(
    "Get the R2 axis value of the controller. Note that this axis is bound to\n"
"the range of [0, 1] as opposed to the usual [-1, 1].\n"
"\n"
":returns: the axis value.")
  )
  
  
  
    
  .
def
("getSquareButton", &frc::PS4Controller::GetSquareButton, release_gil(), py::doc(
    "Read the value of the Square button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getSquareButtonPressed", &frc::PS4Controller::GetSquareButtonPressed, release_gil(), py::doc(
    "Whether the Square button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getSquareButtonReleased", &frc::PS4Controller::GetSquareButtonReleased, release_gil(), py::doc(
    "Whether the Square button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("square", &frc::PS4Controller::Square,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the square button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the square button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getCrossButton", &frc::PS4Controller::GetCrossButton, release_gil(), py::doc(
    "Read the value of the Cross button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getCrossButtonPressed", &frc::PS4Controller::GetCrossButtonPressed, release_gil(), py::doc(
    "Whether the Cross button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getCrossButtonReleased", &frc::PS4Controller::GetCrossButtonReleased, release_gil(), py::doc(
    "Whether the Cross button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("cross", &frc::PS4Controller::Cross,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the cross button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the cross button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getCircleButton", &frc::PS4Controller::GetCircleButton, release_gil(), py::doc(
    "Read the value of the Circle button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getCircleButtonPressed", &frc::PS4Controller::GetCircleButtonPressed, release_gil(), py::doc(
    "Whether the Circle button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getCircleButtonReleased", &frc::PS4Controller::GetCircleButtonReleased, release_gil(), py::doc(
    "Whether the Circle button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("circle", &frc::PS4Controller::Circle,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the circle button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the circle button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getTriangleButton", &frc::PS4Controller::GetTriangleButton, release_gil(), py::doc(
    "Read the value of the Triangle button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getTriangleButtonPressed", &frc::PS4Controller::GetTriangleButtonPressed, release_gil(), py::doc(
    "Whether the Triangle button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getTriangleButtonReleased", &frc::PS4Controller::GetTriangleButtonReleased, release_gil(), py::doc(
    "Whether the Triangle button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("triangle", &frc::PS4Controller::Triangle,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the triangle button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the triangle button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getL1Button", &frc::PS4Controller::GetL1Button, release_gil(), py::doc(
    "Read the value of the L1 button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getL1ButtonPressed", &frc::PS4Controller::GetL1ButtonPressed, release_gil(), py::doc(
    "Whether the L1 button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getL1ButtonReleased", &frc::PS4Controller::GetL1ButtonReleased, release_gil(), py::doc(
    "Whether the L1 button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("L1", &frc::PS4Controller::L1,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the L1 button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the L1 button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getR1Button", &frc::PS4Controller::GetR1Button, release_gil(), py::doc(
    "Read the value of the R1 button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getR1ButtonPressed", &frc::PS4Controller::GetR1ButtonPressed, release_gil(), py::doc(
    "Whether the R1 button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getR1ButtonReleased", &frc::PS4Controller::GetR1ButtonReleased, release_gil(), py::doc(
    "Whether the R1 button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("R1", &frc::PS4Controller::R1,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the R1 button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the R1 button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getL2Button", &frc::PS4Controller::GetL2Button, release_gil(), py::doc(
    "Read the value of the L2 button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getL2ButtonPressed", &frc::PS4Controller::GetL2ButtonPressed, release_gil(), py::doc(
    "Whether the L2 button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getL2ButtonReleased", &frc::PS4Controller::GetL2ButtonReleased, release_gil(), py::doc(
    "Whether the L2 button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("L2", &frc::PS4Controller::L2,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the L2 button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the L2 button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getR2Button", &frc::PS4Controller::GetR2Button, release_gil(), py::doc(
    "Read the value of the R2 button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getR2ButtonPressed", &frc::PS4Controller::GetR2ButtonPressed, release_gil(), py::doc(
    "Whether the R2 button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getR2ButtonReleased", &frc::PS4Controller::GetR2ButtonReleased, release_gil(), py::doc(
    "Whether the R2 button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("R2", &frc::PS4Controller::R2,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the R2 button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the R2 button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getShareButton", &frc::PS4Controller::GetShareButton, release_gil(), py::doc(
    "Read the value of the Share button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getShareButtonPressed", &frc::PS4Controller::GetShareButtonPressed, release_gil(), py::doc(
    "Whether the Share button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getShareButtonReleased", &frc::PS4Controller::GetShareButtonReleased, release_gil(), py::doc(
    "Whether the Share button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("share", &frc::PS4Controller::Share,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the share button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the share button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getOptionsButton", &frc::PS4Controller::GetOptionsButton, release_gil(), py::doc(
    "Read the value of the Options button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getOptionsButtonPressed", &frc::PS4Controller::GetOptionsButtonPressed, release_gil(), py::doc(
    "Whether the Options button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getOptionsButtonReleased", &frc::PS4Controller::GetOptionsButtonReleased, release_gil(), py::doc(
    "Whether the Options button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("options", &frc::PS4Controller::Options,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the options button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the options button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getL3Button", &frc::PS4Controller::GetL3Button, release_gil(), py::doc(
    "Read the value of the L3 button (pressing the left analog stick) on the\n"
"controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getL3ButtonPressed", &frc::PS4Controller::GetL3ButtonPressed, release_gil(), py::doc(
    "Whether the L3 (left stick) button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getL3ButtonReleased", &frc::PS4Controller::GetL3ButtonReleased, release_gil(), py::doc(
    "Whether the L3 (left stick) button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("L3", &frc::PS4Controller::L3,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the L3 button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the L3 button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getR3Button", &frc::PS4Controller::GetR3Button, release_gil(), py::doc(
    "Read the value of the R3 button (pressing the right analog stick) on the\n"
"controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getR3ButtonPressed", &frc::PS4Controller::GetR3ButtonPressed, release_gil(), py::doc(
    "Whether the R3 (right stick) button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getR3ButtonReleased", &frc::PS4Controller::GetR3ButtonReleased, release_gil(), py::doc(
    "Whether the R3 (right stick) button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("R3", &frc::PS4Controller::R3,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the R3 button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the R3 button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getPSButton", &frc::PS4Controller::GetPSButton, release_gil(), py::doc(
    "Read the value of the PS button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getPSButtonPressed", &frc::PS4Controller::GetPSButtonPressed, release_gil(), py::doc(
    "Whether the PS button was pressed since the last check.\n"
"\n"
":returns: Whether the button was pressed since the last check.")
  )
  
  
  
    
  .
def
("getPSButtonReleased", &frc::PS4Controller::GetPSButtonReleased, release_gil(), py::doc(
    "Whether the PS button was released since the last check.\n"
"\n"
":returns: Whether the button was released since the last check.")
  )
  
  
  
    
  .
def
("PS", &frc::PS4Controller::PS,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the PS button's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the PS button's digital signal\n"
"          attached to the given loop.")
  )
  
  
  
    
  .
def
("getTouchpad", &frc::PS4Controller::GetTouchpad, release_gil(), py::doc(
    "Read the value of the touchpad button on the controller.\n"
"\n"
":returns: The state of the button.")
  )
  
  
  
    
  .
def
("getTouchpadPressed", &frc::PS4Controller::GetTouchpadPressed, release_gil(), py::doc(
    "Whether the touchpad was pressed since the last check.\n"
"\n"
":returns: Whether the touchpad was pressed since the last check.")
  )
  
  
  
    
  .
def
("getTouchpadReleased", &frc::PS4Controller::GetTouchpadReleased, release_gil(), py::doc(
    "Whether the touchpad was released since the last check.\n"
"\n"
":returns: Whether the touchpad was released since the last check.")
  )
  
  
  
    
  .
def
("touchpad", &frc::PS4Controller::Touchpad,
      py::arg("loop"), release_gil(), py::doc(
    "Constructs an event instance around the touchpad's digital signal.\n"
"\n"
":param loop: the event loop instance to attach the event to.\n"
"\n"
":returns: an event instance representing the touchpad's digital signal\n"
"          attached to the given loop.")
  )
  
  
  ;

  


  

  cls_Button.doc() =
    "Represents a digital button on a PS4Controller.";

  cls_Button
  
    .def(py::init<>(), release_gil())
  
    .def_readonly_static("kSquare", &frc::PS4Controller::Button::kSquare, py::doc(
    "Square button."))
  
    .def_readonly_static("kCross", &frc::PS4Controller::Button::kCross, py::doc(
    "X button."))
  
    .def_readonly_static("kCircle", &frc::PS4Controller::Button::kCircle, py::doc(
    "Circle button."))
  
    .def_readonly_static("kTriangle", &frc::PS4Controller::Button::kTriangle, py::doc(
    "Triangle button."))
  
    .def_readonly_static("kL1", &frc::PS4Controller::Button::kL1, py::doc(
    "Left Trigger 1 button."))
  
    .def_readonly_static("kR1", &frc::PS4Controller::Button::kR1, py::doc(
    "Right Trigger 1 button."))
  
    .def_readonly_static("kL2", &frc::PS4Controller::Button::kL2, py::doc(
    "Left Trigger 2 button."))
  
    .def_readonly_static("kR2", &frc::PS4Controller::Button::kR2, py::doc(
    "Right Trigger 2 button."))
  
    .def_readonly_static("kShare", &frc::PS4Controller::Button::kShare, py::doc(
    "Share button."))
  
    .def_readonly_static("kOptions", &frc::PS4Controller::Button::kOptions, py::doc(
    "Option button."))
  
    .def_readonly_static("kL3", &frc::PS4Controller::Button::kL3, py::doc(
    "Left stick button."))
  
    .def_readonly_static("kR3", &frc::PS4Controller::Button::kR3, py::doc(
    "Right stick button."))
  
    .def_readonly_static("kPS", &frc::PS4Controller::Button::kPS, py::doc(
    "PlayStation button."))
  
    .def_readonly_static("kTouchpad", &frc::PS4Controller::Button::kTouchpad, py::doc(
    "Touchpad click button."))
  ;

  


  
  

  cls_Axis.doc() =
    "Represents an axis on a PS4Controller.";

  cls_Axis
  
    .def(py::init<>(), release_gil())
  
    .def_readonly_static("kLeftX", &frc::PS4Controller::Axis::kLeftX, py::doc(
    "Left X axis."))
  
    .def_readonly_static("kLeftY", &frc::PS4Controller::Axis::kLeftY, py::doc(
    "Left Y axis."))
  
    .def_readonly_static("kRightX", &frc::PS4Controller::Axis::kRightX, py::doc(
    "Right X axis."))
  
    .def_readonly_static("kRightY", &frc::PS4Controller::Axis::kRightY, py::doc(
    "Right Y axis."))
  
    .def_readonly_static("kL2", &frc::PS4Controller::Axis::kL2, py::doc(
    "Left Trigger 2."))
  
    .def_readonly_static("kR2", &frc::PS4Controller::Axis::kR2, py::doc(
    "Right Trigger 2."))
  ;

  


  
  }






}

}; // struct rpybuild_PS4Controller_initializer

static std::unique_ptr<rpybuild_PS4Controller_initializer> cls;

void begin_init_PS4Controller(py::module &m) {
  cls = std::make_unique<rpybuild_PS4Controller_initializer>(m);
}

void finish_init_PS4Controller() {
  cls->finish();
  cls.reset();
}