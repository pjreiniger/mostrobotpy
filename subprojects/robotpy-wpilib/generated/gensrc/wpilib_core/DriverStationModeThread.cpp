
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/internal/DriverStationModeThread.h>
















#include <type_traits>


  using namespace frc::internal;





struct rpybuild_DriverStationModeThread_initializer {


  

  












  py::class_<typename frc::internal::DriverStationModeThread> cls_DriverStationModeThread;

    

    
    

  py::module &m;

  
  rpybuild_DriverStationModeThread_initializer(py::module &m) :

  

  

  

  
    cls_DriverStationModeThread(m, "_DriverStationModeThread"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DriverStationModeThread.doc() =
    "For internal use only.";

  cls_DriverStationModeThread
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "For internal use only.")
  )
  
  
  
    
  .
def
("inDisabled", &frc::internal::DriverStationModeThread::InDisabled,
      py::arg("entering"), release_gil(), py::doc(
    "Only to be used to tell the Driver Station what code you claim to be\n"
"executing for diagnostic purposes only.\n"
"\n"
":param entering: If true, starting disabled code; if false, leaving disabled\n"
"                 code")
  )
  
  
  
    
  .
def
("inAutonomous", &frc::internal::DriverStationModeThread::InAutonomous,
      py::arg("entering"), release_gil(), py::doc(
    "Only to be used to tell the Driver Station what code you claim to be\n"
"executing for diagnostic purposes only.\n"
"\n"
":param entering: If true, starting autonomous code; if false, leaving\n"
"                 autonomous code")
  )
  
  
  
    
  .
def
("inTeleop", &frc::internal::DriverStationModeThread::InTeleop,
      py::arg("entering"), release_gil(), py::doc(
    "Only to be used to tell the Driver Station what code you claim to be\n"
"executing for diagnostic purposes only.\n"
"\n"
":param entering: If true, starting teleop code; if false, leaving teleop\n"
"                 code")
  )
  
  
  
    
  .
def
("inTest", &frc::internal::DriverStationModeThread::InTest,
      py::arg("entering"), release_gil(), py::doc(
    "Only to be used to tell the Driver Station what code you claim to be\n"
"executing for diagnostic purposes only.\n"
"\n"
":param entering: If true, starting test code; if false, leaving test code")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DriverStationModeThread_initializer

static std::unique_ptr<rpybuild_DriverStationModeThread_initializer> cls;

void begin_init_DriverStationModeThread(py::module &m) {
  cls = std::make_unique<rpybuild_DriverStationModeThread_initializer>(m);
}

void finish_init_DriverStationModeThread() {
  cls->finish();
  cls.reset();
}