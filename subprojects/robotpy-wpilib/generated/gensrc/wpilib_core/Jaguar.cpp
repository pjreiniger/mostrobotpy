
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/Jaguar.h>








#define RPYGEN_ENABLE_frc__Jaguar_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__Jaguar.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_Jaguar_initializer {


  

  












  
  using Jaguar_Trampoline = rpygen::PyTrampoline_frc__Jaguar<typename frc::Jaguar, typename rpygen::PyTrampolineCfg_frc__Jaguar<>>;
    static_assert(std::is_abstract<Jaguar_Trampoline>::value == false, "frc::Jaguar " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::Jaguar, Jaguar_Trampoline, frc::PWMMotorController> cls_Jaguar;

    

    
    

  py::module &m;

  
  rpybuild_Jaguar_initializer(py::module &m) :

  

  

  

  
    cls_Jaguar(m, "Jaguar"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_Jaguar.doc() =
    "Luminary Micro / Vex Robotics Jaguar Motor Controller with PWM control.\n"
"\n"
"Note that the Jaguar uses the following bounds for PWM values. These\n"
"values should work reasonably well for most controllers, but if users\n"
"experience issues such as asymmetric behavior around the deadband or\n"
"inability to saturate the controller in either direction, calibration is\n"
"recommended. The calibration procedure can be found in the Jaguar User\n"
"Manual available from Luminary Micro / Vex Robotics.\n"
"\n"
"- 2.310ms = full \"forward\"\n"
"- 1.550ms = the \"high end\" of the deadband range\n"
"- 1.507ms = center of the deadband range (off)\n"
"- 1.454ms = the \"low end\" of the deadband range\n"
"- 0.697ms = full \"reverse\"";

  cls_Jaguar
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructor for a Jaguar connected via PWM.\n"
"\n"
":param channel: The PWM channel that the Jaguar is attached to. 0-9 are\n"
"                on-board, 10-19 are on the MXP port")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_Jaguar_initializer

static std::unique_ptr<rpybuild_Jaguar_initializer> cls;

void begin_init_Jaguar(py::module &m) {
  cls = std::make_unique<rpybuild_Jaguar_initializer>(m);
}

void finish_init_Jaguar() {
  cls->finish();
  cls.reset();
}