
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/PWMMotorController.h>


#include <units_voltage_type_caster.h>







#define RPYGEN_ENABLE_frc__PWMMotorController_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__PWMMotorController.hpp>







#include <wpi/sendable/SendableBuilder.h>

#include <frc/DMA.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_PWMMotorController_initializer {


  

  












  
  using PWMMotorController_Trampoline = rpygen::PyTrampoline_frc__PWMMotorController<typename frc::PWMMotorController, typename rpygen::PyTrampolineCfg_frc__PWMMotorController<>>;
    static_assert(std::is_abstract<PWMMotorController_Trampoline>::value == false, "frc::PWMMotorController " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::PWMMotorController, PWMMotorController_Trampoline, frc::MotorController, frc::MotorSafety, wpi::Sendable> cls_PWMMotorController;

    

    
    

  py::module &m;

  
  rpybuild_PWMMotorController_initializer(py::module &m) :

  

  

  

  
    cls_PWMMotorController(m, "PWMMotorController"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_PWMMotorController.doc() =
    "Common base class for all PWM Motor Controllers.";

  cls_PWMMotorController
  
    
  .
def
("set", &frc::PWMMotorController::Set,
      py::arg("value"), release_gil(), py::doc(
    "Set the PWM value.\n"
"\n"
"The PWM value is set using a range of -1.0 to 1.0, appropriately scaling\n"
"the value for the FPGA.\n"
"\n"
":param value: The speed value between -1.0 and 1.0 to set.")
  )
  
  
  
    
  .
def
("setVoltage", &frc::PWMMotorController::SetVoltage,
      py::arg("output"), release_gil(), py::doc(
    "Sets the voltage output of the PWMMotorController. Compensates for\n"
"the current bus voltage to ensure that the desired voltage is output even\n"
"if the battery voltage is below 12V - highly useful when the voltage\n"
"outputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n"
"\n"
"NOTE: This function *must* be called regularly in order for voltage\n"
"compensation to work properly - unlike the ordinary set function, it is not\n"
"\"set it and forget it.\"\n"
"\n"
":param output: The voltage to output.")
  )
  
  
  
    
  .
def
("get", &frc::PWMMotorController::Get, release_gil(), py::doc(
    "Get the recently set value of the PWM. This value is affected by the\n"
"inversion property. If you want the value that is sent directly to the\n"
"MotorController, use PWM::GetSpeed() instead.\n"
"\n"
":returns: The most recently set value for the PWM between -1.0 and 1.0.")
  )
  
  
  
    
  .
def
("setInverted", &frc::PWMMotorController::SetInverted,
      py::arg("isInverted"), release_gil()
  )
  
  
  
    
  .
def
("getInverted", &frc::PWMMotorController::GetInverted, release_gil()
  )
  
  
  
    
  .
def
("disable", &frc::PWMMotorController::Disable, release_gil()
  )
  
  
  
    
  .
def
("stopMotor", &frc::PWMMotorController::StopMotor, release_gil()
  )
  
  
  
    
  .
def
("getDescription", &frc::PWMMotorController::GetDescription, release_gil()
  )
  
  
  
    
  .
def
("getChannel", &frc::PWMMotorController::GetChannel, release_gil()
  )
  
  
  
    
  .
def
("enableDeadbandElimination", &frc::PWMMotorController::EnableDeadbandElimination,
      py::arg("eliminateDeadband"), release_gil(), py::doc(
    "Optionally eliminate the deadband from a motor controller.\n"
"\n"
":param eliminateDeadband: If true, set the motor curve on the motor\n"
"                          controller to eliminate the deadband in the middle\n"
"                          of the range. Otherwise, keep the full range\n"
"                          without modifying any values.")
  )
  
  
  
    
  .
def
("addFollower", static_cast<void(frc::PWMMotorController::*)(PWMMotorController&)>(
        &frc::PWMMotorController::AddFollower),
      py::arg("follower"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Make the given PWM motor controller follow the output of this one.\n"
"\n"
":param follower: The motor controller follower.")
  )
  
  
  
    
  .def(py::init_alias<std::string_view, int>(),
      py::arg("name"), py::arg("channel"), release_gil(), py::doc(
    "Constructor for a PWM Motor %Controller connected via PWM.\n"
"\n"
":param name:    Name to use for SendableRegistry\n"
":param channel: The PWM channel that the controller is attached to. 0-9 are\n"
"                on-board, 10-19 are on the MXP port")
  )
  
  
  
    
  .
def
("_initSendable", static_cast<void(frc::PWMMotorController::*)(wpi::SendableBuilder&)>(&PWMMotorController_Trampoline::InitSendable),
      py::arg("builder"), release_gil()
  )
  
  
  
    .def_readonly("_m_pwm", &rpygen::PyTrampoline_frc__PWMMotorController<typename frc::PWMMotorController, typename rpygen::PyTrampolineCfg_frc__PWMMotorController<>>::m_pwm, py::doc(
    "PWM instances for motor controller."));

  


  }






}

}; // struct rpybuild_PWMMotorController_initializer

static std::unique_ptr<rpybuild_PWMMotorController_initializer> cls;

void begin_init_PWMMotorController(py::module &m) {
  cls = std::make_unique<rpybuild_PWMMotorController_initializer>(m);
}

void finish_init_PWMMotorController() {
  cls->finish();
  cls.reset();
}