
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/RobotState.h>
















#include <type_traits>


  using namespace frc;



PYBIND11_TYPE_CASTER_BASE_HOLDER(typename frc::RobotState, std::unique_ptr<typename frc::RobotState, py::nodelete>);



struct rpybuild_RobotState_initializer {


  

  












  py::class_<typename frc::RobotState, std::unique_ptr<typename frc::RobotState, py::nodelete>> cls_RobotState;

    

    
    

  py::module &m;

  
  rpybuild_RobotState_initializer(py::module &m) :

  

  

  

  
    cls_RobotState(m, "RobotState"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_RobotState.doc() =
    "Robot state utility functions.";

  cls_RobotState
  
    
  .
def_static
("isDisabled", &frc::RobotState::IsDisabled, release_gil(), py::doc(
    "Returns true if the robot is disabled.\n"
"\n"
":returns: True if the robot is disabled.")
  )
  
  
  
    
  .
def_static
("isEnabled", &frc::RobotState::IsEnabled, release_gil(), py::doc(
    "Returns true if the robot is enabled.\n"
"\n"
":returns: True if the robot is enabled.")
  )
  
  
  
    
  .
def_static
("isEStopped", &frc::RobotState::IsEStopped, release_gil(), py::doc(
    "Returns true if the robot is E-stopped.\n"
"\n"
":returns: True if the robot is E-stopped.")
  )
  
  
  
    
  .
def_static
("isTeleop", &frc::RobotState::IsTeleop, release_gil(), py::doc(
    "Returns true if the robot is in teleop mode.\n"
"\n"
":returns: True if the robot is in teleop mode.")
  )
  
  
  
    
  .
def_static
("isAutonomous", &frc::RobotState::IsAutonomous, release_gil(), py::doc(
    "Returns true if the robot is in autonomous mode.\n"
"\n"
":returns: True if the robot is in autonomous mode.")
  )
  
  
  
    
  .
def_static
("isTest", &frc::RobotState::IsTest, release_gil(), py::doc(
    "Returns true if the robot is in test mode.\n"
"\n"
":returns: True if the robot is in test mode.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_RobotState_initializer

static std::unique_ptr<rpybuild_RobotState_initializer> cls;

void begin_init_RobotState(py::module &m) {
  cls = std::make_unique<rpybuild_RobotState_initializer>(m);
}

void finish_init_RobotState() {
  cls->finish();
  cls.reset();
}