
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/PWMSparkMax.h>








#define RPYGEN_ENABLE_frc__PWMSparkMax_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__PWMSparkMax.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_PWMSparkMax_initializer {


  

  












  
  using PWMSparkMax_Trampoline = rpygen::PyTrampoline_frc__PWMSparkMax<typename frc::PWMSparkMax, typename rpygen::PyTrampolineCfg_frc__PWMSparkMax<>>;
    static_assert(std::is_abstract<PWMSparkMax_Trampoline>::value == false, "frc::PWMSparkMax " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::PWMSparkMax, PWMSparkMax_Trampoline, frc::PWMMotorController> cls_PWMSparkMax;

    

    
    

  py::module &m;

  
  rpybuild_PWMSparkMax_initializer(py::module &m) :

  

  

  

  
    cls_PWMSparkMax(m, "PWMSparkMax"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_PWMSparkMax.doc() =
    "REV Robotics SPARK MAX Motor %Controller.\n"
"\n"
"Note that the SPARK MAX uses the following bounds for PWM values. These\n"
"values should work reasonably well for most controllers, but if users\n"
"experience issues such as asymmetric behavior around the deadband or\n"
"inability to saturate the controller in either direction, calibration is\n"
"recommended. The calibration procedure can be found in the SPARK MAX User\n"
"Manual available from REV Robotics.\n"
"\n"
"- 2.003ms = full \"forward\"\n"
"- 1.550ms = the \"high end\" of the deadband range\n"
"- 1.500ms = center of the deadband range (off)\n"
"- 1.460ms = the \"low end\" of the deadband range\n"
"- 0.999ms = full \"reverse\"";

  cls_PWMSparkMax
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructor for a SPARK MAX.\n"
"\n"
":param channel: The PWM channel that the SPARK MAX is attached to. 0-9 are\n"
"                on-board, 10-19 are on the MXP port")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_PWMSparkMax_initializer

static std::unique_ptr<rpybuild_PWMSparkMax_initializer> cls;

void begin_init_PWMSparkMax(py::module &m) {
  cls = std::make_unique<rpybuild_PWMSparkMax_initializer>(m);
}

void finish_init_PWMSparkMax() {
  cls->finish();
  cls.reset();
}