
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/TimedRobot.h>


#include <pybind11/functional.h>

#include <units_time_type_caster.h>







#define RPYGEN_ENABLE_frc__TimedRobot_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__TimedRobot.hpp>









#include <type_traits>


  using namespace frc;



struct rpybuild_TimedRobot_initializer {


  

  












  
  using TimedRobot_Trampoline = rpygen::PyTrampoline_frc__TimedRobot<typename frc::TimedRobot, typename rpygen::PyTrampolineCfg_frc__TimedRobot<>>;
    static_assert(std::is_abstract<TimedRobot_Trampoline>::value == false, "frc::TimedRobot " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::TimedRobot, TimedRobot_Trampoline, frc::IterativeRobotBase> cls_TimedRobot;

    

    
    

  py::module &m;

  
  rpybuild_TimedRobot_initializer(py::module &m) :

  

  

  

  
    cls_TimedRobot(m, "TimedRobot"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  
    static constexpr auto kDefaultPeriod [[maybe_unused]] = frc::TimedRobot::kDefaultPeriod;
  


  

  cls_TimedRobot.doc() =
    "TimedRobot implements the IterativeRobotBase robot program framework.\n"
"\n"
"The TimedRobot class is intended to be subclassed by a user creating a\n"
"robot program.\n"
"\n"
"Periodic() functions from the base class are called on an interval by a\n"
"Notifier instance.";

  cls_TimedRobot
  
    
  .
def
("startCompetition", &frc::TimedRobot::StartCompetition, release_gil(), py::doc(
    "Provide an alternate \"main loop\" via StartCompetition().")
  )
  
  
  
    
  .
def
("endCompetition", &frc::TimedRobot::EndCompetition, release_gil(), py::doc(
    "Ends the main loop in StartCompetition().")
  )
  
  
  
    
  .def(py::init<units::second_t>(),
      py::arg("period") = (units::second_t)kDefaultPeriod, release_gil(), py::doc(
    "Constructor for TimedRobot.\n"
"\n"
":param period: Period.")
  )
  
  
  
    
  .
def
("addPeriodic", &frc::TimedRobot::AddPeriodic,
      py::arg("callback").none(false), py::arg("period"), py::arg("offset") = (units::second_t)0_s, release_gil(), py::doc(
    "Add a callback to run at a specific period with a starting time offset.\n"
"\n"
"This is scheduled on TimedRobot's Notifier, so TimedRobot and the callback\n"
"run synchronously. Interactions between them are thread-safe.\n"
"\n"
":param callback: The callback to run.\n"
":param period:   The period at which to run the callback.\n"
":param offset:   The offset from the common starting time. This is useful\n"
"                 for scheduling a callback in a different timeslot relative\n"
"                 to TimedRobot.")
  )
  
  
  
    .def_readonly_static("kDefaultPeriod", &frc::TimedRobot::kDefaultPeriod, py::doc(
    "Default loop period."))
  ;

  


  }






}

}; // struct rpybuild_TimedRobot_initializer

static std::unique_ptr<rpybuild_TimedRobot_initializer> cls;

void begin_init_TimedRobot(py::module &m) {
  cls = std::make_unique<rpybuild_TimedRobot_initializer>(m);
}

void finish_init_TimedRobot() {
  cls->finish();
  cls.reset();
}