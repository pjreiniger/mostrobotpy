
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/DMC60.h>








#define RPYGEN_ENABLE_frc__DMC60_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__DMC60.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_DMC60_initializer {


  

  












  
  using DMC60_Trampoline = rpygen::PyTrampoline_frc__DMC60<typename frc::DMC60, typename rpygen::PyTrampolineCfg_frc__DMC60<>>;
    static_assert(std::is_abstract<DMC60_Trampoline>::value == false, "frc::DMC60 " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::DMC60, DMC60_Trampoline, frc::PWMMotorController> cls_DMC60;

    

    
    

  py::module &m;

  
  rpybuild_DMC60_initializer(py::module &m) :

  

  

  

  
    cls_DMC60(m, "DMC60"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DMC60.doc() =
    "Digilent DMC 60 Motor %Controller.\n"
"\n"
"Note that the DMC 60 uses the following bounds for PWM values. These\n"
"values should work reasonably well for most controllers, but if users\n"
"experience issues such as asymmetric behavior around the deadband or\n"
"inability to saturate the controller in either direction, calibration is\n"
"recommended. The calibration procedure can be found in the DMC 60 User\n"
"Manual available from Digilent.\n"
"\n"
"- 2.004ms = full \"forward\"\n"
"- 1.520ms = the \"high end\" of the deadband range\n"
"- 1.500ms = center of the deadband range (off)\n"
"- 1.480ms = the \"low end\" of the deadband range\n"
"- 0.997ms = full \"reverse\"";

  cls_DMC60
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructor for a Digilent DMC 60.\n"
"\n"
":param channel: The PWM channel that the DMC 60 is attached to. 0-9 are\n"
"                on-board, 10-19 are on the MXP port")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DMC60_initializer

static std::unique_ptr<rpybuild_DMC60_initializer> cls;

void begin_init_DMC60(py::module &m) {
  cls = std::make_unique<rpybuild_DMC60_initializer>(m);
}

void finish_init_DMC60() {
  cls->finish();
  cls.reset();
}