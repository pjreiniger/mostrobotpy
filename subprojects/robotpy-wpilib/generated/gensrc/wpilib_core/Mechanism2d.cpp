
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/smartdashboard/Mechanism2d.h>








#define RPYGEN_ENABLE_frc__Mechanism2d_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__Mechanism2d.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_Mechanism2d_initializer {


  

  












  
  using Mechanism2d_Trampoline = rpygen::PyTrampoline_frc__Mechanism2d<typename frc::Mechanism2d, typename rpygen::PyTrampolineCfg_frc__Mechanism2d<>>;
    static_assert(std::is_abstract<Mechanism2d_Trampoline>::value == false, "frc::Mechanism2d " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::Mechanism2d, Mechanism2d_Trampoline, nt::NTSendable> cls_Mechanism2d;

    

    
    

  py::module &m;

  
  rpybuild_Mechanism2d_initializer(py::module &m) :

  

  

  

  
    cls_Mechanism2d(m, "Mechanism2d"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_Mechanism2d.doc() =
    "Visual 2D representation of arms, elevators, and general mechanisms through\n"
"a node-based API.\n"
"\n"
"A Mechanism2d object is published and contains at least one root node. A root\n"
"is the anchor point of other nodes (such as ligaments). Other nodes are\n"
"recursively appended based on other nodes.\n"
"\n"
"Except for the Mechanism2d container object, none of the objects should be\n"
"passed or interacted with by value! Obtain pointers from factory methods such\n"
"as Mechanism2d.GetRoot() and MechanismObject2d.Append<>(). The Mechanism2d\n"
"container object owns the root nodes, and each node internally owns the nodes\n"
"based on it. Beware not to let the Mechanism2d object out of scope - all\n"
"nodes will be recursively destructed!\n"
"\n"
"@see MechanismObject2d\n"
"@see MechanismLigament2d\n"
"@see MechanismRoot2d";

  cls_Mechanism2d
  
    
  .def(py::init<double, double, const Color8Bit&>(),
      py::arg("width"), py::arg("height"), py::arg("backgroundColor") = Color8Bit{0, 0, 32}, release_gil()
    , py::keep_alive<1, 4>(), py::doc(
    "Create a new Mechanism2d with the given dimensions and background color.\n"
"\n"
"The dimensions represent the canvas that all the nodes are drawn on. The\n"
"default color is dark blue.\n"
"\n"
":param width:           the width\n"
":param height:          the height\n"
":param backgroundColor: the background color")
  )
  
  
  
    
  .
def
("getRoot", &frc::Mechanism2d::GetRoot,
      py::arg("name"), py::arg("x"), py::arg("y"), release_gil(), py::return_value_policy::reference_internal, py::doc(
    "Get or create a root in this Mechanism2d with the given name and\n"
"position.\n"
"\n"
"If a root with the given name already exists, the given x and y\n"
"coordinates are not used.\n"
"\n"
":param name: the root name\n"
":param x:    the root x coordinate\n"
":param y:    the root y coordinate\n"
"\n"
":returns: a new root object, or the existing one with the given name.")
  )
  
  
  
    
  .
def
("setBackgroundColor", &frc::Mechanism2d::SetBackgroundColor,
      py::arg("color"), release_gil(), py::doc(
    "Set the Mechanism2d background color.\n"
"\n"
":param color: the new background color")
  )
  
  
  
    
  .
def
("initSendable", &frc::Mechanism2d::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_Mechanism2d_initializer

static std::unique_ptr<rpybuild_Mechanism2d_initializer> cls;

void begin_init_Mechanism2d(py::module &m) {
  cls = std::make_unique<rpybuild_Mechanism2d_initializer>(m);
}

void finish_init_Mechanism2d() {
  cls->finish();
  cls.reset();
}