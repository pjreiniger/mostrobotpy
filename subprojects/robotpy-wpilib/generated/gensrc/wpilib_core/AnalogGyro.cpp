
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/AnalogGyro.h>








#define RPYGEN_ENABLE_frc__AnalogGyro_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__AnalogGyro.hpp>







#include <wpi/sendable/SendableBuilder.h>

#include <frc/AnalogInput.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_AnalogGyro_initializer {


  

  












  
  using AnalogGyro_Trampoline = rpygen::PyTrampoline_frc__AnalogGyro<typename frc::AnalogGyro, typename rpygen::PyTrampolineCfg_frc__AnalogGyro<>>;
    static_assert(std::is_abstract<AnalogGyro_Trampoline>::value == false, "frc::AnalogGyro " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::AnalogGyro, AnalogGyro_Trampoline, wpi::Sendable> cls_AnalogGyro;

    

    
    

  py::module &m;

  
  rpybuild_AnalogGyro_initializer(py::module &m) :

  

  

  

  
    cls_AnalogGyro(m, "AnalogGyro"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  
    static constexpr auto kOversampleBits [[maybe_unused]] = frc::AnalogGyro::kOversampleBits;
  
    static constexpr auto kAverageBits [[maybe_unused]] = frc::AnalogGyro::kAverageBits;
  
    static constexpr auto kSamplesPerSecond [[maybe_unused]] = frc::AnalogGyro::kSamplesPerSecond;
  
    static constexpr auto kCalibrationSampleTime [[maybe_unused]] = frc::AnalogGyro::kCalibrationSampleTime;
  
    static constexpr auto kDefaultVoltsPerDegreePerSecond [[maybe_unused]] = frc::AnalogGyro::kDefaultVoltsPerDegreePerSecond;
  


  

  cls_AnalogGyro.doc() =
    "Use a rate gyro to return the robots heading relative to a starting position.\n"
"The Gyro class tracks the robots heading based on the starting position. As\n"
"the robot rotates the new heading is computed by integrating the rate of\n"
"rotation returned by the sensor. When the class is instantiated, it does a\n"
"short calibration routine where it samples the gyro while at rest to\n"
"determine the default offset. This is subtracted from each sample to\n"
"determine the heading. This gyro class must be used with a channel that is\n"
"assigned one of the Analog accumulators from the FPGA. See AnalogInput for\n"
"the current accumulator assignments.\n"
"\n"
"This class is for gyro sensors that connect to an analog input.";

  cls_AnalogGyro
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "%Gyro constructor using the Analog Input channel number.\n"
"\n"
":param channel: The analog channel the gyro is connected to. Gyros can only\n"
"                be used on on-board Analog Inputs 0-1.")
  )
  
  
  
    
  .def(py::init<std::shared_ptr<AnalogInput>>(),
      py::arg("channel"), release_gil(), py::doc(
    "%Gyro constructor with a precreated AnalogInput object.\n"
"\n"
"Use this constructor when the analog channel needs to be shared.\n"
"This object will not clean up the AnalogInput object when using this\n"
"constructor.\n"
"\n"
":param channel: A pointer to the AnalogInput object that the gyro is\n"
"                connected to.")
  )
  
  
  
    
  .def(py::init<int, int, double>(),
      py::arg("channel"), py::arg("center"), py::arg("offset"), release_gil(), py::doc(
    "%Gyro constructor using the Analog Input channel number with parameters for\n"
"presetting the center and offset values. Bypasses calibration.\n"
"\n"
":param channel: The analog channel the gyro is connected to. Gyros can only\n"
"                be used on on-board Analog Inputs 0-1.\n"
":param center:  Preset uncalibrated value to use as the accumulator center\n"
"                value.\n"
":param offset:  Preset uncalibrated value to use as the gyro offset.")
  )
  
  
  
    
  .def(py::init<std::shared_ptr<AnalogInput>, int, double>(),
      py::arg("channel"), py::arg("center"), py::arg("offset"), release_gil(), py::doc(
    "%Gyro constructor with a precreated AnalogInput object and calibrated\n"
"parameters.\n"
"\n"
"Use this constructor when the analog channel needs to be shared.\n"
"This object will not clean up the AnalogInput object when using this\n"
"constructor.\n"
"\n"
":param channel: A pointer to the AnalogInput object that the gyro is\n"
"                connected to.\n"
":param center:  Preset uncalibrated value to use as the accumulator center\n"
"                value.\n"
":param offset:  Preset uncalibrated value to use as the gyro offset.")
  )
  
  
  
    
  .
def
("getAngle", &frc::AnalogGyro::GetAngle, release_gil(), py::doc(
    "Return the actual angle in degrees that the robot is currently facing.\n"
"\n"
"The angle is based on the current accumulator value corrected by the\n"
"oversampling rate, the gyro type and the A/D calibration values. The angle\n"
"is continuous, that is it will continue from 360->361 degrees. This allows\n"
"algorithms that wouldn't want to see a discontinuity in the gyro output as\n"
"it sweeps from 360 to 0 on the second time around.\n"
"\n"
":returns: The current heading of the robot in degrees. This heading is based\n"
"          on integration of the returned rate from the gyro.")
  )
  
  
  
    
  .
def
("getRate", &frc::AnalogGyro::GetRate, release_gil(), py::doc(
    "Return the rate of rotation of the gyro\n"
"\n"
"The rate is based on the most recent reading of the gyro analog value\n"
"\n"
":returns: the current rate in degrees per second")
  )
  
  
  
    
  .
def
("getCenter", &frc::AnalogGyro::GetCenter, release_gil(), py::doc(
    "Return the gyro center value. If run after calibration,\n"
"the center value can be used as a preset later.\n"
"\n"
":returns: the current center value")
  )
  
  
  
    
  .
def
("getOffset", &frc::AnalogGyro::GetOffset, release_gil(), py::doc(
    "Return the gyro offset value. If run after calibration,\n"
"the offset value can be used as a preset later.\n"
"\n"
":returns: the current offset value")
  )
  
  
  
    
  .
def
("setSensitivity", &frc::AnalogGyro::SetSensitivity,
      py::arg("voltsPerDegreePerSecond"), release_gil(), py::doc(
    "Set the gyro sensitivity.\n"
"\n"
"This takes the number of volts/degree/second sensitivity of the gyro and\n"
"uses it in subsequent calculations to allow the code to work with multiple\n"
"gyros. This value is typically found in the gyro datasheet.\n"
"\n"
":param voltsPerDegreePerSecond: The sensitivity in Volts/degree/second")
  )
  
  
  
    
  .
def
("setDeadband", &frc::AnalogGyro::SetDeadband,
      py::arg("volts"), release_gil(), py::doc(
    "Set the size of the neutral zone.\n"
"\n"
"Any voltage from the gyro less than this amount from the center is\n"
"considered stationary.  Setting a deadband will decrease the amount of\n"
"drift when the gyro isn't rotating, but will make it less accurate.\n"
"\n"
":param volts: The size of the deadband in volts")
  )
  
  
  
    
  .
def
("reset", &frc::AnalogGyro::Reset, release_gil(), py::doc(
    "Reset the gyro.\n"
"\n"
"Resets the gyro to a heading of zero. This can be used if there is\n"
"significant drift in the gyro and it needs to be recalibrated after it has\n"
"been running.")
  )
  
  
  
    
  .
def
("initGyro", &frc::AnalogGyro::InitGyro, release_gil(), py::doc(
    "Initialize the gyro.\n"
"\n"
"Calibration is handled by Calibrate().")
  )
  
  
  
    
  .
def
("calibrate", &frc::AnalogGyro::Calibrate, release_gil(), py::doc(
    "Calibrate the gyro by running for a number of samples and computing the\n"
"center value. Then use the center value as the Accumulator center value for\n"
"subsequent measurements.\n"
"\n"
"It's important to make sure that the robot is not moving while the\n"
"centering calculations are in progress, this is typically done when the\n"
"robot is first turned on while it's sitting at rest before the competition\n"
"starts.")
  )
  
  
  
    
  .
def
("getRotation2d", &frc::AnalogGyro::GetRotation2d, release_gil(), py::doc(
    "Return the heading of the robot as a Rotation2d.\n"
"\n"
"The angle is continuous, that is it will continue from 360 to 361 degrees.\n"
"This allows algorithms that wouldn't want to see a discontinuity in the\n"
"gyro output as it sweeps past from 360 to 0 on the second time around.\n"
"\n"
"The angle is expected to increase as the gyro turns counterclockwise when\n"
"looked at from the top. It needs to follow the NWU axis convention.\n"
"\n"
":returns: the current heading of the robot as a Rotation2d. This heading is\n"
"          based on integration of the returned rate from the gyro.")
  )
  
  
  
    
  .
def
("getAnalogInput", &frc::AnalogGyro::GetAnalogInput, release_gil(), py::doc(
    "Gets the analog input for the gyro.\n"
"\n"
":returns: AnalogInput")
  )
  
  
  
    
  .
def
("initSendable", &frc::AnalogGyro::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  
    .def_readonly_static("kOversampleBits", &frc::AnalogGyro::kOversampleBits)
  
    .def_readonly_static("kAverageBits", &frc::AnalogGyro::kAverageBits)
  
    .def_readonly_static("kSamplesPerSecond", &frc::AnalogGyro::kSamplesPerSecond)
  
    .def_readonly_static("kCalibrationSampleTime", &frc::AnalogGyro::kCalibrationSampleTime)
  
    .def_readonly_static("kDefaultVoltsPerDegreePerSecond", &frc::AnalogGyro::kDefaultVoltsPerDegreePerSecond)
  ;

  


  }






}

}; // struct rpybuild_AnalogGyro_initializer

static std::unique_ptr<rpybuild_AnalogGyro_initializer> cls;

void begin_init_AnalogGyro(py::module &m) {
  cls = std::make_unique<rpybuild_AnalogGyro_initializer>(m);
}

void finish_init_AnalogGyro() {
  cls->finish();
  cls.reset();
}