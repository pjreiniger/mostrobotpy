
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/Counter.h>


#include <units_time_type_caster.h>







#define RPYGEN_ENABLE_frc__Counter_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__Counter.hpp>







#include <wpi/sendable/SendableBuilder.h>

#include <frc/DigitalGlitchFilter.h>

#include <frc/DMA.h>

#include <frc/DMASample.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_Counter_initializer {


  
    using EncodingType = frc::CounterBase::EncodingType;
  

  












  
  using Counter_Trampoline = rpygen::PyTrampoline_frc__Counter<typename frc::Counter, typename rpygen::PyTrampolineCfg_frc__Counter<>>;
    static_assert(std::is_abstract<Counter_Trampoline>::value == false, "frc::Counter " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::Counter, Counter_Trampoline, frc::CounterBase, wpi::Sendable> cls_Counter;

    
    
  py::enum_<frc::Counter::Mode> cls_Counter_enum1;
    

    
    

  py::module &m;

  
  rpybuild_Counter_initializer(py::module &m) :

  

  

  

  
    cls_Counter(m, "Counter"),

  
    cls_Counter_enum1
  (cls_Counter, "Mode"
  ),
  

  
  
  

    m(m)
  {
    
    

    
    
  
    cls_Counter_enum1
  
    .value("kTwoPulse", frc::Counter::Mode::kTwoPulse)
  
    .value("kSemiperiod", frc::Counter::Mode::kSemiperiod)
  
    .value("kPulseLength", frc::Counter::Mode::kPulseLength)
  
    .value("kExternalDirection", frc::Counter::Mode::kExternalDirection)
  ;

  

    
    
  }

void finish() {





  {
  
  
  using Mode [[maybe_unused]] = typename frc::Counter::Mode;
  
  


  

  cls_Counter.doc() =
    "Class for counting the number of ticks on a digital input channel.\n"
"\n"
"This is a general purpose class for counting repetitive events. It can return\n"
"the number of counts, the period of the most recent cycle, and detect when\n"
"the signal being counted has stopped by supplying a maximum cycle time.\n"
"\n"
"All counters will immediately start counting - Reset() them if you need them\n"
"to be zeroed before use.";

  cls_Counter
  
    
  .def(py::init<Mode>(),
      py::arg("mode") = frc::Counter::Mode::kTwoPulse, release_gil(), py::doc(
    "Create an instance of a counter where no sources are selected.\n"
"\n"
"They all must be selected by calling functions to specify the upsource and\n"
"the downsource independently.\n"
"\n"
"This creates a ChipObject counter and initializes status variables\n"
"appropriately.\n"
"\n"
"The counter will start counting immediately.\n"
"\n"
":param mode: The counter mode")
  )
  
  
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Create an instance of a Counter object.\n"
"\n"
"Create an up-Counter instance given a channel.\n"
"\n"
"The counter will start counting immediately.\n"
"\n"
":param channel: The DIO channel to use as the up source. 0-9 are on-board,\n"
"                10-25 are on the MXP")
  )
  
  
  
    
  .def(py::init<std::shared_ptr<DigitalSource>>(),
      py::arg("source"), release_gil(), py::doc(
    "Create an instance of a counter from a Digital Source (such as a Digital\n"
"Input).\n"
"\n"
"This is used if an existing digital input is to be shared by multiple other\n"
"objects such as encoders or if the Digital Source is not a Digital Input\n"
"channel (such as an Analog %Trigger).\n"
"\n"
"The counter will start counting immediately.\n"
"\n"
":param source: A pointer to the existing DigitalSource object. It will be\n"
"               set as the Up Source.")
  )
  
  
  
    
  .def(py::init<const AnalogTrigger&>(),
      py::arg("trigger"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Create an instance of a Counter object.\n"
"\n"
"Create an instance of a simple up-Counter given an analog trigger.\n"
"Use the trigger state output from the analog trigger.\n"
"\n"
"The counter will start counting immediately.\n"
"\n"
":param trigger: The reference to the existing AnalogTrigger object.")
  )
  
  
  
    
  .def(py::init<EncodingType, std::shared_ptr<DigitalSource>, std::shared_ptr<DigitalSource>, bool>(),
      py::arg("encodingType"), py::arg("upSource"), py::arg("downSource"), py::arg("inverted"), release_gil(), py::doc(
    "Create an instance of a Counter object.\n"
"\n"
"Creates a full up-down counter given two Digital Sources.\n"
"\n"
":param encodingType: The quadrature decoding mode (1x or 2x)\n"
":param upSource:     The pointer to the DigitalSource to set as the up\n"
"                     source\n"
":param downSource:   The pointer to the DigitalSource to set as the down\n"
"                     source\n"
":param inverted:     True to invert the output (reverse the direction)")
  )
  
  
  
    
  .
def
("setUpSource", static_cast<void(frc::Counter::*)(int)>(
        &frc::Counter::SetUpSource),
      py::arg("channel"), release_gil(), py::doc(
    "Set the upsource for the counter as a digital input channel.\n"
"\n"
":param channel: The DIO channel to use as the up source. 0-9 are on-board,\n"
"                10-25 are on the MXP")
  )
  
  
  
    
  .
def
("setUpSource", static_cast<void(frc::Counter::*)(std::shared_ptr<AnalogTrigger>, AnalogTriggerType)>(
        &frc::Counter::SetUpSource),
      py::arg("analogTrigger"), py::arg("triggerType"), release_gil(), py::doc(
    "Set the up counting source to be an analog trigger.\n"
"\n"
":param analogTrigger: The analog trigger object that is used for the Up\n"
"                      Source\n"
":param triggerType:   The analog trigger output that will trigger the\n"
"                      counter.")
  )
  
  
  
    
  .
def
("setUpSource", static_cast<void(frc::Counter::*)(std::shared_ptr<DigitalSource>)>(
        &frc::Counter::SetUpSource),
      py::arg("source"), release_gil(), py::doc(
    "Set the source object that causes the counter to count up.\n"
"\n"
"Set the up counting DigitalSource.\n"
"\n"
":param source: Pointer to the DigitalSource object to set as the up source")
  )
  
  
  
    
  .
def
("setUpSourceEdge", &frc::Counter::SetUpSourceEdge,
      py::arg("risingEdge"), py::arg("fallingEdge"), release_gil(), py::doc(
    "Set the edge sensitivity on an up counting source.\n"
"\n"
"Set the up source to either detect rising edges or falling edges or both.\n"
"\n"
":param risingEdge:  True to trigger on rising edges\n"
":param fallingEdge: True to trigger on falling edges")
  )
  
  
  
    
  .
def
("clearUpSource", &frc::Counter::ClearUpSource, release_gil(), py::doc(
    "Disable the up counting source to the counter.")
  )
  
  
  
    
  .
def
("setDownSource", static_cast<void(frc::Counter::*)(int)>(
        &frc::Counter::SetDownSource),
      py::arg("channel"), release_gil(), py::doc(
    "Set the down counting source to be a digital input channel.\n"
"\n"
":param channel: The DIO channel to use as the up source. 0-9 are on-board,\n"
"                10-25 are on the MXP")
  )
  
  
  
    
  .
def
("setDownSource", static_cast<void(frc::Counter::*)(std::shared_ptr<AnalogTrigger>, AnalogTriggerType)>(
        &frc::Counter::SetDownSource),
      py::arg("analogTrigger"), py::arg("triggerType"), release_gil(), py::doc(
    "Set the down counting source to be an analog trigger.\n"
"\n"
":param analogTrigger: The analog trigger object that is used for the Down\n"
"                      Source\n"
":param triggerType:   The analog trigger output that will trigger the\n"
"                      counter.")
  )
  
  
  
    
  .
def
("setDownSource", static_cast<void(frc::Counter::*)(std::shared_ptr<DigitalSource>)>(
        &frc::Counter::SetDownSource),
      py::arg("source"), release_gil()
  )
  
  
  
    
  .
def
("setDownSourceEdge", &frc::Counter::SetDownSourceEdge,
      py::arg("risingEdge"), py::arg("fallingEdge"), release_gil(), py::doc(
    "Set the edge sensitivity on a down counting source.\n"
"\n"
"Set the down source to either detect rising edges or falling edges.\n"
"\n"
":param risingEdge:  True to trigger on rising edges\n"
":param fallingEdge: True to trigger on falling edges")
  )
  
  
  
    
  .
def
("clearDownSource", &frc::Counter::ClearDownSource, release_gil(), py::doc(
    "Disable the down counting source to the counter.")
  )
  
  
  
    
  .
def
("setUpDownCounterMode", &frc::Counter::SetUpDownCounterMode, release_gil(), py::doc(
    "Set standard up / down counting mode on this counter.\n"
"\n"
"Up and down counts are sourced independently from two inputs.")
  )
  
  
  
    
  .
def
("setExternalDirectionMode", &frc::Counter::SetExternalDirectionMode, release_gil(), py::doc(
    "Set external direction mode on this counter.\n"
"\n"
"Counts are sourced on the Up counter input.\n"
"The Down counter input represents the direction to count.")
  )
  
  
  
    
  .
def
("setSemiPeriodMode", &frc::Counter::SetSemiPeriodMode,
      py::arg("highSemiPeriod"), release_gil(), py::doc(
    "Set Semi-period mode on this counter.\n"
"\n"
"Counts up on both rising and falling edges.")
  )
  
  
  
    
  .
def
("setPulseLengthMode", &frc::Counter::SetPulseLengthMode,
      py::arg("threshold"), release_gil(), py::doc(
    "Configure the counter to count in up or down based on the length of the\n"
"input pulse.\n"
"\n"
"This mode is most useful for direction sensitive gear tooth sensors.\n"
"\n"
":param threshold: The pulse length beyond which the counter counts the\n"
"                  opposite direction. Units are seconds.")
  )
  
  
  
    
  .
def
("setReverseDirection", &frc::Counter::SetReverseDirection,
      py::arg("reverseDirection"), release_gil(), py::doc(
    "Set the Counter to return reversed sensing on the direction.\n"
"\n"
"This allows counters to change the direction they are counting in the case\n"
"of 1X and 2X quadrature encoding only. Any other counter mode isn't\n"
"supported.\n"
"\n"
":param reverseDirection: true if the value counted should be negated.")
  )
  
  
  
    
  .
def
("setSamplesToAverage", &frc::Counter::SetSamplesToAverage,
      py::arg("samplesToAverage"), release_gil(), py::doc(
    "Set the Samples to Average which specifies the number of samples of the\n"
"timer to average when calculating the period. Perform averaging to account\n"
"for mechanical imperfections or as oversampling to increase resolution.\n"
"\n"
":param samplesToAverage: The number of samples to average from 1 to 127.")
  )
  
  
  
    
  .
def
("getSamplesToAverage", &frc::Counter::GetSamplesToAverage, release_gil(), py::doc(
    "Get the Samples to Average which specifies the number of samples of the\n"
"timer to average when calculating the period.\n"
"\n"
"Perform averaging to account for mechanical imperfections or as\n"
"oversampling to increase resolution.\n"
"\n"
":returns: The number of samples being averaged (from 1 to 127)")
  )
  
  
  
    
  .
def
("getFPGAIndex", &frc::Counter::GetFPGAIndex, release_gil()
  )
  
  
  
    
  .
def
("setDistancePerPulse", &frc::Counter::SetDistancePerPulse,
      py::arg("distancePerPulse"), release_gil(), py::doc(
    "Set the distance per pulse for this counter. This sets the multiplier used\n"
"to determine the distance driven based on the count value from the encoder.\n"
"Set this value based on the Pulses per Revolution and factor in any gearing\n"
"reductions. This distance can be in any units you like, linear or angular.\n"
"\n"
":param distancePerPulse: The scale factor that will be used to convert\n"
"                         pulses to useful units.")
  )
  
  
  
    
  .
def
("getDistance", &frc::Counter::GetDistance, release_gil(), py::doc(
    "Read the current scaled counter value. Read the value at this instant,\n"
"scaled by the distance per pulse (defaults to 1).\n"
"\n"
":returns: The distance since the last reset")
  )
  
  
  
    
  .
def
("getRate", &frc::Counter::GetRate, release_gil(), py::doc(
    "Get the current rate of the Counter. Read the current rate of the counter\n"
"accounting for the distance per pulse value. The default value for distance\n"
"per pulse (1) yields units of pulses per second.\n"
"\n"
":returns: The rate in units/sec")
  )
  
  
  
    
  .
def
("get", &frc::Counter::Get, release_gil(), py::doc(
    "Read the current counter value.\n"
"\n"
"Read the value at this instant. It may still be running, so it reflects the\n"
"current value. Next time it is read, it might have a different value.")
  )
  
  
  
    
  .
def
("reset", &frc::Counter::Reset, release_gil(), py::doc(
    "Reset the Counter to zero.\n"
"\n"
"Set the counter value to zero. This doesn't effect the running state of the\n"
"counter, just sets the current value to zero.")
  )
  
  
  
    
  .
def
("getPeriod", &frc::Counter::GetPeriod, release_gil(), py::doc(
    "Get the Period of the most recent count.\n"
"\n"
"Returns the time interval of the most recent count. This can be used for\n"
"velocity calculations to determine shaft speed.\n"
"\n"
":returns: The period between the last two pulses in units of seconds.")
  )
  
  
  
    
  .
def
("setMaxPeriod", &frc::Counter::SetMaxPeriod,
      py::arg("maxPeriod"), release_gil(), py::doc(
    "Set the maximum period where the device is still considered \"moving\".\n"
"\n"
"Sets the maximum period where the device is considered moving. This value\n"
"is used to determine the \"stopped\" state of the counter using the\n"
"GetStopped method.\n"
"\n"
":param maxPeriod: The maximum period where the counted device is considered\n"
"                  moving in seconds.")
  )
  
  
  
    
  .
def
("setUpdateWhenEmpty", &frc::Counter::SetUpdateWhenEmpty,
      py::arg("enabled"), release_gil(), py::doc(
    "Select whether you want to continue updating the event timer output when\n"
"there are no samples captured.\n"
"\n"
"The output of the event timer has a buffer of periods that are averaged and\n"
"posted to a register on the FPGA.  When the timer detects that the event\n"
"source has stopped (based on the MaxPeriod) the buffer of samples to be\n"
"averaged is emptied.  If you enable the update when empty, you will be\n"
"notified of the stopped source and the event time will report 0 samples.\n"
"If you disable update when empty, the most recent average will remain on\n"
"the output until a new sample is acquired.  You will never see 0 samples\n"
"output (except when there have been no events since an FPGA reset) and you\n"
"will likely not see the stopped bit become true (since it is updated at the\n"
"end of an average and there are no samples to average).\n"
"\n"
":param enabled: True to enable update when empty")
  )
  
  
  
    
  .
def
("getStopped", &frc::Counter::GetStopped, release_gil(), py::doc(
    "Determine if the clock is stopped.\n"
"\n"
"Determine if the clocked input is stopped based on the MaxPeriod value set\n"
"using the SetMaxPeriod method. If the clock exceeds the MaxPeriod, then the\n"
"device (and counter) are assumed to be stopped and it returns true.\n"
"\n"
":returns: Returns true if the most recent counter period exceeds the\n"
"          MaxPeriod value set by SetMaxPeriod.")
  )
  
  
  
    
  .
def
("getDirection", &frc::Counter::GetDirection, release_gil(), py::doc(
    "The last direction the counter value changed.\n"
"\n"
":returns: The last direction the counter value changed.")
  )
  
  
  
    
  .
def
("initSendable", &frc::Counter::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  
    .def_readonly("_m_upSource", &rpygen::PyTrampoline_frc__Counter<typename frc::Counter, typename rpygen::PyTrampolineCfg_frc__Counter<>>::m_upSource, py::doc(
    "Makes the counter count up."))
    .def_readonly("_m_downSource", &rpygen::PyTrampoline_frc__Counter<typename frc::Counter, typename rpygen::PyTrampolineCfg_frc__Counter<>>::m_downSource, py::doc(
    "Makes the counter count down."));

  


  }






}

}; // struct rpybuild_Counter_initializer

static std::unique_ptr<rpybuild_Counter_initializer> cls;

void begin_init_Counter(py::module &m) {
  cls = std::make_unique<rpybuild_Counter_initializer>(m);
}

void finish_init_Counter() {
  cls->finish();
  cls.reset();
}