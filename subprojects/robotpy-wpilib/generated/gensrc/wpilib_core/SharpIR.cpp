
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/SharpIR.h>


#include <units_length_type_caster.h>







#define RPYGEN_ENABLE_frc__SharpIR_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__SharpIR.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_SharpIR_initializer {


  

  












  
  using SharpIR_Trampoline = rpygen::PyTrampoline_frc__SharpIR<typename frc::SharpIR, typename rpygen::PyTrampolineCfg_frc__SharpIR<>>;
    static_assert(std::is_abstract<SharpIR_Trampoline>::value == false, "frc::SharpIR " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::SharpIR, SharpIR_Trampoline, wpi::Sendable> cls_SharpIR;

    

    
    

  py::module &m;

  
  rpybuild_SharpIR_initializer(py::module &m) :

  

  

  

  
    cls_SharpIR(m, "SharpIR"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  

  cls_SharpIR
  
    
  .
def_static
("GP2Y0A02YK0F", &frc::SharpIR::GP2Y0A02YK0F,
      py::arg("channel"), release_gil(), py::doc(
    "Sharp GP2Y0A02YK0F is an analog IR sensor capable of measuring\n"
"distances from 20cm to 150cm.\n"
"\n"
":param channel: Analog input channel the sensor is connected to\n"
"\n"
":returns: sensor object")
  )
  
  
  
    
  .
def_static
("GP2Y0A21YK0F", &frc::SharpIR::GP2Y0A21YK0F,
      py::arg("channel"), release_gil(), py::doc(
    "Sharp GP2Y0A21YK0F is an analog IR sensor capable of measuring\n"
"distances from 10cm to 80cm.\n"
"\n"
":param channel: Analog input channel the sensor is connected to\n"
"\n"
":returns: sensor object")
  )
  
  
  
    
  .
def_static
("GP2Y0A41SK0F", &frc::SharpIR::GP2Y0A41SK0F,
      py::arg("channel"), release_gil(), py::doc(
    "Sharp GP2Y0A41SK0F is an analog IR sensor capable of measuring\n"
"distances from 4cm to 30cm.\n"
"\n"
":param channel: Analog input channel the sensor is connected to\n"
"\n"
":returns: sensor object")
  )
  
  
  
    
  .
def_static
("GP2Y0A51SK0F", &frc::SharpIR::GP2Y0A51SK0F,
      py::arg("channel"), release_gil(), py::doc(
    "Sharp GP2Y0A51SK0F is an analog IR sensor capable of measuring\n"
"distances from 2cm to 15cm.\n"
"\n"
":param channel: Analog input channel the sensor is connected to\n"
"\n"
":returns: sensor object")
  )
  
  
  
    
  .def(py::init<int, double, double, double, double>(),
      py::arg("channel"), py::arg("a"), py::arg("b"), py::arg("minCM"), py::arg("maxCM"), release_gil(), py::doc(
    "Manually construct a SharpIR object. The distance is computed using this\n"
"formula: A*v ^ B. Prefer to use one of the static factories to create this\n"
"device instead.\n"
"\n"
":param channel: Analog input channel the sensor is connected to\n"
":param a:       Constant A\n"
":param b:       Constant B\n"
":param minCM:   Minimum distance to report in centimeters\n"
":param maxCM:   Maximum distance to report in centimeters")
  )
  
  
  
    
  .
def
("getChannel", &frc::SharpIR::GetChannel, release_gil(), py::doc(
    "Get the analog input channel number.\n"
"\n"
":returns: analog input channel")
  )
  
  
  
    
  .
def
("getRange", &frc::SharpIR::GetRange, release_gil(), py::doc(
    "Get the range from the distance sensor.\n"
"\n"
":returns: range of the target returned by the sensor")
  )
  
  
  
    
  .
def
("initSendable", &frc::SharpIR::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_SharpIR_initializer

static std::unique_ptr<rpybuild_SharpIR_initializer> cls;

void begin_init_SharpIR(py::module &m) {
  cls = std::make_unique<rpybuild_SharpIR_initializer>(m);
}

void finish_init_SharpIR() {
  cls->finish();
  cls.reset();
}