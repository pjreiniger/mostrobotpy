
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/SensorUtil.h>
















#include <type_traits>


  using namespace frc;



PYBIND11_TYPE_CASTER_BASE_HOLDER(typename frc::SensorUtil, std::unique_ptr<typename frc::SensorUtil, py::nodelete>);



struct rpybuild_SensorUtil_initializer {


  

  












  py::class_<typename frc::SensorUtil, std::unique_ptr<typename frc::SensorUtil, py::nodelete>> cls_SensorUtil;

    

    
    

  py::module &m;

  
  rpybuild_SensorUtil_initializer(py::module &m) :

  

  

  

  
    cls_SensorUtil(m, "SensorUtil", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_SensorUtil.doc() =
    "Stores most recent status information as well as containing utility functions\n"
"for checking channels and error processing.";

  cls_SensorUtil
  
    
  .
def_static
("getDefaultCTREPCMModule", &frc::SensorUtil::GetDefaultCTREPCMModule, release_gil(), py::doc(
    "Get the number of the default solenoid module.\n"
"\n"
":returns: The number of the default solenoid module.")
  )
  
  
  
    
  .
def_static
("getDefaultREVPHModule", &frc::SensorUtil::GetDefaultREVPHModule, release_gil(), py::doc(
    "Get the number of the default solenoid module.\n"
"\n"
":returns: The number of the default solenoid module.")
  )
  
  
  
    
  .
def_static
("checkDigitalChannel", &frc::SensorUtil::CheckDigitalChannel,
      py::arg("channel"), release_gil(), py::doc(
    "Check that the digital channel number is valid.\n"
"\n"
"Verify that the channel number is one of the legal channel numbers. Channel\n"
"numbers are 0-based.\n"
"\n"
":returns: Digital channel is valid")
  )
  
  
  
    
  .
def_static
("checkRelayChannel", &frc::SensorUtil::CheckRelayChannel,
      py::arg("channel"), release_gil(), py::doc(
    "Check that the relay channel number is valid.\n"
"\n"
"Verify that the channel number is one of the legal channel numbers. Channel\n"
"numbers are 0-based.\n"
"\n"
":returns: Relay channel is valid")
  )
  
  
  
    
  .
def_static
("checkPWMChannel", &frc::SensorUtil::CheckPWMChannel,
      py::arg("channel"), release_gil(), py::doc(
    "Check that the digital channel number is valid.\n"
"\n"
"Verify that the channel number is one of the legal channel numbers. Channel\n"
"numbers are 0-based.\n"
"\n"
":returns: PWM channel is valid")
  )
  
  
  
    
  .
def_static
("checkAnalogInputChannel", &frc::SensorUtil::CheckAnalogInputChannel,
      py::arg("channel"), release_gil(), py::doc(
    "Check that the analog input number is value.\n"
"\n"
"Verify that the analog input number is one of the legal channel numbers.\n"
"Channel numbers are 0-based.\n"
"\n"
":returns: Analog channel is valid")
  )
  
  
  
    
  .
def_static
("checkAnalogOutputChannel", &frc::SensorUtil::CheckAnalogOutputChannel,
      py::arg("channel"), release_gil(), py::doc(
    "Check that the analog output number is valid.\n"
"\n"
"Verify that the analog output number is one of the legal channel numbers.\n"
"Channel numbers are 0-based.\n"
"\n"
":returns: Analog channel is valid")
  )
  
  
  
    .def_readonly_static("kDigitalChannels", &frc::SensorUtil::kDigitalChannels)
  
    .def_readonly_static("kAnalogInputs", &frc::SensorUtil::kAnalogInputs)
  
    .def_readonly_static("kAnalogOutputs", &frc::SensorUtil::kAnalogOutputs)
  
    .def_readonly_static("kPwmChannels", &frc::SensorUtil::kPwmChannels)
  
    .def_readonly_static("kRelayChannels", &frc::SensorUtil::kRelayChannels)
  ;

  


  }






}

}; // struct rpybuild_SensorUtil_initializer

static std::unique_ptr<rpybuild_SensorUtil_initializer> cls;

void begin_init_SensorUtil(py::module &m) {
  cls = std::make_unique<rpybuild_SensorUtil_initializer>(m);
}

void finish_init_SensorUtil() {
  cls->finish();
  cls.reset();
}