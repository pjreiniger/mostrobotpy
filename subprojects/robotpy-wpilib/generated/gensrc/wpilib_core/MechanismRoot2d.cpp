
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/smartdashboard/MechanismRoot2d.h>


#include <units_angle_type_caster.h>







#define RPYGEN_ENABLE_frc__MechanismRoot2d_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__MechanismRoot2d.hpp>







#include <frc/smartdashboard/MechanismLigament2d.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_MechanismRoot2d_initializer {


  

  












  
  using MechanismRoot2d_Trampoline = rpygen::PyTrampoline_frc__MechanismRoot2d<typename frc::MechanismRoot2d, typename rpygen::PyTrampolineCfg_frc__MechanismRoot2d<>>;
    static_assert(std::is_abstract<MechanismRoot2d_Trampoline>::value == false, "frc::MechanismRoot2d " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::MechanismRoot2d, MechanismRoot2d_Trampoline> cls_MechanismRoot2d;

    

    
    

  py::module &m;

  
  rpybuild_MechanismRoot2d_initializer(py::module &m) :

  

  

  

  
    cls_MechanismRoot2d(m, "MechanismRoot2d"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_MechanismRoot2d.doc() =
    "Root Mechanism2d node.\n"
"\n"
"A root is the anchor point of other nodes (such as ligaments).\n"
"\n"
"Do not create objects of this class directly! Obtain pointers from the\n"
"Mechanism2d.GetRoot() factory method.\n"
"\n"
"Append other nodes by using Append().";

  cls_MechanismRoot2d
  
    
  .
def
("setPosition", &frc::MechanismRoot2d::SetPosition,
      py::arg("x"), py::arg("y"), release_gil(), py::doc(
    "Set the root's position.\n"
"\n"
":param x: new x coordinate\n"
":param y: new y coordinate")
  )
  
  
  ;

  


  }







  cls_MechanismRoot2d
  .def("getName", [](MechanismRoot2d *self) { return self->GetName(); }, release_gil())
  .def("appendLigament", [](MechanismRoot2d *self,
    std::string_view name, double length, units::degree_t angle,
    double lineWidth, const frc::Color8Bit& color) {
      return self->Append<MechanismLigament2d>(name, length, angle, lineWidth, color);
    },
    py::arg("name"), py::arg("length"), py::arg("angle"),
    py::arg("lineWidth") = 6, py::arg("color") = frc::Color8Bit{235, 137, 52},
    release_gil(), "Append a ligament node",
    py::return_value_policy::reference_internal)
  ;

}

}; // struct rpybuild_MechanismRoot2d_initializer

static std::unique_ptr<rpybuild_MechanismRoot2d_initializer> cls;

void begin_init_MechanismRoot2d(py::module &m) {
  cls = std::make_unique<rpybuild_MechanismRoot2d_initializer>(m);
}

void finish_init_MechanismRoot2d() {
  cls->finish();
  cls.reset();
}