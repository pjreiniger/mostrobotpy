
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/livewindow/LiveWindow.h>


#include <pybind11/functional.h>













#include <wpi/sendable/Sendable.h>

#include <pybind11/functional.h>



#include <type_traits>


  using namespace wpi;

  using namespace frc;



struct rpybuild_LiveWindow_initializer {


  

  












  py::class_<typename frc::LiveWindow> cls_LiveWindow;

    

    
    

  py::module &m;

  
  rpybuild_LiveWindow_initializer(py::module &m) :

  

  

  

  
    cls_LiveWindow(m, "LiveWindow", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_LiveWindow.doc() =
    "The LiveWindow class is the public interface for putting sensors and\n"
"actuators on the LiveWindow.";

  cls_LiveWindow
  
    
  .
def_static
("setEnabledCallback", &frc::LiveWindow::SetEnabledCallback,
      py::arg("func").none(false), release_gil(), py::doc(
    "Sets function to be called when LiveWindow is enabled.\n"
"\n"
":param func: function (or nullptr for none)")
  )
  
  
  
    
  .
def_static
("setDisabledCallback", &frc::LiveWindow::SetDisabledCallback,
      py::arg("func").none(false), release_gil(), py::doc(
    "Sets function to be called when LiveWindow is disabled.\n"
"\n"
":param func: function (or nullptr for none)")
  )
  
  
  
    
  .
def_static
("enableTelemetry", &frc::LiveWindow::EnableTelemetry,
      py::arg("component"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Enable telemetry for a single component.\n"
"\n"
":param component: sendable")
  )
  
  
  
    
  .
def_static
("disableTelemetry", &frc::LiveWindow::DisableTelemetry,
      py::arg("component"), release_gil()
    , py::keep_alive<1, 2>(), py::doc(
    "Disable telemetry for a single component.\n"
"\n"
":param component: sendable")
  )
  
  
  
    
  .
def_static
("disableAllTelemetry", &frc::LiveWindow::DisableAllTelemetry, release_gil(), py::doc(
    "Disable ALL telemetry.")
  )
  
  
  
    
  .
def_static
("enableAllTelemetry", &frc::LiveWindow::EnableAllTelemetry, release_gil(), py::doc(
    "Enable ALL telemetry.")
  )
  
  
  
    
  .
def_static
("isEnabled", &frc::LiveWindow::IsEnabled, release_gil(), py::doc(
    "Returns true if LiveWindow is enabled.\n"
"\n"
":returns: True if LiveWindow is enabled.")
  )
  
  
  
    
  .
def_static
("setEnabled", &frc::LiveWindow::SetEnabled,
      py::arg("enabled"), release_gil(), py::doc(
    "Change the enabled status of LiveWindow.\n"
"\n"
"If it changes to enabled, start livewindow running otherwise stop it")
  )
  
  
  
    
  .
def_static
("updateValues", &frc::LiveWindow::UpdateValues, release_gil(), py::doc(
    "Tell all the sensors to update (send) their values.\n"
"\n"
"Actuators are handled through callbacks on their value changing from the\n"
"SmartDashboard widgets.")
  )
  
  
  ;

  


  }







  static int unused;
py::capsule cleanup(&unused, [](void *) {
  frc::LiveWindow::SetEnabledCallback(nullptr);
  frc::LiveWindow::SetDisabledCallback(nullptr);
});
m.add_object("_lw_cleanup", cleanup);


}

}; // struct rpybuild_LiveWindow_initializer

static std::unique_ptr<rpybuild_LiveWindow_initializer> cls;

void begin_init_LiveWindow(py::module &m) {
  cls = std::make_unique<rpybuild_LiveWindow_initializer>(m);
}

void finish_init_LiveWindow() {
  cls->finish();
  cls.reset();
}