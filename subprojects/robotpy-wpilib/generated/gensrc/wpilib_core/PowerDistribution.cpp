
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/PowerDistribution.h>


#include <pybind11/stl.h>







#define RPYGEN_ENABLE_frc__PowerDistribution_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__PowerDistribution.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_PowerDistribution_initializer {


  

  












  
  using PowerDistribution_Trampoline = rpygen::PyTrampoline_frc__PowerDistribution<typename frc::PowerDistribution, typename rpygen::PyTrampolineCfg_frc__PowerDistribution<>>;
    static_assert(std::is_abstract<PowerDistribution_Trampoline>::value == false, "frc::PowerDistribution " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::PowerDistribution, PowerDistribution_Trampoline, wpi::Sendable> cls_PowerDistribution;

    
    
  py::enum_<frc::PowerDistribution::ModuleType> cls_PowerDistribution_enum1;
    

    
    
    py::class_<typename frc::PowerDistribution::Version> cls_Version;

    

    
    
    
    py::class_<typename frc::PowerDistribution::Faults> cls_Faults;

    

    
    
    
    py::class_<typename frc::PowerDistribution::StickyFaults> cls_StickyFaults;

    

    
    
    

  py::module &m;

  
  rpybuild_PowerDistribution_initializer(py::module &m) :

  

  

  

  
    cls_PowerDistribution(m, "PowerDistribution"),

  
    cls_PowerDistribution_enum1
  (cls_PowerDistribution, "ModuleType"
  ,
    "Power distribution module type."),
  

  
  
    cls_Version(cls_PowerDistribution, "Version"),

  

  
  
  
    cls_Faults(cls_PowerDistribution, "Faults"),

  

  
  
  
    cls_StickyFaults(cls_PowerDistribution, "StickyFaults"),

  

  
  
  
  

    m(m)
  {
    
    

    
    
  
    cls_PowerDistribution_enum1
  
    .value("kCTRE", frc::PowerDistribution::ModuleType::kCTRE,
      "CTRE (Cross The Road Electronics) CTRE Power Distribution Panel (PDP).")
  
    .value("kRev", frc::PowerDistribution::ModuleType::kRev,
      "REV Power Distribution Hub (PDH).")
  ;

  

    
    
  

    
    
  

    
    
  

    
    
  }

void finish() {





  {
  
  using Version [[maybe_unused]] = typename frc::PowerDistribution::Version;
  
  using Faults [[maybe_unused]] = typename frc::PowerDistribution::Faults;
  
  using StickyFaults [[maybe_unused]] = typename frc::PowerDistribution::StickyFaults;
  
  
  using ModuleType [[maybe_unused]] = typename frc::PowerDistribution::ModuleType;
  
  
    static constexpr auto kDefaultModule [[maybe_unused]] = frc::PowerDistribution::kDefaultModule;
  


  

  cls_PowerDistribution.doc() =
    "Class for getting voltage, current, temperature, power and energy from the\n"
"CTRE Power Distribution Panel (PDP) or REV Power Distribution Hub (PDH).";

  cls_PowerDistribution
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "Constructs a PowerDistribution object.\n"
"\n"
"Detects the connected PDP/PDH using the default CAN ID (0 for CTRE and 1\n"
"for REV).")
  )
  
  
  
    
  .def(py::init<int, ModuleType>(),
      py::arg("module"), py::arg("moduleType"), release_gil(), py::doc(
    "Constructs a PowerDistribution object.\n"
"\n"
":param module:     The CAN ID of the PDP/PDH\n"
":param moduleType: The type of module")
  )
  
  
  
    
  .
def
("getNumChannels", &frc::PowerDistribution::GetNumChannels, release_gil(), py::doc(
    "Gets the number of channels for this power distribution object.\n"
"\n"
":returns: Number of output channels (16 for PDP, 24 for PDH).")
  )
  
  
  
    
  .
def
("getVoltage", &frc::PowerDistribution::GetVoltage, release_gil(), py::doc(
    "Query the input voltage of the PDP/PDH.\n"
"\n"
":returns: The input voltage in volts")
  )
  
  
  
    
  .
def
("getTemperature", &frc::PowerDistribution::GetTemperature, release_gil(), py::doc(
    "Query the temperature of the PDP.\n"
"\n"
"Not supported on the Rev PDH and returns 0.\n"
"\n"
":returns: The temperature in degrees Celsius")
  )
  
  
  
    
  .
def
("getCurrent", &frc::PowerDistribution::GetCurrent,
      py::arg("channel"), release_gil(), py::doc(
    "Query the current of a single channel of the PDP/PDH.\n"
"\n"
":param channel: the channel to query (0-15 for PDP, 0-23 for PDH)\n"
"\n"
":returns: The current of the channel in Amperes")
  )
  
  
  
    
  .
def
("getAllCurrents", &frc::PowerDistribution::GetAllCurrents, release_gil(), py::doc(
    "Query all currents of the PDP.\n"
"\n"
":returns: The current of each channel in Amperes")
  )
  
  
  
    
  .
def
("getTotalCurrent", &frc::PowerDistribution::GetTotalCurrent, release_gil(), py::doc(
    "Query the total current of all monitored PDP/PDH channels.\n"
"\n"
":returns: The total current drawn from all channels in Amperes")
  )
  
  
  
    
  .
def
("getTotalPower", &frc::PowerDistribution::GetTotalPower, release_gil(), py::doc(
    "Query the total power drawn from all monitored PDP channels.\n"
"\n"
"Not supported on the Rev PDH and returns 0.\n"
"\n"
":returns: The total power drawn in Watts")
  )
  
  
  
    
  .
def
("getTotalEnergy", &frc::PowerDistribution::GetTotalEnergy, release_gil(), py::doc(
    "Query the total energy drawn from the monitored PDP channels.\n"
"\n"
"Not supported on the Rev PDH and returns 0.\n"
"\n"
":returns: The total energy drawn in Joules")
  )
  
  
  
    
  .
def
("resetTotalEnergy", &frc::PowerDistribution::ResetTotalEnergy, release_gil(), py::doc(
    "Reset the total energy drawn from the PDP.\n"
"\n"
"Not supported on the Rev PDH and does nothing.\n"
"\n"
"@see PowerDistribution#GetTotalEnergy")
  )
  
  
  
    
  .
def
("clearStickyFaults", &frc::PowerDistribution::ClearStickyFaults, release_gil(), py::doc(
    "Remove all of the fault flags on the PDP/PDH.")
  )
  
  
  
    
  .
def
("getModule", &frc::PowerDistribution::GetModule, release_gil(), py::doc(
    "Gets module number (CAN ID).")
  )
  
  
  
    
  .
def
("getType", &frc::PowerDistribution::GetType, release_gil(), py::doc(
    "Gets module type.")
  )
  
  
  
    
  .
def
("getSwitchableChannel", &frc::PowerDistribution::GetSwitchableChannel, release_gil(), py::doc(
    "Gets whether the PDH switchable channel is turned on or off. Returns false\n"
"with the CTRE PDP.\n"
"\n"
":returns: The output state of the PDH switchable channel")
  )
  
  
  
    
  .
def
("setSwitchableChannel", &frc::PowerDistribution::SetSwitchableChannel,
      py::arg("enabled"), release_gil(), py::doc(
    "Sets the PDH switchable channel on or off. Does nothing with the CTRE PDP.\n"
"\n"
":param enabled: Whether to turn the PDH switchable channel on or off")
  )
  
  
  
    
  .
def
("getVersion", &frc::PowerDistribution::GetVersion, release_gil()
  )
  
  
  
    
  .
def
("getFaults", &frc::PowerDistribution::GetFaults, release_gil(), py::doc(
    "Returns the power distribution faults.\n"
"\n"
"On a CTRE PDP, this will return an object with no faults active.\n"
"\n"
":returns: The power distribution faults.")
  )
  
  
  
    
  .
def
("getStickyFaults", &frc::PowerDistribution::GetStickyFaults, release_gil(), py::doc(
    "Returns the power distribution sticky faults.\n"
"\n"
"On a CTRE PDP, this will return an object with no faults active.\n"
"\n"
":returns: The power distribution sticky faults.")
  )
  
  
  
    
  .
def
("initSendable", &frc::PowerDistribution::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  
    .def_readonly_static("kDefaultModule", &frc::PowerDistribution::kDefaultModule, py::doc(
    "Default module number."))
  ;

  


  

  cls_Version.doc() =
    "Version and device data received from a PowerDistribution device";

  cls_Version
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("FirmwareMajor", &frc::PowerDistribution::Version::FirmwareMajor, py::doc(
    "Firmware major version number."))
  
    .def_readwrite("FirmwareMinor", &frc::PowerDistribution::Version::FirmwareMinor, py::doc(
    "Firmware minor version number."))
  
    .def_readwrite("FirmwareFix", &frc::PowerDistribution::Version::FirmwareFix, py::doc(
    "Firmware fix version number."))
  
    .def_readwrite("HardwareMinor", &frc::PowerDistribution::Version::HardwareMinor, py::doc(
    "Hardware minor version number."))
  
    .def_readwrite("HardwareMajor", &frc::PowerDistribution::Version::HardwareMajor, py::doc(
    "Hardware major version number."))
  
    .def_readwrite("UniqueId", &frc::PowerDistribution::Version::UniqueId, py::doc(
    "Unique ID."))
  ;

  


  
  

  cls_Faults.doc() =
    "Faults for a PowerDistribution device. These faults are only active while\n"
"the condition is active.";

  cls_Faults
  
    .def(py::init<>(), release_gil())
  
    
  .
def
("getBreakerFault", &frc::PowerDistribution::Faults::GetBreakerFault,
      py::arg("channel"), release_gil(), py::doc(
    "Gets whether there is a breaker fault at a specified channel.\n"
"\n"
":param channel: Channel to check for faults.\n"
"\n"
":returns: If there is a breaker fault.\n"
"          @throws A ChannelIndexOutOfRange error if the given int is outside of the\n"
"          range supported by the hardware.")
  )
  
  
  
    .def_property("Channel0BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel0BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel0BreakerFault = v; }, py::doc(
    "Breaker fault on channel 0.")
    )
  
    .def_property("Channel1BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel1BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel1BreakerFault = v; }, py::doc(
    "Breaker fault on channel 1.")
    )
  
    .def_property("Channel2BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel2BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel2BreakerFault = v; }, py::doc(
    "Breaker fault on channel 2.")
    )
  
    .def_property("Channel3BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel3BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel3BreakerFault = v; }, py::doc(
    "Breaker fault on channel 3.")
    )
  
    .def_property("Channel4BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel4BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel4BreakerFault = v; }, py::doc(
    "Breaker fault on channel 4.")
    )
  
    .def_property("Channel5BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel5BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel5BreakerFault = v; }, py::doc(
    "Breaker fault on channel 5.")
    )
  
    .def_property("Channel6BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel6BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel6BreakerFault = v; }, py::doc(
    "Breaker fault on channel 6.")
    )
  
    .def_property("Channel7BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel7BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel7BreakerFault = v; }, py::doc(
    "Breaker fault on channel 7.")
    )
  
    .def_property("Channel8BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel8BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel8BreakerFault = v; }, py::doc(
    "Breaker fault on channel 8.")
    )
  
    .def_property("Channel9BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel9BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel9BreakerFault = v; }, py::doc(
    "Breaker fault on channel 9.")
    )
  
    .def_property("Channel10BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel10BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel10BreakerFault = v; }, py::doc(
    "Breaker fault on channel 10.")
    )
  
    .def_property("Channel11BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel11BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel11BreakerFault = v; }, py::doc(
    "Breaker fault on channel 12.")
    )
  
    .def_property("Channel12BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel12BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel12BreakerFault = v; }, py::doc(
    "Breaker fault on channel 13.")
    )
  
    .def_property("Channel13BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel13BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel13BreakerFault = v; }, py::doc(
    "Breaker fault on channel 14.")
    )
  
    .def_property("Channel14BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel14BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel14BreakerFault = v; }, py::doc(
    "Breaker fault on channel 15.")
    )
  
    .def_property("Channel15BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel15BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel15BreakerFault = v; }, py::doc(
    "Breaker fault on channel 16.")
    )
  
    .def_property("Channel16BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel16BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel16BreakerFault = v; }, py::doc(
    "Breaker fault on channel 17.")
    )
  
    .def_property("Channel17BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel17BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel17BreakerFault = v; }, py::doc(
    "Breaker fault on channel 18.")
    )
  
    .def_property("Channel18BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel18BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel18BreakerFault = v; }, py::doc(
    "Breaker fault on channel 19.")
    )
  
    .def_property("Channel19BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel19BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel19BreakerFault = v; }, py::doc(
    "Breaker fault on channel 20.")
    )
  
    .def_property("Channel20BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel20BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel20BreakerFault = v; }, py::doc(
    "Breaker fault on channel 21.")
    )
  
    .def_property("Channel21BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel21BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel21BreakerFault = v; }, py::doc(
    "Breaker fault on channel 22.")
    )
  
    .def_property("Channel22BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel22BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel22BreakerFault = v; }, py::doc(
    "Breaker fault on channel 23.")
    )
  
    .def_property("Channel23BreakerFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Channel23BreakerFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Channel23BreakerFault = v; }, py::doc(
    "Breaker fault on channel 24.")
    )
  
    .def_property("Brownout",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.Brownout; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.Brownout = v; }, py::doc(
    "The input voltage is below the minimum voltage.")
    )
  
    .def_property("CanWarning",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.CanWarning; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.CanWarning = v; }, py::doc(
    "A warning was raised by the device's CAN controller.")
    )
  
    .def_property("HardwareFault",  
        [](const frc::PowerDistribution::Faults& inst) -> uint32_t { return inst.HardwareFault; },
        [](frc::PowerDistribution::Faults& inst, uint32_t v) {inst.HardwareFault = v; }, py::doc(
    "The hardware on the device has malfunctioned.")
    )
  ;

  


  
  

  cls_StickyFaults.doc() =
    "Sticky faults for a PowerDistribution device. These faults will remain\n"
"active until they are reset by the user.";

  cls_StickyFaults
  
    .def(py::init<>(), release_gil())
  
    
  .
def
("getBreakerFault", &frc::PowerDistribution::StickyFaults::GetBreakerFault,
      py::arg("channel"), release_gil(), py::doc(
    "Gets whether there is a sticky breaker fault at the specified channel.\n"
"\n"
":param channel: Index to check for sticky faults.\n"
"\n"
":returns: True if there is a sticky breaker fault at the channel, otherwise\n"
"          false.\n"
"          @throws A ChannelIndexOutOfRange error if the provided channel is outside\n"
"          of the range supported by the hardware.")
  )
  
  
  
    .def_property("Channel0BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel0BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel0BreakerFault = v; }, py::doc(
    "Breaker fault on channel 0.")
    )
  
    .def_property("Channel1BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel1BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel1BreakerFault = v; }, py::doc(
    "Breaker fault on channel 1.")
    )
  
    .def_property("Channel2BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel2BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel2BreakerFault = v; }, py::doc(
    "Breaker fault on channel 2.")
    )
  
    .def_property("Channel3BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel3BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel3BreakerFault = v; }, py::doc(
    "Breaker fault on channel 3.")
    )
  
    .def_property("Channel4BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel4BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel4BreakerFault = v; }, py::doc(
    "Breaker fault on channel 4.")
    )
  
    .def_property("Channel5BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel5BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel5BreakerFault = v; }, py::doc(
    "Breaker fault on channel 5.")
    )
  
    .def_property("Channel6BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel6BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel6BreakerFault = v; }, py::doc(
    "Breaker fault on channel 6.")
    )
  
    .def_property("Channel7BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel7BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel7BreakerFault = v; }, py::doc(
    "Breaker fault on channel 7.")
    )
  
    .def_property("Channel8BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel8BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel8BreakerFault = v; }, py::doc(
    "Breaker fault on channel 8.")
    )
  
    .def_property("Channel9BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel9BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel9BreakerFault = v; }, py::doc(
    "Breaker fault on channel 9.")
    )
  
    .def_property("Channel10BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel10BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel10BreakerFault = v; }, py::doc(
    "Breaker fault on channel 10.")
    )
  
    .def_property("Channel11BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel11BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel11BreakerFault = v; }, py::doc(
    "Breaker fault on channel 12.")
    )
  
    .def_property("Channel12BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel12BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel12BreakerFault = v; }, py::doc(
    "Breaker fault on channel 13.")
    )
  
    .def_property("Channel13BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel13BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel13BreakerFault = v; }, py::doc(
    "Breaker fault on channel 14.")
    )
  
    .def_property("Channel14BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel14BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel14BreakerFault = v; }, py::doc(
    "Breaker fault on channel 15.")
    )
  
    .def_property("Channel15BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel15BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel15BreakerFault = v; }, py::doc(
    "Breaker fault on channel 16.")
    )
  
    .def_property("Channel16BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel16BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel16BreakerFault = v; }, py::doc(
    "Breaker fault on channel 17.")
    )
  
    .def_property("Channel17BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel17BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel17BreakerFault = v; }, py::doc(
    "Breaker fault on channel 18.")
    )
  
    .def_property("Channel18BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel18BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel18BreakerFault = v; }, py::doc(
    "Breaker fault on channel 19.")
    )
  
    .def_property("Channel19BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel19BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel19BreakerFault = v; }, py::doc(
    "Breaker fault on channel 20.")
    )
  
    .def_property("Channel20BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel20BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel20BreakerFault = v; }, py::doc(
    "Breaker fault on channel 21.")
    )
  
    .def_property("Channel21BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel21BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel21BreakerFault = v; }, py::doc(
    "Breaker fault on channel 22.")
    )
  
    .def_property("Channel22BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel22BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel22BreakerFault = v; }, py::doc(
    "Breaker fault on channel 23.")
    )
  
    .def_property("Channel23BreakerFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Channel23BreakerFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Channel23BreakerFault = v; }, py::doc(
    "Breaker fault on channel 24.")
    )
  
    .def_property("Brownout",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.Brownout; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.Brownout = v; }, py::doc(
    "The input voltage is below the minimum voltage.")
    )
  
    .def_property("CanWarning",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.CanWarning; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.CanWarning = v; }, py::doc(
    "A warning was raised by the device's CAN controller.")
    )
  
    .def_property("CanBusOff",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.CanBusOff; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.CanBusOff = v; }, py::doc(
    "The device's CAN controller experienced a \"Bus Off\" event.")
    )
  
    .def_property("HardwareFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.HardwareFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.HardwareFault = v; }, py::doc(
    "The hardware on the device has malfunctioned.")
    )
  
    .def_property("FirmwareFault",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.FirmwareFault; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.FirmwareFault = v; }, py::doc(
    "The firmware on the device has malfunctioned.")
    )
  
    .def_property("HasReset",  
        [](const frc::PowerDistribution::StickyFaults& inst) -> uint32_t { return inst.HasReset; },
        [](frc::PowerDistribution::StickyFaults& inst, uint32_t v) {inst.HasReset = v; }, py::doc(
    "The device has rebooted.")
    )
  ;

  


  
  }






}

}; // struct rpybuild_PowerDistribution_initializer

static std::unique_ptr<rpybuild_PowerDistribution_initializer> cls;

void begin_init_PowerDistribution(py::module &m) {
  cls = std::make_unique<rpybuild_PowerDistribution_initializer>(m);
}

void finish_init_PowerDistribution() {
  cls->finish();
  cls.reset();
}