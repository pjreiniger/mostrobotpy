
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/Tracer.h>














#include <wpi/SmallString.h>

#include <wpi/raw_ostream.h>



#include <type_traits>


  using namespace wpi;

  using namespace frc;





struct rpybuild_Tracer_initializer {


  

  












  py::class_<typename frc::Tracer> cls_Tracer;

    

    
    

  py::module &m;

  
  rpybuild_Tracer_initializer(py::module &m) :

  

  

  

  
    cls_Tracer(m, "Tracer"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_Tracer.doc() =
    "A class for keeping track of how much time it takes for different parts of\n"
"code to execute. This is done with epochs, that are added to calls to\n"
"AddEpoch() and can be printed with a call to PrintEpochs().\n"
"\n"
"Epochs are a way to partition the time elapsed so that when overruns occur,\n"
"one can determine which parts of an operation consumed the most time.";

  cls_Tracer
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "Constructs a Tracer instance.")
  )
  
  
  
    
  .
def
("resetTimer", &frc::Tracer::ResetTimer, release_gil(), py::doc(
    "Restarts the epoch timer.")
  )
  
  
  
    
  .
def
("clearEpochs", &frc::Tracer::ClearEpochs, release_gil(), py::doc(
    "Clears all epochs.")
  )
  
  
  
    
  .
def
("addEpoch", &frc::Tracer::AddEpoch,
      py::arg("epochName"), release_gil(), py::doc(
    "Adds time since last epoch to the list printed by PrintEpochs().\n"
"\n"
"Epochs are a way to partition the time elapsed so that when overruns occur,\n"
"one can determine which parts of an operation consumed the most time.\n"
"\n"
":param epochName: The name to associate with the epoch.")
  )
  
  
  
    
  .
def
("printEpochs", static_cast<void(frc::Tracer::*)()>(
        &frc::Tracer::PrintEpochs), release_gil(), py::doc(
    "Prints list of epochs added so far and their times to the DriverStation.")
  )
  
  
  ;

  


  }







  cls_Tracer
  .def("getEpochs",
    [](Tracer * self) -> py::str {
      wpi::SmallString<128> buf;
      wpi::raw_svector_ostream s(buf);
      self->PrintEpochs(s);
      return py::cast(s.str());
    },
    "Retreives list of epochs added so far as a string\n"
    "\n"
    ".. versionadded:: 2021.1.2\n"
    "\n"
    ".. note:: This function only exists in RobotPy\n");

}

}; // struct rpybuild_Tracer_initializer

static std::unique_ptr<rpybuild_Tracer_initializer> cls;

void begin_init_Tracer(py::module &m) {
  cls = std::make_unique<rpybuild_Tracer_initializer>(m);
}

void finish_init_Tracer() {
  cls->finish();
  cls.reset();
}