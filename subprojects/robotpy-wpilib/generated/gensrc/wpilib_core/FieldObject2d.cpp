
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/smartdashboard/FieldObject2d.h>


#include <pybind11/stl.h>

#include <units_length_type_caster.h>

#include <wpi_span_type_caster.h>













#include <frc/trajectory/Trajectory.h>



#include <type_traits>


  using namespace frc;



PYBIND11_TYPE_CASTER_BASE_HOLDER(typename frc::FieldObject2d, std::unique_ptr<typename frc::FieldObject2d, py::nodelete>);



struct rpybuild_FieldObject2d_initializer {


  

  












  py::class_<typename frc::FieldObject2d, std::unique_ptr<typename frc::FieldObject2d, py::nodelete>> cls_FieldObject2d;

    

    
    

  py::module &m;

  
  rpybuild_FieldObject2d_initializer(py::module &m) :

  

  

  

  
    cls_FieldObject2d(m, "FieldObject2d"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_FieldObject2d.doc() =
    "Game field object on a Field2d.";

  cls_FieldObject2d
  
    
  .
def
("setPose", static_cast<void(frc::FieldObject2d::*)(const Pose2d&)>(
        &frc::FieldObject2d::SetPose),
      py::arg("pose"), release_gil(), py::doc(
    "Set the pose from a Pose object.\n"
"\n"
":param pose: 2D pose")
  )
  
  
  
    
  .
def
("setPose", static_cast<void(frc::FieldObject2d::*)(units::meter_t, units::meter_t, Rotation2d)>(
        &frc::FieldObject2d::SetPose),
      py::arg("x"), py::arg("y"), py::arg("rotation"), release_gil(), py::doc(
    "Set the pose from x, y, and rotation.\n"
"\n"
":param x:        X location\n"
":param y:        Y location\n"
":param rotation: rotation")
  )
  
  
  
    
  .
def
("getPose", &frc::FieldObject2d::GetPose, release_gil(), py::doc(
    "Get the pose.\n"
"\n"
":returns: 2D pose, or 0,0,0 if unknown / does not exist")
  )
  
  
  
    
  .
def
("setPoses", static_cast<void(frc::FieldObject2d::*)(std::span<const Pose2d>)>(
        &frc::FieldObject2d::SetPoses),
      py::arg("poses"), release_gil(), py::doc(
    "Set multiple poses from an array of Pose objects.\n"
"The total number of poses is limited to 85.\n"
"\n"
":param poses: array of 2D poses")
  )
  
  
  
    
  .
def
("setTrajectory", &frc::FieldObject2d::SetTrajectory,
      py::arg("trajectory"), release_gil(), py::doc(
    "Sets poses from a trajectory.\n"
"\n"
":param trajectory: The trajectory from which poses should be added.")
  )
  
  
  
    
  .
def
("getPoses", static_cast<std::vector<Pose2d>(frc::FieldObject2d::*)() const>(
        &frc::FieldObject2d::GetPoses), release_gil(), py::doc(
    "Get multiple poses.\n"
"\n"
":param obj: Object entry\n"
"\n"
":returns: vector of 2D poses")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_FieldObject2d_initializer

static std::unique_ptr<rpybuild_FieldObject2d_initializer> cls;

void begin_init_FieldObject2d(py::module &m) {
  cls = std::make_unique<rpybuild_FieldObject2d_initializer>(m);
}

void finish_init_FieldObject2d() {
  cls->finish();
  cls.reset();
}