
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/SerialPort.h>


#include <units_time_type_caster.h>















#include <type_traits>


  using namespace frc;





struct rpybuild_SerialPort_initializer {


  

  












  py::class_<typename frc::SerialPort> cls_SerialPort;

    
    
  py::enum_<frc::SerialPort::Port> cls_SerialPort_enum1;
    
    
  py::enum_<frc::SerialPort::Parity> cls_SerialPort_enum2;
    
    
  py::enum_<frc::SerialPort::StopBits> cls_SerialPort_enum3;
    
    
  py::enum_<frc::SerialPort::FlowControl> cls_SerialPort_enum4;
    
    
  py::enum_<frc::SerialPort::WriteBufferMode> cls_SerialPort_enum5;
    

    
    

  py::module &m;

  
  rpybuild_SerialPort_initializer(py::module &m) :

  

  

  

  
    cls_SerialPort(m, "SerialPort"),

  
    cls_SerialPort_enum1
  (cls_SerialPort, "Port"
  ,
    "Serial port."),
  
    cls_SerialPort_enum2
  (cls_SerialPort, "Parity"
  ,
    "Represents the parity to use for serial communications."),
  
    cls_SerialPort_enum3
  (cls_SerialPort, "StopBits"
  ,
    "Represents the number of stop bits to use for Serial Communication."),
  
    cls_SerialPort_enum4
  (cls_SerialPort, "FlowControl"
  ,
    "Represents what type of flow control to use for serial communication."),
  
    cls_SerialPort_enum5
  (cls_SerialPort, "WriteBufferMode"
  ,
    "Represents which type of buffer mode to use when writing to a serial port."),
  

  
  
  

    m(m)
  {
    
    

    
    
  
    cls_SerialPort_enum1
  
    .value("kOnboard", frc::SerialPort::Port::kOnboard,
      "Onboard serial port on the roboRIO.")
  
    .value("kMXP", frc::SerialPort::Port::kMXP,
      "MXP (roboRIO MXP) serial port.")
  
    .value("kUSB", frc::SerialPort::Port::kUSB,
      "USB serial port (same as KUSB1).")
  
    .value("kUSB1", frc::SerialPort::Port::kUSB1,
      "USB serial port 1.")
  
    .value("kUSB2", frc::SerialPort::Port::kUSB2,
      "USB serial port 2.")
  ;

  
    cls_SerialPort_enum2
  
    .value("kParity_None", frc::SerialPort::Parity::kParity_None,
      "No parity.")
  
    .value("kParity_Odd", frc::SerialPort::Parity::kParity_Odd,
      "Odd parity.")
  
    .value("kParity_Even", frc::SerialPort::Parity::kParity_Even,
      "Even parity.")
  
    .value("kParity_Mark", frc::SerialPort::Parity::kParity_Mark,
      "Parity bit always on.")
  
    .value("kParity_Space", frc::SerialPort::Parity::kParity_Space,
      "Parity bit always off.")
  ;

  
    cls_SerialPort_enum3
  
    .value("kStopBits_One", frc::SerialPort::StopBits::kStopBits_One,
      "One stop bit.")
  
    .value("kStopBits_OnePointFive", frc::SerialPort::StopBits::kStopBits_OnePointFive,
      "One and a half stop bits.")
  
    .value("kStopBits_Two", frc::SerialPort::StopBits::kStopBits_Two,
      "Two stop bits.")
  ;

  
    cls_SerialPort_enum4
  
    .value("kFlowControl_None", frc::SerialPort::FlowControl::kFlowControl_None,
      "No flow control.")
  
    .value("kFlowControl_XonXoff", frc::SerialPort::FlowControl::kFlowControl_XonXoff,
      "XON/XOFF flow control.")
  
    .value("kFlowControl_RtsCts", frc::SerialPort::FlowControl::kFlowControl_RtsCts,
      "RTS/CTS flow control.")
  
    .value("kFlowControl_DtrDsr", frc::SerialPort::FlowControl::kFlowControl_DtrDsr,
      "DTS/DSR flow control.")
  ;

  
    cls_SerialPort_enum5
  
    .value("kFlushOnAccess", frc::SerialPort::WriteBufferMode::kFlushOnAccess,
      "Flush the buffer on each access.")
  
    .value("kFlushWhenFull", frc::SerialPort::WriteBufferMode::kFlushWhenFull,
      "Flush the buffer when it is full.")
  ;

  

    
    
  }

void finish() {





  {
  
  
  using Port [[maybe_unused]] = typename frc::SerialPort::Port;
  
  using Parity [[maybe_unused]] = typename frc::SerialPort::Parity;
  
  using StopBits [[maybe_unused]] = typename frc::SerialPort::StopBits;
  
  using FlowControl [[maybe_unused]] = typename frc::SerialPort::FlowControl;
  
  using WriteBufferMode [[maybe_unused]] = typename frc::SerialPort::WriteBufferMode;
  
  


  

  cls_SerialPort.doc() =
    "Driver for the RS-232 serial port on the roboRIO.\n"
"\n"
"The current implementation uses the VISA formatted I/O mode.  This means that\n"
"all traffic goes through the formatted buffers.  This allows the intermingled\n"
"use of Printf(), Scanf(), and the raw buffer accessors Read() and Write().\n"
"\n"
"More information can be found in the NI-VISA User Manual here:\n"
"http://www.ni.com/pdf/manuals/370423a.pdf\n"
"and the NI-VISA Programmer's Reference Manual here:\n"
"http://www.ni.com/pdf/manuals/370132c.pdf";

  cls_SerialPort
  
    
  .def(py::init<int, Port, int, Parity, StopBits>(),
      py::arg("baudRate"), py::arg("port") = frc::SerialPort::Port::kOnboard, py::arg("dataBits") = 8, py::arg("parity") = frc::SerialPort::Parity::kParity_None, py::arg("stopBits") = frc::SerialPort::StopBits::kStopBits_One, release_gil(), py::doc(
    "Create an instance of a Serial Port class.\n"
"\n"
":param baudRate: The baud rate to configure the serial port.\n"
":param port:     The physical port to use\n"
":param dataBits: The number of data bits per transfer.  Valid values are\n"
"                 between 5 and 8 bits.\n"
":param parity:   Select the type of parity checking to use.\n"
":param stopBits: The number of stop bits to use as defined by the enum\n"
"                 StopBits.")
  )
  
  
  
    
  .def(py::init<int, std::string_view, Port, int, Parity, StopBits>(),
      py::arg("baudRate"), py::arg("portName"), py::arg("port") = frc::SerialPort::Port::kOnboard, py::arg("dataBits") = 8, py::arg("parity") = frc::SerialPort::Parity::kParity_None, py::arg("stopBits") = frc::SerialPort::StopBits::kStopBits_One, release_gil(), py::doc(
    "Create an instance of a Serial Port class.\n"
"\n"
"Prefer to use the constructor that doesn't take a port name, but in some\n"
"cases the automatic detection might not work correctly.\n"
"\n"
":param baudRate: The baud rate to configure the serial port.\n"
":param port:     The physical port to use\n"
":param portName: The direct port name to use\n"
":param dataBits: The number of data bits per transfer.  Valid values are\n"
"                 between 5 and 8 bits.\n"
":param parity:   Select the type of parity checking to use.\n"
":param stopBits: The number of stop bits to use as defined by the enum\n"
"                 StopBits.")
  )
  
  
  
    
  .
def
("setFlowControl", &frc::SerialPort::SetFlowControl,
      py::arg("flowControl"), release_gil(), py::doc(
    "Set the type of flow control to enable on this port.\n"
"\n"
"By default, flow control is disabled.")
  )
  
  
  
    
  .
def
("enableTermination", &frc::SerialPort::EnableTermination,
      py::arg("terminator") = '\n', release_gil(), py::doc(
    "Enable termination and specify the termination character.\n"
"\n"
"Termination is currently only implemented for receive.\n"
"When the the terminator is received, the Read() or Scanf() will return\n"
"fewer bytes than requested, stopping after the terminator.\n"
"\n"
":param terminator: The character to use for termination.")
  )
  
  
  
    
  .
def
("disableTermination", &frc::SerialPort::DisableTermination, release_gil(), py::doc(
    "Disable termination behavior.")
  )
  
  
  
    
  .
def
("getBytesReceived", &frc::SerialPort::GetBytesReceived, release_gil(), py::doc(
    "Get the number of bytes currently available to read from the serial port.\n"
"\n"
":returns: The number of bytes available to read")
  )
  
  
  
    
  .
def
("read", [](frc::SerialPort * __that,const py::buffer& buffer) {
                    int count;
          auto __buffer = buffer.request(true);
          count = __buffer.size * __buffer.itemsize;
          auto __ret =__that->Read((char*)__buffer.ptr, count);
          return __ret;
        },
      py::arg("buffer"), release_gil(), py::doc(
    "Read raw bytes out of the buffer.\n"
"\n"
":param buffer: Pointer to the buffer to store the bytes in.\n"
":param count:  The maximum number of bytes to read.\n"
"\n"
":returns: The number of bytes actually read into the buffer.")
  )
  
  
  
    
  .
def
("write", [](frc::SerialPort * __that,const py::buffer& buffer) {
                    int count;
          auto __buffer = buffer.request(false);
          count = __buffer.size * __buffer.itemsize;
          auto __ret =__that->Write((const char*)__buffer.ptr, count);
          return __ret;
        },
      py::arg("buffer"), release_gil(), py::doc(
    "Write raw bytes to the buffer.\n"
"\n"
":param buffer: Pointer to the buffer to read the bytes from.\n"
":param count:  The maximum number of bytes to write.\n"
"\n"
":returns: The number of bytes actually written into the port.")
  )
  
  
  
    
  .
def
("setTimeout", &frc::SerialPort::SetTimeout,
      py::arg("timeout"), release_gil(), py::doc(
    "Configure the timeout of the serial port.\n"
"\n"
"This defines the timeout for transactions with the hardware.\n"
"It will affect reads and very large writes.\n"
"\n"
":param timeout: The time to wait for I/O.")
  )
  
  
  
    
  .
def
("setReadBufferSize", &frc::SerialPort::SetReadBufferSize,
      py::arg("size"), release_gil(), py::doc(
    "Specify the size of the input buffer.\n"
"\n"
"Specify the amount of data that can be stored before data\n"
"from the device is returned to Read or Scanf.  If you want\n"
"data that is received to be returned immediately, set this to 1.\n"
"\n"
"It the buffer is not filled before the read timeout expires, all\n"
"data that has been received so far will be returned.\n"
"\n"
":param size: The read buffer size.")
  )
  
  
  
    
  .
def
("setWriteBufferSize", &frc::SerialPort::SetWriteBufferSize,
      py::arg("size"), release_gil(), py::doc(
    "Specify the size of the output buffer.\n"
"\n"
"Specify the amount of data that can be stored before being\n"
"transmitted to the device.\n"
"\n"
":param size: The write buffer size.")
  )
  
  
  
    
  .
def
("setWriteBufferMode", &frc::SerialPort::SetWriteBufferMode,
      py::arg("mode"), release_gil(), py::doc(
    "Specify the flushing behavior of the output buffer.\n"
"\n"
"When set to kFlushOnAccess, data is synchronously written to the serial\n"
"port after each call to either Printf() or Write().\n"
"\n"
"When set to kFlushWhenFull, data will only be written to the serial port\n"
"when the buffer is full or when Flush() is called.\n"
"\n"
":param mode: The write buffer mode.")
  )
  
  
  
    
  .
def
("flush", &frc::SerialPort::Flush, release_gil(), py::doc(
    "Force the output buffer to be written to the port.\n"
"\n"
"This is used when SetWriteBufferMode() is set to kFlushWhenFull to force a\n"
"flush before the buffer is full.")
  )
  
  
  
    
  .
def
("reset", &frc::SerialPort::Reset, release_gil(), py::doc(
    "Reset the serial port driver to a known state.\n"
"\n"
"Empty the transmit and receive buffers in the device and formatted I/O.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_SerialPort_initializer

static std::unique_ptr<rpybuild_SerialPort_initializer> cls;

void begin_init_SerialPort(py::module &m) {
  cls = std::make_unique<rpybuild_SerialPort_initializer>(m);
}

void finish_init_SerialPort() {
  cls->finish();
  cls.reset();
}