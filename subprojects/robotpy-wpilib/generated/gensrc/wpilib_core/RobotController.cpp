
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/RobotController.h>


#include <units_temperature_type_caster.h>

#include <units_voltage_type_caster.h>















#include <type_traits>


  using namespace frc;



struct rpybuild_RobotController_initializer {


  

  


  

  







  
  py::enum_<frc::RadioLEDState> enum1;






  py::class_<typename frc::CANStatus> cls_CANStatus;

    

    
    
  py::class_<typename frc::RobotController, std::unique_ptr<typename frc::RobotController, py::nodelete>> cls_RobotController;

    

    
    

  py::module &m;

  
  rpybuild_RobotController_initializer(py::module &m) :

  

  
    enum1
  (m, "RadioLEDState"
  ,
    "State for the radio led."),
  

  

  
    cls_CANStatus(m, "CANStatus"),

  

  
  
  
    cls_RobotController(m, "RobotController"),

  

  
  
  

    m(m)
  {
    
    
      enum1
  
    .value("kOff", frc::RadioLEDState::kOff,
      "///< Off.")
  
    .value("kGreen", frc::RadioLEDState::kGreen,
      "///< Green.")
  
    .value("kRed", frc::RadioLEDState::kRed,
      "///< Red.")
  
    .value("kOrange", frc::RadioLEDState::kOrange,
      "///< Orange.")
  ;

    

    
    
  

    
    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  

  cls_CANStatus
  
    .def(py::init<>(), release_gil())
  
    .def_readwrite("percentBusUtilization", &frc::CANStatus::percentBusUtilization)
  
    .def_readwrite("busOffCount", &frc::CANStatus::busOffCount)
  
    .def_readwrite("txFullCount", &frc::CANStatus::txFullCount)
  
    .def_readwrite("receiveErrorCount", &frc::CANStatus::receiveErrorCount)
  
    .def_readwrite("transmitErrorCount", &frc::CANStatus::transmitErrorCount)
  ;

  


  }

  {
  
  
  


  

  

  cls_RobotController
  
    
  .
def_static
("getFPGAVersion", &frc::RobotController::GetFPGAVersion, release_gil(), py::doc(
    "Return the FPGA Version number.\n"
"\n"
"For now, expect this to be competition year.\n"
"\n"
":returns: FPGA Version number.")
  )
  
  
  
    
  .
def_static
("getFPGARevision", &frc::RobotController::GetFPGARevision, release_gil(), py::doc(
    "Return the FPGA Revision number.\n"
"\n"
"The format of the revision is 3 numbers. The 12 most significant bits are\n"
"the Major Revision. The next 8 bits are the Minor Revision. The 12 least\n"
"significant bits are the Build Number.\n"
"\n"
":returns: FPGA Revision number.")
  )
  
  
  
    
  .
def_static
("getSerialNumber", &frc::RobotController::GetSerialNumber, release_gil(), py::doc(
    "Return the serial number of the roboRIO.\n"
"\n"
":returns: The serial number of the roboRIO.")
  )
  
  
  
    
  .
def_static
("getComments", &frc::RobotController::GetComments, release_gil(), py::doc(
    "Return the comments from the roboRIO web interface.\n"
"\n"
"The comments string is cached after the first call to this function on the\n"
"RoboRIO - restart the robot code to reload the comments string after\n"
"changing it in the web interface.\n"
"\n"
":returns: The comments from the roboRIO web interface.")
  )
  
  
  
    
  .
def_static
("getTeamNumber", &frc::RobotController::GetTeamNumber, release_gil(), py::doc(
    "Returns the team number configured for the robot controller.\n"
"\n"
":returns: team number, or 0 if not found.")
  )
  
  
  
    
  .
def_static
("getFPGATime", &frc::RobotController::GetFPGATime, release_gil(), py::doc(
    "Read the microsecond-resolution timer on the FPGA.\n"
"\n"
":returns: The current time in microseconds according to the FPGA (since FPGA\n"
"          reset).")
  )
  
  
  
    
  .
def_static
("getUserButton", &frc::RobotController::GetUserButton, release_gil(), py::doc(
    "Get the state of the \"USER\" button on the roboRIO.\n"
"\n"
"@warning the User Button is used to stop user programs from automatically\n"
"loading if it is held for more then 5 seconds. Because of this, it's not\n"
"recommended to be used by teams for any other purpose.\n"
"\n"
":returns: True if the button is currently pressed down")
  )
  
  
  
    
  .
def_static
("getBatteryVoltage", &frc::RobotController::GetBatteryVoltage, release_gil(), py::doc(
    "Read the battery voltage.\n"
"\n"
":returns: The battery voltage in Volts.")
  )
  
  
  
    
  .
def_static
("isSysActive", &frc::RobotController::IsSysActive, release_gil(), py::doc(
    "Check if the FPGA outputs are enabled.\n"
"\n"
"The outputs may be disabled if the robot is disabled or e-stopped, the\n"
"watchdog has expired, or if the roboRIO browns out.\n"
"\n"
":returns: True if the FPGA outputs are enabled.")
  )
  
  
  
    
  .
def_static
("isBrownedOut", &frc::RobotController::IsBrownedOut, release_gil(), py::doc(
    "Check if the system is browned out.\n"
"\n"
":returns: True if the system is browned out")
  )
  
  
  
    
  .
def_static
("getCommsDisableCount", &frc::RobotController::GetCommsDisableCount, release_gil(), py::doc(
    "Gets the number of times the system has been disabled due to communication\n"
"errors with the Driver Station.\n"
"\n"
":returns: number of disables due to communication errors.")
  )
  
  
  
    
  .
def_static
("getRSLState", &frc::RobotController::GetRSLState, release_gil(), py::doc(
    "Gets the current state of the Robot Signal Light (RSL)\n"
"\n"
":returns: The current state of the RSL- true if on, false if off")
  )
  
  
  
    
  .
def_static
("isSystemTimeValid", &frc::RobotController::IsSystemTimeValid, release_gil(), py::doc(
    "Gets if the system time is valid.\n"
"\n"
":returns: True if the system time is valid, false otherwise")
  )
  
  
  
    
  .
def_static
("getInputVoltage", &frc::RobotController::GetInputVoltage, release_gil(), py::doc(
    "Get the input voltage to the robot controller.\n"
"\n"
":returns: The controller input voltage value in Volts")
  )
  
  
  
    
  .
def_static
("getInputCurrent", &frc::RobotController::GetInputCurrent, release_gil(), py::doc(
    "Get the input current to the robot controller.\n"
"\n"
":returns: The controller input current value in Amps")
  )
  
  
  
    
  .
def_static
("getVoltage3V3", &frc::RobotController::GetVoltage3V3, release_gil(), py::doc(
    "Get the voltage of the 3.3V rail.\n"
"\n"
":returns: The controller 3.3V rail voltage value in Volts")
  )
  
  
  
    
  .
def_static
("getCurrent3V3", &frc::RobotController::GetCurrent3V3, release_gil(), py::doc(
    "Get the current output of the 3.3V rail.\n"
"\n"
":returns: The controller 3.3V rail output current value in Amps")
  )
  
  
  
    
  .
def_static
("setEnabled3V3", &frc::RobotController::SetEnabled3V3,
      py::arg("enabled"), release_gil(), py::doc(
    "Enables or disables the 3.3V rail.\n"
"\n"
":param enabled: whether to enable the 3.3V rail.")
  )
  
  
  
    
  .
def_static
("getEnabled3V3", &frc::RobotController::GetEnabled3V3, release_gil(), py::doc(
    "Get the enabled state of the 3.3V rail. The rail may be disabled due to\n"
"calling SetEnabled3V3(), a controller brownout, a short circuit on the\n"
"rail, or controller over-voltage.\n"
"\n"
":returns: The controller 3.3V rail enabled value. True for enabled.")
  )
  
  
  
    
  .
def_static
("getFaultCount3V3", &frc::RobotController::GetFaultCount3V3, release_gil(), py::doc(
    "Get the count of the total current faults on the 3.3V rail since the\n"
"code started.\n"
"\n"
":returns: The number of faults")
  )
  
  
  
    
  .
def_static
("getVoltage5V", &frc::RobotController::GetVoltage5V, release_gil(), py::doc(
    "Get the voltage of the 5V rail.\n"
"\n"
":returns: The controller 5V rail voltage value in Volts")
  )
  
  
  
    
  .
def_static
("getCurrent5V", &frc::RobotController::GetCurrent5V, release_gil(), py::doc(
    "Get the current output of the 5V rail.\n"
"\n"
":returns: The controller 5V rail output current value in Amps")
  )
  
  
  
    
  .
def_static
("setEnabled5V", &frc::RobotController::SetEnabled5V,
      py::arg("enabled"), release_gil(), py::doc(
    "Enables or disables the 5V rail.\n"
"\n"
":param enabled: whether to enable the 5V rail.")
  )
  
  
  
    
  .
def_static
("getEnabled5V", &frc::RobotController::GetEnabled5V, release_gil(), py::doc(
    "Get the enabled state of the 5V rail. The rail may be disabled due to\n"
"calling SetEnabled5V(), a controller brownout, a short circuit on the rail,\n"
"or controller over-voltage.\n"
"\n"
":returns: The controller 5V rail enabled value. True for enabled.")
  )
  
  
  
    
  .
def_static
("getFaultCount5V", &frc::RobotController::GetFaultCount5V, release_gil(), py::doc(
    "Get the count of the total current faults on the 5V rail since the\n"
"code started.\n"
"\n"
":returns: The number of faults")
  )
  
  
  
    
  .
def_static
("getVoltage6V", &frc::RobotController::GetVoltage6V, release_gil(), py::doc(
    "Get the voltage of the 6V rail.\n"
"\n"
":returns: The controller 6V rail voltage value in Volts")
  )
  
  
  
    
  .
def_static
("getCurrent6V", &frc::RobotController::GetCurrent6V, release_gil(), py::doc(
    "Get the current output of the 6V rail.\n"
"\n"
":returns: The controller 6V rail output current value in Amps")
  )
  
  
  
    
  .
def_static
("setEnabled6V", &frc::RobotController::SetEnabled6V,
      py::arg("enabled"), release_gil(), py::doc(
    "Enables or disables the 6V rail.\n"
"\n"
":param enabled: whether to enable the 6V rail.")
  )
  
  
  
    
  .
def_static
("getEnabled6V", &frc::RobotController::GetEnabled6V, release_gil(), py::doc(
    "Get the enabled state of the 6V rail. The rail may be disabled due to\n"
"calling SetEnabled6V(), a controller brownout, a short circuit on the rail,\n"
"or controller over-voltage.\n"
"\n"
":returns: The controller 6V rail enabled value. True for enabled.")
  )
  
  
  
    
  .
def_static
("getFaultCount6V", &frc::RobotController::GetFaultCount6V, release_gil(), py::doc(
    "Get the count of the total current faults on the 6V rail since the\n"
"code started.\n"
"\n"
":returns: The number of faults.")
  )
  
  
  
    
  .
def_static
("resetRailFaultCounts", &frc::RobotController::ResetRailFaultCounts, release_gil(), py::doc(
    "Reset the overcurrent fault counters for all user rails to 0.")
  )
  
  
  
    
  .
def_static
("getBrownoutVoltage", &frc::RobotController::GetBrownoutVoltage, release_gil(), py::doc(
    "Get the current brownout voltage setting.\n"
"\n"
":returns: The brownout voltage")
  )
  
  
  
    
  .
def_static
("setBrownoutVoltage", &frc::RobotController::SetBrownoutVoltage,
      py::arg("brownoutVoltage"), release_gil(), py::doc(
    "Set the voltage the roboRIO will brownout and disable all outputs.\n"
"\n"
"Note that this only does anything on the roboRIO 2.\n"
"On the roboRIO it is a no-op.\n"
"\n"
":param brownoutVoltage: The brownout voltage")
  )
  
  
  
    
  .
def_static
("getCPUTemp", &frc::RobotController::GetCPUTemp, release_gil(), py::doc(
    "Get the current CPU temperature.\n"
"\n"
":returns: current CPU temperature")
  )
  
  
  
    
  .
def_static
("setRadioLEDState", &frc::RobotController::SetRadioLEDState,
      py::arg("state"), release_gil(), py::doc(
    "Set the state of the \"Radio\" LED. On the RoboRIO, this writes to sysfs, so\n"
"this function should not be called multiple times per loop cycle to avoid\n"
"overruns.\n"
"\n"
":param state: The state to set the LED to.")
  )
  
  
  
    
  .
def_static
("getRadioLEDState", &frc::RobotController::GetRadioLEDState, release_gil(), py::doc(
    "Get the state of the \"Radio\" LED. On the RoboRIO, this reads from sysfs, so\n"
"this function should not be called multiple times per loop cycle to avoid\n"
"overruns.\n"
"\n"
":returns: The state of the LED.")
  )
  
  
  
    
  .
def_static
("getCANStatus", &frc::RobotController::GetCANStatus, release_gil(), py::doc(
    "Get the current status of the CAN bus.\n"
"\n"
":returns: The status of the CAN bus")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_RobotController_initializer

static std::unique_ptr<rpybuild_RobotController_initializer> cls;

void begin_init_RobotController(py::module &m) {
  cls = std::make_unique<rpybuild_RobotController_initializer>(m);
}

void finish_init_RobotController() {
  cls->finish();
  cls.reset();
}