
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/Preferences.h>


#include <pybind11/stl.h>















#include <type_traits>


  using namespace frc;



struct rpybuild_Preferences_initializer {


  

  












  py::class_<typename frc::Preferences> cls_Preferences;

    

    
    

  py::module &m;

  
  rpybuild_Preferences_initializer(py::module &m) :

  

  

  

  
    cls_Preferences(m, "Preferences"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_Preferences.doc() =
    "The preferences class provides a relatively simple way to save important\n"
"values to the roboRIO to access the next time the roboRIO is booted.\n"
"\n"
"This class loads and saves from a file inside the roboRIO.  The user cannot\n"
"access the file directly, but may modify values at specific fields which will\n"
"then be automatically periodically saved to the file by the NetworkTable\n"
"server.\n"
"\n"
"This class is thread safe.\n"
"\n"
"This will also interact with NetworkTable by creating a table called\n"
"\"Preferences\" with all the key-value pairs.";

  cls_Preferences
  
    
  .
def_static
("getKeys", &frc::Preferences::GetKeys, release_gil(), py::doc(
    "Returns a vector of all the keys.\n"
"\n"
":returns: a vector of the keys")
  )
  
  
  
    
  .
def_static
("getString", &frc::Preferences::GetString,
      py::arg("key"), py::arg("defaultValue") = "", release_gil(), py::doc(
    "Returns the string at the given key.  If this table does not have a value\n"
"for that position, then the given defaultValue will be returned.\n"
"\n"
":param key:          the key\n"
":param defaultValue: the value to return if none exists in the table\n"
"\n"
":returns: either the value in the table, or the defaultValue")
  )
  
  
  
    
  .
def_static
("getInt", &frc::Preferences::GetInt,
      py::arg("key"), py::arg("defaultValue") = 0, release_gil(), py::doc(
    "Returns the int at the given key.  If this table does not have a value for\n"
"that position, then the given defaultValue value will be returned.\n"
"\n"
":param key:          the key\n"
":param defaultValue: the value to return if none exists in the table\n"
"\n"
":returns: either the value in the table, or the defaultValue")
  )
  
  
  
    
  .
def_static
("getDouble", &frc::Preferences::GetDouble,
      py::arg("key"), py::arg("defaultValue") = 0.0, release_gil(), py::doc(
    "Returns the double at the given key.  If this table does not have a value\n"
"for that position, then the given defaultValue value will be returned.\n"
"\n"
":param key:          the key\n"
":param defaultValue: the value to return if none exists in the table\n"
"\n"
":returns: either the value in the table, or the defaultValue")
  )
  
  
  
    
  .
def_static
("getFloat", &frc::Preferences::GetFloat,
      py::arg("key"), py::arg("defaultValue") = 0.0, release_gil(), py::doc(
    "Returns the float at the given key.  If this table does not have a value\n"
"for that position, then the given defaultValue value will be returned.\n"
"\n"
":param key:          the key\n"
":param defaultValue: the value to return if none exists in the table\n"
"\n"
":returns: either the value in the table, or the defaultValue")
  )
  
  
  
    
  .
def_static
("getBoolean", &frc::Preferences::GetBoolean,
      py::arg("key"), py::arg("defaultValue") = false, release_gil(), py::doc(
    "Returns the boolean at the given key.  If this table does not have a value\n"
"for that position, then the given defaultValue value will be returned.\n"
"\n"
":param key:          the key\n"
":param defaultValue: the value to return if none exists in the table\n"
"\n"
":returns: either the value in the table, or the defaultValue")
  )
  
  
  
    
  .
def_static
("getLong", &frc::Preferences::GetLong,
      py::arg("key"), py::arg("defaultValue") = 0, release_gil(), py::doc(
    "Returns the long (int64_t) at the given key.  If this table does not have a\n"
"value for that position, then the given defaultValue value will be\n"
"returned.\n"
"\n"
":param key:          the key\n"
":param defaultValue: the value to return if none exists in the table\n"
"\n"
":returns: either the value in the table, or the defaultValue")
  )
  
  
  
    
  .
def_static
("setString", &frc::Preferences::SetString,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given string into the preferences table.\n"
"\n"
"The value may not have quotation marks, nor may the key have any whitespace\n"
"nor an equals sign.\n"
"\n"
":param key:   the key\n"
":param value: the value")
  )
  
  
  
    
  .
def_static
("initString", &frc::Preferences::InitString,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given string into the preferences table if it doesn't\n"
"already exist.")
  )
  
  
  
    
  .
def_static
("setInt", &frc::Preferences::SetInt,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given int into the preferences table.\n"
"\n"
"The key may not have any whitespace nor an equals sign.\n"
"\n"
":param key:   the key\n"
":param value: the value")
  )
  
  
  
    
  .
def_static
("initInt", &frc::Preferences::InitInt,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given int into the preferences table if it doesn't\n"
"already exist.")
  )
  
  
  
    
  .
def_static
("setDouble", &frc::Preferences::SetDouble,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given double into the preferences table.\n"
"\n"
"The key may not have any whitespace nor an equals sign.\n"
"\n"
":param key:   the key\n"
":param value: the value")
  )
  
  
  
    
  .
def_static
("initDouble", &frc::Preferences::InitDouble,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given double into the preferences table if it doesn't\n"
"already exist.")
  )
  
  
  
    
  .
def_static
("setFloat", &frc::Preferences::SetFloat,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given float into the preferences table.\n"
"\n"
"The key may not have any whitespace nor an equals sign.\n"
"\n"
":param key:   the key\n"
":param value: the value")
  )
  
  
  
    
  .
def_static
("initFloat", &frc::Preferences::InitFloat,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given float into the preferences table if it doesn't\n"
"already exist.")
  )
  
  
  
    
  .
def_static
("setBoolean", &frc::Preferences::SetBoolean,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given boolean into the preferences table.\n"
"\n"
"The key may not have any whitespace nor an equals sign.\n"
"\n"
":param key:   the key\n"
":param value: the value")
  )
  
  
  
    
  .
def_static
("initBoolean", &frc::Preferences::InitBoolean,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given boolean into the preferences table if it doesn't\n"
"already exist.")
  )
  
  
  
    
  .
def_static
("setLong", &frc::Preferences::SetLong,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given long (int64_t) into the preferences table.\n"
"\n"
"The key may not have any whitespace nor an equals sign.\n"
"\n"
":param key:   the key\n"
":param value: the value")
  )
  
  
  
    
  .
def_static
("initLong", &frc::Preferences::InitLong,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Puts the given long into the preferences table if it doesn't\n"
"already exist.")
  )
  
  
  
    
  .
def_static
("containsKey", &frc::Preferences::ContainsKey,
      py::arg("key"), release_gil(), py::doc(
    "Returns whether or not there is a key with the given name.\n"
"\n"
":param key: the key\n"
"\n"
":returns: if there is a value at the given key")
  )
  
  
  
    
  .
def_static
("remove", &frc::Preferences::Remove,
      py::arg("key"), release_gil(), py::doc(
    "Remove a preference.\n"
"\n"
":param key: the key")
  )
  
  
  
    
  .
def_static
("removeAll", &frc::Preferences::RemoveAll, release_gil(), py::doc(
    "Remove all preferences.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_Preferences_initializer

static std::unique_ptr<rpybuild_Preferences_initializer> cls;

void begin_init_Preferences(py::module &m) {
  cls = std::make_unique<rpybuild_Preferences_initializer>(m);
}

void finish_init_Preferences() {
  cls->finish();
  cls.reset();
}