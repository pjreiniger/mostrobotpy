
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/smartdashboard/MechanismObject2d.h>


#include <units_angle_type_caster.h>







#define RPYGEN_ENABLE_frc__MechanismObject2d_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__MechanismObject2d.hpp>







#include <frc/smartdashboard/MechanismLigament2d.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_MechanismObject2d_initializer {


  

  












  
  using MechanismObject2d_Trampoline = rpygen::PyTrampoline_frc__MechanismObject2d<typename frc::MechanismObject2d, typename rpygen::PyTrampolineCfg_frc__MechanismObject2d<>>;
    static_assert(std::is_abstract<MechanismObject2d_Trampoline>::value == false, "frc::MechanismObject2d " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::MechanismObject2d, MechanismObject2d_Trampoline> cls_MechanismObject2d;

    

    
    

  py::module &m;

  
  rpybuild_MechanismObject2d_initializer(py::module &m) :

  

  

  

  
    cls_MechanismObject2d(m, "MechanismObject2d"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_MechanismObject2d.doc() =
    "Common base class for all Mechanism2d node types.\n"
"\n"
"To append another node, call Append with the type of node and its\n"
"construction parameters. None of the node types are designed to be\n"
"constructed directly, and are owned by their parent node/container - obtain\n"
"pointers from the Append function or similar factory methods.\n"
"\n"
"@see Mechanism2d.";

  cls_MechanismObject2d
  
    
  .
def
("getName", &frc::MechanismObject2d::GetName, release_gil(), py::doc(
    "Retrieve the object's name.\n"
"\n"
":returns: the object's name relative to its parent.")
  )
  
  
  
    
  .
def
("_updateEntries", static_cast<void(frc::MechanismObject2d::*)(std::shared_ptr<nt::NetworkTable>)>(&MechanismObject2d_Trampoline::UpdateEntries),
      py::arg("table"), release_gil(), py::doc(
    "Update all entries with new ones from a new table.\n"
"\n"
":param table: the new table.")
  )
  
  
  ;

  


  }







  cls_MechanismObject2d
  .def("appendLigament", [](MechanismObject2d *self,
    std::string_view name, double length, units::degree_t angle,
    double lineWidth, const frc::Color8Bit& color) {
      return self->Append<MechanismLigament2d>(name, length, angle, lineWidth, color);
    },
    py::arg("name"), py::arg("length"), py::arg("angle"),
    py::arg("lineWidth") = 6, py::arg("color") = frc::Color8Bit{235, 137, 52},
    "Append a ligament node",
    py::return_value_policy::reference_internal)
  ;

}

}; // struct rpybuild_MechanismObject2d_initializer

static std::unique_ptr<rpybuild_MechanismObject2d_initializer> cls;

void begin_init_MechanismObject2d(py::module &m) {
  cls = std::make_unique<rpybuild_MechanismObject2d_initializer>(m);
}

void finish_init_MechanismObject2d() {
  cls->finish();
  cls.reset();
}