
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/PWMTalonSRX.h>








#define RPYGEN_ENABLE_frc__PWMTalonSRX_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__PWMTalonSRX.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_PWMTalonSRX_initializer {


  

  












  
  using PWMTalonSRX_Trampoline = rpygen::PyTrampoline_frc__PWMTalonSRX<typename frc::PWMTalonSRX, typename rpygen::PyTrampolineCfg_frc__PWMTalonSRX<>>;
    static_assert(std::is_abstract<PWMTalonSRX_Trampoline>::value == false, "frc::PWMTalonSRX " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::PWMTalonSRX, PWMTalonSRX_Trampoline, frc::PWMMotorController> cls_PWMTalonSRX;

    

    
    

  py::module &m;

  
  rpybuild_PWMTalonSRX_initializer(py::module &m) :

  

  

  

  
    cls_PWMTalonSRX(m, "PWMTalonSRX"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_PWMTalonSRX.doc() =
    "Cross the Road Electronics (CTRE) %Talon SRX Motor %Controller with PWM\n"
"control.\n"
"\n"
"Note that the %Talon SRX uses the following bounds for PWM values. These\n"
"values should work reasonably well for most controllers, but if users\n"
"experience issues such as asymmetric behavior around the deadband or\n"
"inability to saturate the controller in either direction, calibration is\n"
"recommended. The calibration procedure can be found in the %Talon SRX User\n"
"Manual available from Cross The Road Electronics.\n"
"\n"
"- 2.004ms = full \"forward\"\n"
"- 1.520ms = the \"high end\" of the deadband range\n"
"- 1.500ms = center of the deadband range (off)\n"
"- 1.480ms = the \"low end\" of the deadband range\n"
"- 0.997ms = full \"reverse\"";

  cls_PWMTalonSRX
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Construct a %Talon SRX connected via PWM.\n"
"\n"
":param channel: The PWM channel that the %Talon SRX is attached to. 0-9 are\n"
"                on-board, 10-19 are on the MXP port")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_PWMTalonSRX_initializer

static std::unique_ptr<rpybuild_PWMTalonSRX_initializer> cls;

void begin_init_PWMTalonSRX(py::module &m) {
  cls = std::make_unique<rpybuild_PWMTalonSRX_initializer>(m);
}

void finish_init_PWMTalonSRX() {
  cls->finish();
  cls.reset();
}