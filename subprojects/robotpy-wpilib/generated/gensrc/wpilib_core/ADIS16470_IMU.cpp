
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/ADIS16470_IMU.h>


#include <units_acceleration_type_caster.h>

#include <units_angle_type_caster.h>

#include <units_angular_velocity_type_caster.h>







#define RPYGEN_ENABLE_frc__ADIS16470_IMU_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__ADIS16470_IMU.hpp>







#include <networktables/NTSendableBuilder.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_ADIS16470_IMU_initializer {


  

  












  
  using ADIS16470_IMU_Trampoline = rpygen::PyTrampoline_frc__ADIS16470_IMU<typename frc::ADIS16470_IMU, typename rpygen::PyTrampolineCfg_frc__ADIS16470_IMU<>>;
    static_assert(std::is_abstract<ADIS16470_IMU_Trampoline>::value == false, "frc::ADIS16470_IMU " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::ADIS16470_IMU, ADIS16470_IMU_Trampoline, wpi::Sendable> cls_ADIS16470_IMU;

    
    
  py::enum_<frc::ADIS16470_IMU::CalibrationTime> cls_ADIS16470_IMU_enum1;
    
    
  py::enum_<frc::ADIS16470_IMU::IMUAxis> cls_ADIS16470_IMU_enum2;
    

    
    

  py::module &m;

  
  rpybuild_ADIS16470_IMU_initializer(py::module &m) :

  

  

  

  
    cls_ADIS16470_IMU(m, "ADIS16470_IMU"),

  
    cls_ADIS16470_IMU_enum1
  (cls_ADIS16470_IMU, "CalibrationTime"
  ,
    "ADIS16470 calibration times."),
  
    cls_ADIS16470_IMU_enum2
  (cls_ADIS16470_IMU, "IMUAxis"
  ,
    "IMU axes.\n"
"\n"
"kX, kY, and kZ refer to the IMU's X, Y, and Z axes respectively. kYaw,\n"
"kPitch, and kRoll are configured by the user to refer to an X, Y, or Z\n"
"axis."),
  

  
  
  

    m(m)
  {
    
    

    
    
  
    cls_ADIS16470_IMU_enum1
  
    .value("_32ms", frc::ADIS16470_IMU::CalibrationTime::_32ms,
      "32 ms calibration time.")
  
    .value("_64ms", frc::ADIS16470_IMU::CalibrationTime::_64ms,
      "64 ms calibration time.")
  
    .value("_128ms", frc::ADIS16470_IMU::CalibrationTime::_128ms,
      "128 ms calibration time.")
  
    .value("_256ms", frc::ADIS16470_IMU::CalibrationTime::_256ms,
      "256 ms calibration time.")
  
    .value("_512ms", frc::ADIS16470_IMU::CalibrationTime::_512ms,
      "512 ms calibration time.")
  
    .value("_1s", frc::ADIS16470_IMU::CalibrationTime::_1s,
      "1 s calibration time.")
  
    .value("_2s", frc::ADIS16470_IMU::CalibrationTime::_2s,
      "2 s calibration time.")
  
    .value("_4s", frc::ADIS16470_IMU::CalibrationTime::_4s,
      "4 s calibration time.")
  
    .value("_8s", frc::ADIS16470_IMU::CalibrationTime::_8s,
      "8 s calibration time.")
  
    .value("_16s", frc::ADIS16470_IMU::CalibrationTime::_16s,
      "16 s calibration time.")
  
    .value("_32s", frc::ADIS16470_IMU::CalibrationTime::_32s,
      "32 s calibration time.")
  
    .value("_64s", frc::ADIS16470_IMU::CalibrationTime::_64s,
      "64 s calibration time.")
  ;

  
    cls_ADIS16470_IMU_enum2
  
    .value("kX", frc::ADIS16470_IMU::IMUAxis::kX,
      "The IMU's X axis.")
  
    .value("kY", frc::ADIS16470_IMU::IMUAxis::kY,
      "The IMU's Y axis.")
  
    .value("kZ", frc::ADIS16470_IMU::IMUAxis::kZ,
      "The IMU's Z axis.")
  
    .value("kYaw", frc::ADIS16470_IMU::IMUAxis::kYaw,
      "The user-configured yaw axis.")
  
    .value("kPitch", frc::ADIS16470_IMU::IMUAxis::kPitch,
      "The user-configured pitch axis.")
  
    .value("kRoll", frc::ADIS16470_IMU::IMUAxis::kRoll,
      "The user-configured roll axis.")
  ;

  

    
    
  }

void finish() {





  {
  
  
  using CalibrationTime [[maybe_unused]] = typename frc::ADIS16470_IMU::CalibrationTime;
  
  using IMUAxis [[maybe_unused]] = typename frc::ADIS16470_IMU::IMUAxis;
  
  


  

  

  cls_ADIS16470_IMU
  
    
  .def(py::init<>(), release_gil(), py::doc(
    "Creates a new ADIS16740 IMU object.\n"
"\n"
"The default setup is the onboard SPI port with a calibration time of 4\n"
"seconds. Yaw, pitch, and roll are kZ, kX, and kY respectively.")
  )
  
  
  
    
  .def(py::init<IMUAxis, IMUAxis, IMUAxis>(),
      py::arg("yaw_axis"), py::arg("pitch_axis"), py::arg("roll_axis"), release_gil(), py::doc(
    "Creates a new ADIS16740 IMU object.\n"
"\n"
"The default setup is the onboard SPI port with a calibration time of 4\n"
"seconds.\n"
"\n"
":strong:`:emphasis:`Input axes limited to kX, kY and kZ. Specifying kYaw, kPitch,or kRoll\n"
"will result in an error.``\n"
"\n"
":param yaw_axis:   The axis that measures the yaw\n"
":param pitch_axis: The axis that measures the pitch\n"
":param roll_axis:  The axis that measures the roll")
  )
  
  
  
    
  .def(py::init<IMUAxis, IMUAxis, IMUAxis, frc::SPI::Port, CalibrationTime>(),
      py::arg("yaw_axis"), py::arg("pitch_axis"), py::arg("roll_axis"), py::arg("port"), py::arg("cal_time"), release_gil(), py::doc(
    "Creates a new ADIS16740 IMU object.\n"
"\n"
":strong:`:emphasis:`Input axes limited to kX, kY and kZ. Specifying kYaw, kPitch, or\n"
"kRoll will result in an error.``\n"
"\n"
":param yaw_axis:   The axis that measures the yaw\n"
":param pitch_axis: The axis that measures the pitch\n"
":param roll_axis:  The axis that measures the roll\n"
":param port:       The SPI Port the gyro is plugged into\n"
":param cal_time:   Calibration time")
  )
  
  
  
    
  .
def
("configDecRate", &frc::ADIS16470_IMU::ConfigDecRate,
      py::arg("decimationRate"), release_gil(), py::doc(
    "Configures the decimation rate of the IMU.\n"
"\n"
":param decimationRate: The new decimation value.\n"
"\n"
":returns: 0 if success, 1 if no change, 2 if error.")
  )
  
  
  
    
  .
def
("calibrate", &frc::ADIS16470_IMU::Calibrate, release_gil(), py::doc(
    "Switches the active SPI port to standard SPI mode, writes the\n"
"command to activate the new null configuration, and re-enables auto SPI.")
  )
  
  
  
    
  .
def
("configCalTime", &frc::ADIS16470_IMU::ConfigCalTime,
      py::arg("new_cal_time"), release_gil(), py::doc(
    "Switches the active SPI port to standard SPI mode, writes a new\n"
"value to the NULL_CNFG register in the IMU, and re-enables auto SPI.")
  )
  
  
  
    
  .
def
("reset", &frc::ADIS16470_IMU::Reset, release_gil(), py::doc(
    "Reset the gyro.\n"
"\n"
"Resets the gyro accumulations to a heading of zero. This can be used if\n"
"there is significant drift in the gyro and it needs to be recalibrated\n"
"after running.")
  )
  
  
  
    
  .
def
("setGyroAngle", &frc::ADIS16470_IMU::SetGyroAngle,
      py::arg("axis"), py::arg("angle"), release_gil(), py::doc(
    "Allow the designated gyro angle to be set to a given value. This may happen\n"
"with unread values in the buffer, it is suggested that the IMU is not\n"
"moving when this method is run.\n"
"\n"
":param axis:  IMUAxis that will be changed\n"
":param angle: The new angle (CCW positive)")
  )
  
  
  
    
  .
def
("setGyroAngleX", &frc::ADIS16470_IMU::SetGyroAngleX,
      py::arg("angle"), release_gil(), py::doc(
    "Allow the gyro angle X to be set to a given value. This may happen with\n"
"unread values in the buffer, it is suggested that the IMU is not moving\n"
"when this method is run.\n"
"\n"
":param angle: The new angle (CCW positive)")
  )
  
  
  
    
  .
def
("setGyroAngleY", &frc::ADIS16470_IMU::SetGyroAngleY,
      py::arg("angle"), release_gil(), py::doc(
    "Allow the gyro angle Y to be set to a given value. This may happen with\n"
"unread values in the buffer, it is suggested that the IMU is not moving\n"
"when this method is run.\n"
"\n"
":param angle: The new angle (CCW positive)")
  )
  
  
  
    
  .
def
("setGyroAngleZ", &frc::ADIS16470_IMU::SetGyroAngleZ,
      py::arg("angle"), release_gil(), py::doc(
    "Allow the gyro angle Z to be set to a given value. This may happen with\n"
"unread values in the buffer, it is suggested that the IMU is not moving\n"
"when this method is run.\n"
"\n"
":param angle: The new angle (CCW positive)")
  )
  
  
  
    
  .
def
("getAngle", &frc::ADIS16470_IMU::GetAngle,
      py::arg("axis") = IMUAxis::kYaw, release_gil(), py::doc(
    "Returns the axis angle (CCW positive).\n"
"\n"
":param axis: The IMUAxis whose angle to return. Defaults to user configured\n"
"             Yaw.\n"
"\n"
":returns: The axis angle (CCW positive).")
  )
  
  
  
    
  .
def
("getRate", &frc::ADIS16470_IMU::GetRate,
      py::arg("axis") = IMUAxis::kYaw, release_gil(), py::doc(
    "Returns the axis angular rate (CCW positive).\n"
"\n"
":param axis: The IMUAxis whose rate to return. Defaults to user configured\n"
"             Yaw.\n"
"\n"
":returns: Axis angular rate (CCW positive).")
  )
  
  
  
    
  .
def
("getAccelX", &frc::ADIS16470_IMU::GetAccelX, release_gil(), py::doc(
    "Returns the acceleration in the X axis.")
  )
  
  
  
    
  .
def
("getAccelY", &frc::ADIS16470_IMU::GetAccelY, release_gil(), py::doc(
    "Returns the acceleration in the Y axis.")
  )
  
  
  
    
  .
def
("getAccelZ", &frc::ADIS16470_IMU::GetAccelZ, release_gil(), py::doc(
    "Returns the acceleration in the Z axis.")
  )
  
  
  
    
  .
def
("getXComplementaryAngle", &frc::ADIS16470_IMU::GetXComplementaryAngle, release_gil(), py::doc(
    "Returns the X-axis complementary angle.")
  )
  
  
  
    
  .
def
("getYComplementaryAngle", &frc::ADIS16470_IMU::GetYComplementaryAngle, release_gil(), py::doc(
    "Returns the Y-axis complementary angle.")
  )
  
  
  
    
  .
def
("getXFilteredAccelAngle", &frc::ADIS16470_IMU::GetXFilteredAccelAngle, release_gil(), py::doc(
    "Returns the X-axis filtered acceleration angle.")
  )
  
  
  
    
  .
def
("getYFilteredAccelAngle", &frc::ADIS16470_IMU::GetYFilteredAccelAngle, release_gil(), py::doc(
    "Returns the Y-axis filtered acceleration angle.")
  )
  
  
  
    
  .
def
("getYawAxis", &frc::ADIS16470_IMU::GetYawAxis, release_gil(), py::doc(
    "Returns which axis, kX, kY, or kZ, is set to the yaw axis.\n"
"\n"
":returns: IMUAxis Yaw Axis")
  )
  
  
  
    
  .
def
("getPitchAxis", &frc::ADIS16470_IMU::GetPitchAxis, release_gil(), py::doc(
    "Returns which axis, kX, kY, or kZ, is set to the pitch axis.\n"
"\n"
":returns: IMUAxis Pitch Axis")
  )
  
  
  
    
  .
def
("getRollAxis", &frc::ADIS16470_IMU::GetRollAxis, release_gil(), py::doc(
    "Returns which axis, kX, kY, or kZ, is set to the roll axis.\n"
"\n"
":returns: IMUAxis Roll Axis")
  )
  
  
  
    
  .
def
("isConnected", &frc::ADIS16470_IMU::IsConnected, release_gil(), py::doc(
    "Checks the connection status of the IMU.\n"
"\n"
":returns: True if the IMU is connected, false otherwise.")
  )
  
  
  
    
  .
def
("getPort", &frc::ADIS16470_IMU::GetPort, release_gil(), py::doc(
    "Gets the SPI port number.\n"
"\n"
":returns: The SPI port number.")
  )
  
  
  
    
  .
def
("initSendable", &frc::ADIS16470_IMU::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  
    .def_readonly("m_yaw_axis", &frc::ADIS16470_IMU::m_yaw_axis)
  
    .def_readonly("m_pitch_axis", &frc::ADIS16470_IMU::m_pitch_axis)
  
    .def_readonly("m_roll_axis", &frc::ADIS16470_IMU::m_roll_axis)
  ;

  


  }






}

}; // struct rpybuild_ADIS16470_IMU_initializer

static std::unique_ptr<rpybuild_ADIS16470_IMU_initializer> cls;

void begin_init_ADIS16470_IMU(py::module &m) {
  cls = std::make_unique<rpybuild_ADIS16470_IMU_initializer>(m);
}

void finish_init_ADIS16470_IMU() {
  cls->finish();
  cls.reset();
}