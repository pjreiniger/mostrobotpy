
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/AnalogOutput.h>








#define RPYGEN_ENABLE_frc__AnalogOutput_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__AnalogOutput.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_AnalogOutput_initializer {


  

  












  
  using AnalogOutput_Trampoline = rpygen::PyTrampoline_frc__AnalogOutput<typename frc::AnalogOutput, typename rpygen::PyTrampolineCfg_frc__AnalogOutput<>>;
    static_assert(std::is_abstract<AnalogOutput_Trampoline>::value == false, "frc::AnalogOutput " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::AnalogOutput, AnalogOutput_Trampoline, wpi::Sendable> cls_AnalogOutput;

    

    
    

  py::module &m;

  
  rpybuild_AnalogOutput_initializer(py::module &m) :

  

  

  

  
    cls_AnalogOutput(m, "AnalogOutput"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_AnalogOutput.doc() =
    "MXP analog output class.";

  cls_AnalogOutput
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Construct an analog output on the given channel.\n"
"\n"
"All analog outputs are located on the MXP port.\n"
"\n"
":param channel: The channel number on the roboRIO to represent.")
  )
  
  
  
    
  .
def
("setVoltage", &frc::AnalogOutput::SetVoltage,
      py::arg("voltage"), release_gil(), py::doc(
    "Set the value of the analog output.\n"
"\n"
":param voltage: The output value in Volts, from 0.0 to +5.0.")
  )
  
  
  
    
  .
def
("getVoltage", &frc::AnalogOutput::GetVoltage, release_gil(), py::doc(
    "Get the voltage of the analog output.\n"
"\n"
":returns: The value in Volts, from 0.0 to +5.0.")
  )
  
  
  
    
  .
def
("getChannel", &frc::AnalogOutput::GetChannel, release_gil(), py::doc(
    "Get the channel of this AnalogOutput.")
  )
  
  
  
    
  .
def
("initSendable", &frc::AnalogOutput::InitSendable,
      py::arg("builder"), release_gil()
  )
  
  
  
    .def_readwrite("_m_channel", &rpygen::PyTrampoline_frc__AnalogOutput<typename frc::AnalogOutput, typename rpygen::PyTrampolineCfg_frc__AnalogOutput<>>::m_channel);

  


  }







  cls_AnalogOutput
  .def("__repr__", [](const AnalogOutput &self) {
    return py::str("<AnalogOutput {}>").format(self.GetChannel());
  });


}

}; // struct rpybuild_AnalogOutput_initializer

static std::unique_ptr<rpybuild_AnalogOutput_initializer> cls;

void begin_init_AnalogOutput(py::module &m) {
  cls = std::make_unique<rpybuild_AnalogOutput_initializer>(m);
}

void finish_init_AnalogOutput() {
  cls->finish();
  cls.reset();
}