
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/SD540.h>








#define RPYGEN_ENABLE_frc__SD540_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__SD540.hpp>







#include <wpi/sendable/SendableBuilder.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_SD540_initializer {


  

  












  
  using SD540_Trampoline = rpygen::PyTrampoline_frc__SD540<typename frc::SD540, typename rpygen::PyTrampolineCfg_frc__SD540<>>;
    static_assert(std::is_abstract<SD540_Trampoline>::value == false, "frc::SD540 " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::SD540, SD540_Trampoline, frc::PWMMotorController> cls_SD540;

    

    
    

  py::module &m;

  
  rpybuild_SD540_initializer(py::module &m) :

  

  

  

  
    cls_SD540(m, "SD540"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_SD540.doc() =
    "Mindsensors SD540 Motor Controller with PWM control.\n"
"\n"
"Note that the SD540 uses the following bounds for PWM values. These\n"
"values should work reasonably well for most controllers, but if users\n"
"experience issues such as asymmetric behavior around the deadband or\n"
"inability to saturate the controller in either direction, calibration is\n"
"recommended. The calibration procedure can be found in the SD540 User\n"
"Manual available from Mindsensors.\n"
"\n"
"- 2.050ms = full \"forward\"\n"
"- 1.550ms = the \"high end\" of the deadband range\n"
"- 1.500ms = center of the deadband range (off)\n"
"- 1.440ms = the \"low end\" of the deadband range\n"
"- 0.940ms = full \"reverse\"";

  cls_SD540
  
    
  .def(py::init<int>(),
      py::arg("channel"), release_gil(), py::doc(
    "Constructor for a SD540 connected via PWM.\n"
"\n"
":param channel: The PWM channel that the SD540 is attached to. 0-9 are\n"
"                on-board, 10-19 are on the MXP port")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_SD540_initializer

static std::unique_ptr<rpybuild_SD540_initializer> cls;

void begin_init_SD540(py::module &m) {
  cls = std::make_unique<rpybuild_SD540_initializer>(m);
}

void finish_init_SD540() {
  cls->finish();
  cls.reset();
}