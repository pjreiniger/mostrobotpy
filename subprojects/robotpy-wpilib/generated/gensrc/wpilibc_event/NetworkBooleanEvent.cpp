
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/event/NetworkBooleanEvent.h>














#include <networktables/BooleanTopic.h>

#include <networktables/NetworkTable.h>

#include <networktables/NetworkTableInstance.h>



#include <type_traits>


  using namespace nt;

  using namespace frc;





struct rpybuild_NetworkBooleanEvent_initializer {


  

  












  py::class_<typename frc::NetworkBooleanEvent, frc::BooleanEvent> cls_NetworkBooleanEvent;

    

    
    

  py::module &m;

  
  rpybuild_NetworkBooleanEvent_initializer(py::module &m) :

  

  

  

  
    cls_NetworkBooleanEvent(m, "NetworkBooleanEvent"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_NetworkBooleanEvent.doc() =
    "A Button that uses a NetworkTable boolean field.\n"
"\n"
"This class is provided by the NewCommands VendorDep";

  cls_NetworkBooleanEvent
  
    
  .def(py::init([](EventLoop *loop, nt::BooleanTopic &topic) {
  return std::make_unique<NetworkBooleanEvent>(loop, std::move(topic));
}
),
      py::arg("loop"), py::arg("topic"), py::doc(
    "Creates a new event with the given boolean topic determining whether it is\n"
"active.\n"
"\n"
":param loop:  the loop that polls this event\n"
":param topic: The boolean topic that contains the value")
  )
  
  
  
    
  .def(py::init([](EventLoop *loop, nt::BooleanSubscriber &sub) {
  return std::make_unique<NetworkBooleanEvent>(loop, std::move(sub));
}
),
      py::arg("loop"), py::arg("sub"), py::doc(
    "Creates a new event with the given boolean subscriber determining whether\n"
"it is active.\n"
"\n"
":param loop: the loop that polls this event\n"
":param sub:  The boolean subscriber that provides the value")
  )
  
  
  
    
  .def(py::init<EventLoop*, std::shared_ptr<nt::NetworkTable>, std::string_view>(),
      py::arg("loop"), py::arg("table"), py::arg("topicName"), release_gil(), py::doc(
    "Creates a new event with the given boolean topic determining whether it is\n"
"active.\n"
"\n"
":param loop:      the loop that polls this event\n"
":param table:     The NetworkTable that contains the topic\n"
":param topicName: The topic name within the table that contains the value")
  )
  
  
  
    
  .def(py::init<EventLoop*, std::string_view, std::string_view>(),
      py::arg("loop"), py::arg("tableName"), py::arg("topicName"), release_gil(), py::doc(
    "Creates a new event with the given boolean topic determining whether it is\n"
"active.\n"
"\n"
":param loop:      the loop that polls this event\n"
":param tableName: The NetworkTable name that contains the topic\n"
":param topicName: The topic name within the table that contains the value")
  )
  
  
  
    
  .def(py::init<EventLoop*, nt::NetworkTableInstance, std::string_view, std::string_view>(),
      py::arg("loop"), py::arg("inst"), py::arg("tableName"), py::arg("topicName"), release_gil(), py::doc(
    "Creates a new event with the given boolean topic determining whether it is\n"
"active.\n"
"\n"
":param loop:      the loop that polls this event\n"
":param inst:      The NetworkTable instance to use\n"
":param tableName: The NetworkTable that contains the topic\n"
":param topicName: The topic name within the table that contains the value")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_NetworkBooleanEvent_initializer

static std::unique_ptr<rpybuild_NetworkBooleanEvent_initializer> cls;

void begin_init_NetworkBooleanEvent(py::module &m) {
  cls = std::make_unique<rpybuild_NetworkBooleanEvent_initializer>(m);
}

void finish_init_NetworkBooleanEvent() {
  cls->finish();
  cls.reset();
}