
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/event/EventLoop.h>


#include <pybind11/functional.h>















#include <type_traits>


  using namespace frc;



struct rpybuild_EventLoop_initializer {


  

  












  py::class_<typename frc::EventLoop> cls_EventLoop;

    

    
    

  py::module &m;

  
  rpybuild_EventLoop_initializer(py::module &m) :

  

  

  

  
    cls_EventLoop(m, "EventLoop"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_EventLoop.doc() =
    "A declarative way to bind a set of actions to a loop and execute them when\n"
"the loop is polled.";

  cls_EventLoop
  
    
  .def(py::init<>(), release_gil()
  )
  
  
  
    
  .
def
("bind", [](EventLoop *self, std::function<void()> action) {
  self->Bind(std::move(action));
}
,
      py::arg("action"), py::doc(
    "Bind a new action to run when the loop is polled.\n"
"\n"
":param action: the action to run.")
  )
  
  
  
    
  .
def
("poll", &frc::EventLoop::Poll, release_gil(), py::doc(
    "Poll all bindings.")
  )
  
  
  
    
  .
def
("clear", &frc::EventLoop::Clear, release_gil(), py::doc(
    "Clear all bindings.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_EventLoop_initializer

static std::unique_ptr<rpybuild_EventLoop_initializer> cls;

void begin_init_EventLoop(py::module &m) {
  cls = std::make_unique<rpybuild_EventLoop_initializer>(m);
}

void finish_init_EventLoop() {
  cls->finish();
  cls.reset();
}