
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/counter/ExternalDirectionCounter.h>








#define RPYGEN_ENABLE_frc__ExternalDirectionCounter_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__ExternalDirectionCounter.hpp>







#include <frc/DigitalSource.h>



#include <type_traits>


  using namespace frc;





struct rpybuild_ExternalDirectionCounter_initializer {


  

  












  
  using ExternalDirectionCounter_Trampoline = rpygen::PyTrampoline_frc__ExternalDirectionCounter<typename frc::ExternalDirectionCounter, typename rpygen::PyTrampolineCfg_frc__ExternalDirectionCounter<>>;
    static_assert(std::is_abstract<ExternalDirectionCounter_Trampoline>::value == false, "frc::ExternalDirectionCounter " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::ExternalDirectionCounter, ExternalDirectionCounter_Trampoline, wpi::Sendable> cls_ExternalDirectionCounter;

    

    
    

  py::module &m;

  
  rpybuild_ExternalDirectionCounter_initializer(py::module &m) :

  

  

  

  
    cls_ExternalDirectionCounter(m, "ExternalDirectionCounter"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_ExternalDirectionCounter.doc() =
    "Counter using external direction.\n"
"\n"
"This counts on an edge from one digital input and the whether it counts\n"
"up or down based on the state of a second digital input.";

  cls_ExternalDirectionCounter
  
    
  .def(py::init<DigitalSource&, DigitalSource&>(),
      py::arg("countSource"), py::arg("directionSource"), release_gil()
    , py::keep_alive<1, 2>()
    , py::keep_alive<1, 3>(), py::doc(
    "Constructs a new ExternalDirectionCounter.\n"
"\n"
":param countSource:     The source for counting.\n"
":param directionSource: The source for selecting count direction.")
  )
  
  
  
    
  .def(py::init<std::shared_ptr<DigitalSource>, std::shared_ptr<DigitalSource>>(),
      py::arg("countSource"), py::arg("directionSource"), release_gil(), py::doc(
    "Constructs a new ExternalDirectionCounter.\n"
"\n"
":param countSource:     The source for counting.\n"
":param directionSource: The source for selecting count direction.")
  )
  
  
  
    
  .
def
("getCount", &frc::ExternalDirectionCounter::GetCount, release_gil(), py::doc(
    "Gets the current count.\n"
"\n"
":returns: The current count.")
  )
  
  
  
    
  .
def
("setReverseDirection", &frc::ExternalDirectionCounter::SetReverseDirection,
      py::arg("reverseDirection"), release_gil(), py::doc(
    "Sets to reverse the counter direction.\n"
"\n"
":param reverseDirection: True to reverse counting direction.")
  )
  
  
  
    
  .
def
("reset", &frc::ExternalDirectionCounter::Reset, release_gil(), py::doc(
    "Resets the current count.")
  )
  
  
  
    
  .
def
("setEdgeConfiguration", &frc::ExternalDirectionCounter::SetEdgeConfiguration,
      py::arg("configuration"), release_gil(), py::doc(
    "Sets the edge configuration for counting.\n"
"\n"
":param configuration: The counting edge configuration.")
  )
  
  
  
    
  .
def
("_initSendable", static_cast<void(frc::ExternalDirectionCounter::*)(wpi::SendableBuilder&)>(&ExternalDirectionCounter_Trampoline::InitSendable),
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_ExternalDirectionCounter_initializer

static std::unique_ptr<rpybuild_ExternalDirectionCounter_initializer> cls;

void begin_init_ExternalDirectionCounter(py::module &m) {
  cls = std::make_unique<rpybuild_ExternalDirectionCounter_initializer>(m);
}

void finish_init_ExternalDirectionCounter() {
  cls->finish();
  cls.reset();
}