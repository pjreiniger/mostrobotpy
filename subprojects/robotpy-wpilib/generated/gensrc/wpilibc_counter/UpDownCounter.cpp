
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/counter/UpDownCounter.h>








#define RPYGEN_ENABLE_frc__UpDownCounter_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__UpDownCounter.hpp>







#include <frc/DigitalSource.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_UpDownCounter_initializer {


  

  












  
  using UpDownCounter_Trampoline = rpygen::PyTrampoline_frc__UpDownCounter<typename frc::UpDownCounter, typename rpygen::PyTrampolineCfg_frc__UpDownCounter<>>;
    static_assert(std::is_abstract<UpDownCounter_Trampoline>::value == false, "frc::UpDownCounter " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::UpDownCounter, UpDownCounter_Trampoline, wpi::Sendable> cls_UpDownCounter;

    

    
    

  py::module &m;

  
  rpybuild_UpDownCounter_initializer(py::module &m) :

  

  

  

  
    cls_UpDownCounter(m, "UpDownCounter"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_UpDownCounter.doc() =
    "Up Down Counter.\n"
"\n"
"This class can count edges on a single digital input or count up based on an\n"
"edge from one digital input and down on an edge from another digital input.";

  cls_UpDownCounter
  
    
  .def(py::init<DigitalSource&, DigitalSource&>(),
      py::arg("upSource"), py::arg("downSource"), release_gil()
    , py::keep_alive<1, 2>()
    , py::keep_alive<1, 3>(), py::doc(
    "Constructs a new UpDown Counter.\n"
"\n"
":param upSource:   The up count source (can be null).\n"
":param downSource: The down count source (can be null).")
  )
  
  
  
    
  .def(py::init<std::shared_ptr<DigitalSource>, std::shared_ptr<DigitalSource>>(),
      py::arg("upSource"), py::arg("downSource"), release_gil(), py::doc(
    "Constructs a new UpDown Counter.\n"
"\n"
":param upSource:   The up count source (can be null).\n"
":param downSource: The down count source (can be null).")
  )
  
  
  
    
  .
def
("getCount", &frc::UpDownCounter::GetCount, release_gil(), py::doc(
    "Gets the current count.\n"
"\n"
":returns: The current count.")
  )
  
  
  
    
  .
def
("setReverseDirection", &frc::UpDownCounter::SetReverseDirection,
      py::arg("reverseDirection"), release_gil(), py::doc(
    "Sets to revert the counter direction.\n"
"\n"
":param reverseDirection: True to reverse counting direction.")
  )
  
  
  
    
  .
def
("reset", &frc::UpDownCounter::Reset, release_gil(), py::doc(
    "Resets the current count.")
  )
  
  
  
    
  .
def
("setUpEdgeConfiguration", &frc::UpDownCounter::SetUpEdgeConfiguration,
      py::arg("configuration"), release_gil(), py::doc(
    "Sets the configuration for the up source.\n"
"\n"
":param configuration: The up source configuration.")
  )
  
  
  
    
  .
def
("setDownEdgeConfiguration", &frc::UpDownCounter::SetDownEdgeConfiguration,
      py::arg("configuration"), release_gil(), py::doc(
    "Sets the configuration for the down source.\n"
"\n"
":param configuration: The down source configuration.")
  )
  
  
  
    
  .
def
("_initSendable", static_cast<void(frc::UpDownCounter::*)(wpi::SendableBuilder&)>(&UpDownCounter_Trampoline::InitSendable),
      py::arg("builder"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_UpDownCounter_initializer

static std::unique_ptr<rpybuild_UpDownCounter_initializer> cls;

void begin_init_UpDownCounter(py::module &m) {
  cls = std::make_unique<rpybuild_UpDownCounter_initializer>(m);
}

void finish_init_UpDownCounter() {
  cls->finish();
  cls.reset();
}