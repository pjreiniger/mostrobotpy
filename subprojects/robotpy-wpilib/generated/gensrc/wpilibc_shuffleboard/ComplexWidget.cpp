
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/shuffleboard/ComplexWidget.h>














#include <wpi/sendable/Sendable.h>

#include <wpi/sendable/SendableBuilder.h>

#include <frc/shuffleboard/ShuffleboardContainer.h>



#include <type_traits>


  using namespace wpi;

  using namespace frc;



struct rpybuild_ComplexWidget_initializer {


  

  












  py::class_<typename frc::ComplexWidget, frc::ShuffleboardWidget<ComplexWidget>> cls_ComplexWidget;

    

    
    

  py::module &m;

  
  rpybuild_ComplexWidget_initializer(py::module &m) :

  

  

  

  
    cls_ComplexWidget(m, "ComplexWidget", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_ComplexWidget.doc() =
    "A Shuffleboard widget that handles a Sendable object such as a motor\n"
"controller or sensor.";

  cls_ComplexWidget
  
    
  .def(py::init<ShuffleboardContainer&, std::string_view, wpi::Sendable&>(),
      py::arg("parent"), py::arg("title"), py::arg("sendable"), release_gil()
    , py::keep_alive<1, 2>()
    , py::keep_alive<1, 4>()
  )
  
  
  
    
  .
def
("enableIfActuator", &frc::ComplexWidget::EnableIfActuator, release_gil()
  )
  
  
  
    
  .
def
("disableIfActuator", &frc::ComplexWidget::DisableIfActuator, release_gil()
  )
  
  
  
    
  .
def
("buildInto", &frc::ComplexWidget::BuildInto,
      py::arg("parentTable"), py::arg("metaTable"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_ComplexWidget_initializer

static std::unique_ptr<rpybuild_ComplexWidget_initializer> cls;

void begin_init_ComplexWidget(py::module &m) {
  cls = std::make_unique<rpybuild_ComplexWidget_initializer>(m);
}

void finish_init_ComplexWidget() {
  cls->finish();
  cls.reset();
}