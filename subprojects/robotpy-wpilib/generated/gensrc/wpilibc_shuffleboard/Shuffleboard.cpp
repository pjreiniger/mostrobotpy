
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/shuffleboard/Shuffleboard.h>














#include <frc/shuffleboard/ShuffleboardTab.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_Shuffleboard_initializer {


  

  












  py::class_<typename frc::Shuffleboard> cls_Shuffleboard;

    

    
    

  py::module &m;

  
  rpybuild_Shuffleboard_initializer(py::module &m) :

  

  

  

  
    cls_Shuffleboard(m, "Shuffleboard", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  
    static constexpr auto kBaseTableName [[maybe_unused]] = frc::Shuffleboard::kBaseTableName;
  


  

  cls_Shuffleboard.doc() =
    "The Shuffleboard class provides a mechanism with which data can be added and\n"
"laid out in the Shuffleboard dashboard application from a robot program. Tabs\n"
"and layouts can be specified, as well as choosing which widgets to display\n"
"with and setting properties of these widgets; for example, programmers can\n"
"specify a specific ``boolean`` value to be displayed with a toggle button\n"
"instead of the default colored box, or set custom colors for that box.\n"
"\n"
"For example, displaying a boolean entry with a toggle button:\n"
"<pre>{@code\n"
"NetworkTableEntry myBoolean = Shuffleboard.getTab(\"Example Tab\")\n"
".add(\"My Boolean\", false)\n"
".withWidget(\"Toggle Button\")\n"
".getEntry();\n"
"}</pre>\n"
"\n"
"Changing the colors of the boolean box:\n"
"<pre>{@code\n"
"NetworkTableEntry myBoolean = Shuffleboard.getTab(\"Example Tab\")\n"
".add(\"My Boolean\", false)\n"
".withWidget(\"Boolean Box\")\n"
".withProperties(Map.of(\"colorWhenTrue\", \"green\", \"colorWhenFalse\",\n"
"\"maroon\")) .getEntry();\n"
"}</pre>\n"
"\n"
"Specifying a parent layout. Note that the layout type must *always* be\n"
"specified, even if the layout has already been generated by a previously\n"
"defined entry.\n"
"<pre>{@code\n"
"NetworkTableEntry myBoolean = Shuffleboard.getTab(\"Example Tab\")\n"
".getLayout(\"List\", \"Example List\")\n"
".add(\"My Boolean\", false)\n"
".withWidget(\"Toggle Button\")\n"
".getEntry();\n"
"}</pre>\n"
"</p>\n"
"\n"
"Teams are encouraged to set up shuffleboard layouts at the start of the robot\n"
"program.";

  cls_Shuffleboard
  
    
  .
def_static
("update", &frc::Shuffleboard::Update, release_gil(), py::doc(
    "Updates all the values in Shuffleboard. Iterative and timed robots are\n"
"pre-configured to call this method in the main robot loop; teams using\n"
"custom robot base classes, or subclass SampleRobot, should make sure to\n"
"call this repeatedly to keep data on the dashboard up to date.")
  )
  
  
  
    
  .
def_static
("getTab", &frc::Shuffleboard::GetTab,
      py::arg("title"), release_gil(), py::return_value_policy::reference_internal, py::doc(
    "Gets the Shuffleboard tab with the given title, creating it if it does not\n"
"already exist.\n"
"\n"
":param title: the title of the tab\n"
"\n"
":returns: the tab with the given title")
  )
  
  
  
    
  .
def_static
("selectTab", static_cast<void(*)(int)>(
        &frc::Shuffleboard::SelectTab),
      py::arg("index"), release_gil(), py::doc(
    "Selects the tab in the dashboard with the given index in the range\n"
"[0..n-1], where *n* is the number of tabs in the dashboard at the time\n"
"this method is called.\n"
"\n"
":param index: the index of the tab to select")
  )
  
  
  
    
  .
def_static
("selectTab", static_cast<void(*)(std::string_view)>(
        &frc::Shuffleboard::SelectTab),
      py::arg("title"), release_gil(), py::doc(
    "Selects the tab in the dashboard with the given title.\n"
"\n"
":param title: the title of the tab to select")
  )
  
  
  
    
  .
def_static
("enableActuatorWidgets", &frc::Shuffleboard::EnableActuatorWidgets, release_gil(), py::doc(
    "Enables user control of widgets containing actuators: motor controllers,\n"
"relays, etc. This should only be used when the robot is in test mode.\n"
"IterativeRobotBase and SampleRobot are both configured to call this method\n"
"when entering test mode; most users should not need to use this method\n"
"directly.")
  )
  
  
  
    
  .
def_static
("disableActuatorWidgets", &frc::Shuffleboard::DisableActuatorWidgets, release_gil(), py::doc(
    "Disables user control of widgets containing actuators. For safety reasons,\n"
"actuators should only be controlled while in test mode. IterativeRobotBase\n"
"and SampleRobot are both configured to call this method when exiting in\n"
"test mode; most users should not need to use this method directly.")
  )
  
  
  
    
  .
def_static
("startRecording", &frc::Shuffleboard::StartRecording, release_gil(), py::doc(
    "Starts data recording on the dashboard. Has no effect if recording is\n"
"already in progress.")
  )
  
  
  
    
  .
def_static
("stopRecording", &frc::Shuffleboard::StopRecording, release_gil(), py::doc(
    "Stops data recording on the dashboard. Has no effect if no recording is in\n"
"progress.")
  )
  
  
  
    
  .
def_static
("setRecordingFileNameFormat", &frc::Shuffleboard::SetRecordingFileNameFormat,
      py::arg("format"), release_gil(), py::doc(
    "Sets the file name format for new recording files to use. If recording is\n"
"in progress when this method is called, it will continue to use the same\n"
"file. New recordings will use the format.\n"
"\n"
"To avoid recording files overwriting each other, make sure to use unique\n"
"recording file names. File name formats accept templates for inserting the\n"
"date and time when the recording started with the ``${date``} and\n"
"``${time``} templates, respectively. For example, the default format is\n"
"``\"recording-${time``\"} and recording files created with it will have\n"
"names like ``\"recording-2018.01.15.sbr\"``. Users are\n"
"**strongly** recommended to use the ``${time``} template\n"
"to ensure unique file names.\n"
"</p>\n"
"\n"
":param format: the format for the")
  )
  
  
  
    
  .
def_static
("clearRecordingFileNameFormat", &frc::Shuffleboard::ClearRecordingFileNameFormat, release_gil(), py::doc(
    "Clears the custom name format for recording files. New recordings will use\n"
"the default format.\n"
"\n"
"@see SetRecordingFileNameFormat(std::string_view)")
  )
  
  
  
    
  .
def_static
("addEventMarker", static_cast<void(*)(std::string_view, std::string_view, ShuffleboardEventImportance)>(
        &frc::Shuffleboard::AddEventMarker),
      py::arg("name"), py::arg("description"), py::arg("importance"), release_gil(), py::doc(
    "Notifies Shuffleboard of an event. Events can range from as trivial as a\n"
"change in a command state to as critical as a total power loss or component\n"
"failure. If Shuffleboard is recording, the event will also be recorded.\n"
"\n"
"If ``name`` is ``null`` or empty, no event will be sent and an\n"
"error will be printed to the driver station.\n"
"\n"
":param name:        the name of the event\n"
":param description: a description of the event\n"
":param importance:  the importance of the event")
  )
  
  
  
    
  .
def_static
("addEventMarker", static_cast<void(*)(std::string_view, ShuffleboardEventImportance)>(
        &frc::Shuffleboard::AddEventMarker),
      py::arg("name"), py::arg("importance"), release_gil(), py::doc(
    "Notifies Shuffleboard of an event. Events can range from as trivial as a\n"
"change in a command state to as critical as a total power loss or component\n"
"failure. If Shuffleboard is recording, the event will also be recorded.\n"
"\n"
"If ``name`` is ``null`` or empty, no event will be sent and an\n"
"error will be printed to the driver station.\n"
"\n"
":param name:       the name of the event\n"
":param importance: the importance of the event")
  )
  
  
  
    .def_readonly_static("kBaseTableName", &frc::Shuffleboard::kBaseTableName, py::doc(
    "The name of the base NetworkTable into which all Shuffleboard data will be\n"
"added."))
  ;

  


  }






}

}; // struct rpybuild_Shuffleboard_initializer

static std::unique_ptr<rpybuild_Shuffleboard_initializer> cls;

void begin_init_Shuffleboard(py::module &m) {
  cls = std::make_unique<rpybuild_Shuffleboard_initializer>(m);
}

void finish_init_Shuffleboard() {
  cls->finish();
  cls.reset();
}