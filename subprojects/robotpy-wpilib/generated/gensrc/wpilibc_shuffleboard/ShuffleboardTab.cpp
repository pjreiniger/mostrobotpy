
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/shuffleboard/ShuffleboardTab.h>














#include <frc/shuffleboard/ShuffleboardRoot.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_ShuffleboardTab_initializer {


  

  












  py::class_<typename frc::ShuffleboardTab, frc::ShuffleboardContainer> cls_ShuffleboardTab;

    

    
    

  py::module &m;

  
  rpybuild_ShuffleboardTab_initializer(py::module &m) :

  

  

  

  
    cls_ShuffleboardTab(m, "ShuffleboardTab", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_ShuffleboardTab.doc() =
    "Represents a tab in the Shuffleboard dashboard. Widgets can be added to the\n"
"tab with Add(Sendable), Add(std::string_view, Object), and\n"
"Add(String, Sendable). Widgets can also be added to layouts with\n"
"GetLayout(std::string_view, std::string_view); layouts can be nested\n"
"arbitrarily deep (note that too many levels may make deeper components\n"
"unusable).";

  cls_ShuffleboardTab
  
    
  .def(py::init<ShuffleboardRoot&, std::string_view>(),
      py::arg("root"), py::arg("title"), release_gil()
    , py::keep_alive<1, 2>(), py::return_value_policy::reference_internal
  )
  
  
  
    
  .
def
("getRoot", &frc::ShuffleboardTab::GetRoot, release_gil()
  )
  
  
  
    
  .
def
("buildInto", &frc::ShuffleboardTab::BuildInto,
      py::arg("parentTable"), py::arg("metaTable"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_ShuffleboardTab_initializer

static std::unique_ptr<rpybuild_ShuffleboardTab_initializer> cls;

void begin_init_ShuffleboardTab(py::module &m) {
  cls = std::make_unique<rpybuild_ShuffleboardTab_initializer>(m);
}

void finish_init_ShuffleboardTab() {
  cls->finish();
  cls.reset();
}