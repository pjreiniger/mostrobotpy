
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/shuffleboard/SimpleWidget.h>














#include <frc/shuffleboard/ShuffleboardContainer.h>



#include <type_traits>


  using namespace frc;



struct rpybuild_SimpleWidget_initializer {


  

  












  py::class_<typename frc::SimpleWidget, frc::ShuffleboardWidget<SimpleWidget>> cls_SimpleWidget;

    

    
    

  py::module &m;

  
  rpybuild_SimpleWidget_initializer(py::module &m) :

  

  

  

  
    cls_SimpleWidget(m, "SimpleWidget", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_SimpleWidget.doc() =
    "A Shuffleboard widget that handles a single data point such as a number or\n"
"string.";

  cls_SimpleWidget
  
    
  .def(py::init<ShuffleboardContainer&, std::string_view>(),
      py::arg("parent"), py::arg("title"), release_gil()
    , py::keep_alive<1, 2>()
  )
  
  
  
    
  .
def
("getEntry", static_cast<nt::GenericEntry*(frc::SimpleWidget::*)()>(
        &frc::SimpleWidget::GetEntry), release_gil(), py::return_value_policy::reference_internal, py::doc(
    "Gets the NetworkTable entry that contains the data for this widget.\n"
"The widget owns the entry; the returned pointer's lifetime is the same as\n"
"that of the widget.")
  )
  
  
  
    
  .
def
("getEntry", static_cast<nt::GenericEntry*(frc::SimpleWidget::*)(std::string_view)>(
        &frc::SimpleWidget::GetEntry),
      py::arg("typeString"), release_gil(), py::return_value_policy::reference_internal, py::doc(
    "Gets the NetworkTable entry that contains the data for this widget.\n"
"The widget owns the entry; the returned pointer's lifetime is the same as\n"
"that of the widget.\n"
"\n"
":param typeString: NT type string")
  )
  
  
  
    
  .
def
("buildInto", &frc::SimpleWidget::BuildInto,
      py::arg("parentTable"), py::arg("metaTable"), release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_SimpleWidget_initializer

static std::unique_ptr<rpybuild_SimpleWidget_initializer> cls;

void begin_init_SimpleWidget(py::module &m) {
  cls = std::make_unique<rpybuild_SimpleWidget_initializer>(m);
}

void finish_init_SimpleWidget() {
  cls->finish();
  cls.reset();
}