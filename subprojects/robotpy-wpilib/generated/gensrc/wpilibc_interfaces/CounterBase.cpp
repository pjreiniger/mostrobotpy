
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/CounterBase.h>


#include <units_time_type_caster.h>







#define RPYGEN_ENABLE_frc__CounterBase_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__CounterBase.hpp>









#include <type_traits>


  using namespace frc;



struct rpybuild_CounterBase_initializer {


  

  












  
  using CounterBase_Trampoline = rpygen::PyTrampoline_frc__CounterBase<typename frc::CounterBase, typename rpygen::PyTrampolineCfg_frc__CounterBase<>>;
    static_assert(std::is_abstract<CounterBase_Trampoline>::value == false, "frc::CounterBase " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::CounterBase, CounterBase_Trampoline> cls_CounterBase;

    
    
  py::enum_<frc::CounterBase::EncodingType> cls_CounterBase_enum1;
    

    
    

  py::module &m;

  
  rpybuild_CounterBase_initializer(py::module &m) :

  

  

  

  
    cls_CounterBase(m, "CounterBase"),

  
    cls_CounterBase_enum1
  (cls_CounterBase, "EncodingType"
  ),
  

  
  
  

    m(m)
  {
    
    

    
    
  
    cls_CounterBase_enum1
  
    .value("k1X", frc::CounterBase::EncodingType::k1X)
  
    .value("k2X", frc::CounterBase::EncodingType::k2X)
  
    .value("k4X", frc::CounterBase::EncodingType::k4X)
  ;

  

    
    
  }

void finish() {





  {
  
  
  using EncodingType [[maybe_unused]] = typename frc::CounterBase::EncodingType;
  
  


  

  cls_CounterBase.doc() =
    "Interface for counting the number of ticks on a digital input channel.\n"
"\n"
"Encoders, Gear tooth sensors, and counters should all subclass this so it can\n"
"be used to build more advanced classes for control and driving.\n"
"\n"
"All counters will immediately start counting - Reset() them if you need them\n"
"to be zeroed before use.";

  cls_CounterBase
  
    
  .def(py::init<>(), release_gil()
  )
  
  
  
    
  .
def
("get", &frc::CounterBase::Get, release_gil()
  )
  
  
  
    
  .
def
("reset", &frc::CounterBase::Reset, release_gil()
  )
  
  
  
    
  .
def
("getPeriod", &frc::CounterBase::GetPeriod, release_gil()
  )
  
  
  
    
  .
def
("setMaxPeriod", &frc::CounterBase::SetMaxPeriod,
      py::arg("maxPeriod"), release_gil()
  )
  
  
  
    
  .
def
("getStopped", &frc::CounterBase::GetStopped, release_gil()
  )
  
  
  
    
  .
def
("getDirection", &frc::CounterBase::GetDirection, release_gil()
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_CounterBase_initializer

static std::unique_ptr<rpybuild_CounterBase_initializer> cls;

void begin_init_CounterBase(py::module &m) {
  cls = std::make_unique<rpybuild_CounterBase_initializer>(m);
}

void finish_init_CounterBase() {
  cls->finish();
  cls.reset();
}