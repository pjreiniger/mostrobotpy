
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/motorcontrol/MotorController.h>


#include <units_voltage_type_caster.h>







#define RPYGEN_ENABLE_frc__MotorController_PROTECTED_CONSTRUCTORS
#include <rpygen/frc__MotorController.hpp>









#include <type_traits>


  using namespace frc;



struct rpybuild_MotorController_initializer {


  

  












  
  using MotorController_Trampoline = rpygen::PyTrampoline_frc__MotorController<typename frc::MotorController, typename rpygen::PyTrampolineCfg_frc__MotorController<>>;
    static_assert(std::is_abstract<MotorController_Trampoline>::value == false, "frc::MotorController " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename frc::MotorController, MotorController_Trampoline> cls_MotorController;

    

    
    

  py::module &m;

  
  rpybuild_MotorController_initializer(py::module &m) :

  

  

  

  
    cls_MotorController(m, "MotorController"),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_MotorController.doc() =
    "Interface for motor controlling devices.";

  cls_MotorController
  
    .def(py::init<>(), release_gil())
  
    
  .
def
("set", &frc::MotorController::Set,
      py::arg("speed"), release_gil(), py::doc(
    "Common interface for setting the speed of a motor controller.\n"
"\n"
":param speed: The speed to set.  Value should be between -1.0 and 1.0.")
  )
  
  
  
    
  .
def
("setVoltage", &frc::MotorController::SetVoltage,
      py::arg("output"), release_gil(), py::doc(
    "Sets the voltage output of the MotorController.  Compensates for\n"
"the current bus voltage to ensure that the desired voltage is output even\n"
"if the battery voltage is below 12V - highly useful when the voltage\n"
"outputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n"
"\n"
"NOTE: This function *must* be called regularly in order for voltage\n"
"compensation to work properly - unlike the ordinary set function, it is not\n"
"\"set it and forget it.\"\n"
"\n"
":param output: The voltage to output.")
  )
  
  
  
    
  .
def
("get", &frc::MotorController::Get, release_gil(), py::doc(
    "Common interface for getting the current set speed of a motor controller.\n"
"\n"
":returns: The current set speed.  Value is between -1.0 and 1.0.")
  )
  
  
  
    
  .
def
("setInverted", &frc::MotorController::SetInverted,
      py::arg("isInverted"), release_gil(), py::doc(
    "Common interface for inverting direction of a motor controller.\n"
"\n"
":param isInverted: The state of inversion, true is inverted.")
  )
  
  
  
    
  .
def
("getInverted", &frc::MotorController::GetInverted, release_gil(), py::doc(
    "Common interface for returning the inversion state of a motor controller.\n"
"\n"
":returns: isInverted The state of inversion, true is inverted.")
  )
  
  
  
    
  .
def
("disable", &frc::MotorController::Disable, release_gil(), py::doc(
    "Common interface for disabling a motor.")
  )
  
  
  
    
  .
def
("stopMotor", &frc::MotorController::StopMotor, release_gil(), py::doc(
    "Common interface to stop the motor until Set is called again.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_MotorController_initializer

static std::unique_ptr<rpybuild_MotorController_initializer> cls;

void begin_init_MotorController(py::module &m) {
  cls = std::make_unique<rpybuild_MotorController_initializer>(m);
}

void finish_init_MotorController() {
  cls->finish();
  cls.reset();
}