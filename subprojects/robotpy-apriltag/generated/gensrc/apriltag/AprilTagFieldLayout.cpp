
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <frc/apriltag/AprilTagFieldLayout.h>


#include <pybind11/stl.h>

#include <units_length_type_caster.h>



#include <pybind11/operators.h>













#include <type_traits>


  using namespace frc;



struct rpybuild_AprilTagFieldLayout_initializer {


  

  












  py::class_<typename frc::AprilTagFieldLayout> cls_AprilTagFieldLayout;

    
    
  py::enum_<frc::AprilTagFieldLayout::OriginPosition> cls_AprilTagFieldLayout_enum1;
    

    
    

  py::module &m;

  
  rpybuild_AprilTagFieldLayout_initializer(py::module &m) :

  

  

  

  
    cls_AprilTagFieldLayout(m, "AprilTagFieldLayout"),

  
    cls_AprilTagFieldLayout_enum1
  (cls_AprilTagFieldLayout, "OriginPosition"
  ,
    "Common origin positions for the AprilTag coordinate system."),
  

  
  
  

    m(m)
  {
    
    

    
    
  
    cls_AprilTagFieldLayout_enum1
  
    .value("kBlueAllianceWallRightSide", frc::AprilTagFieldLayout::OriginPosition::kBlueAllianceWallRightSide,
      "Blue alliance wall, right side.")
  
    .value("kRedAllianceWallRightSide", frc::AprilTagFieldLayout::OriginPosition::kRedAllianceWallRightSide,
      "Red alliance wall, right side.")
  ;

  

    
    
  }

void finish() {





  {
  
  
  using OriginPosition [[maybe_unused]] = typename frc::AprilTagFieldLayout::OriginPosition;
  
  


  

  cls_AprilTagFieldLayout.doc() =
    "Class for representing a layout of AprilTags on a field and reading them from\n"
"a JSON format.\n"
"\n"
"The JSON format contains two top-level objects, \"tags\" and \"field\".\n"
"The \"tags\" object is a list of all AprilTags contained within a layout. Each\n"
"AprilTag serializes to a JSON object containing an ID and a Pose3d. The\n"
"\"field\" object is a descriptor of the size of the field in meters with\n"
"\"width\" and \"length\" values.  This is to account for arbitrary field sizes\n"
"when transforming the poses.\n"
"\n"
"Pose3ds in the JSON are measured using the normal FRC coordinate system, NWU\n"
"with the origin at the bottom-right corner of the blue alliance wall.\n"
"SetOrigin(OriginPosition) can be used to change the poses returned from\n"
"GetTagPose(int) to be from the perspective of a specific alliance.\n"
"\n"
"Tag poses represent the center of the tag, with a zero rotation representing\n"
"a tag that is upright and facing away from the (blue) alliance wall (that is,\n"
"towards the opposing alliance).";

  cls_AprilTagFieldLayout
  
    
  .
def_static
("loadField", &frc::AprilTagFieldLayout::LoadField,
      py::arg("field"), release_gil(), py::doc(
    "Loads an AprilTagFieldLayout from a predefined field\n"
"\n"
":param field: The predefined field\n"
"\n"
":returns: AprilTagFieldLayout of the field")
  )
  
  
  
    
  .def(py::init<>(), release_gil()
  )
  
  
  
    
  .def(py::init<std::string_view>(),
      py::arg("path"), release_gil(), py::doc(
    "Construct a new AprilTagFieldLayout with values imported from a JSON file.\n"
"\n"
":param path: Path of the JSON file to import from.")
  )
  
  
  
    
  .def(py::init<std::vector<AprilTag>, units::meter_t, units::meter_t>(),
      py::arg("apriltags"), py::arg("fieldLength"), py::arg("fieldWidth"), release_gil(), py::doc(
    "Construct a new AprilTagFieldLayout from a vector of AprilTag objects.\n"
"\n"
":param apriltags:   Vector of AprilTags.\n"
":param fieldLength: Length of field the layout is representing.\n"
":param fieldWidth:  Width of field the layout is representing.")
  )
  
  
  
    
  .
def
("getFieldLength", &frc::AprilTagFieldLayout::GetFieldLength, release_gil(), py::doc(
    "Returns the length of the field the layout is representing.\n"
"\n"
":returns: length")
  )
  
  
  
    
  .
def
("getFieldWidth", &frc::AprilTagFieldLayout::GetFieldWidth, release_gil(), py::doc(
    "Returns the length of the field the layout is representing.\n"
"\n"
":returns: width")
  )
  
  
  
    
  .
def
("getTags", &frc::AprilTagFieldLayout::GetTags, release_gil(), py::doc(
    "Returns a vector of all the april tags used in this layout.\n"
"\n"
":returns: list of tags")
  )
  
  
  
    
  .
def
("setOrigin", static_cast<void(frc::AprilTagFieldLayout::*)(OriginPosition)>(
        &frc::AprilTagFieldLayout::SetOrigin),
      py::arg("origin"), release_gil(), py::doc(
    "Sets the origin based on a predefined enumeration of coordinate frame\n"
"origins. The origins are calculated from the field dimensions.\n"
"\n"
"This transforms the Pose3ds returned by GetTagPose(int) to return the\n"
"correct pose relative to a predefined coordinate frame.\n"
"\n"
":param origin: The predefined origin")
  )
  
  
  
    
  .
def
("setOrigin", static_cast<void(frc::AprilTagFieldLayout::*)(const Pose3d&)>(
        &frc::AprilTagFieldLayout::SetOrigin),
      py::arg("origin"), release_gil(), py::doc(
    "Sets the origin for tag pose transformation.\n"
"\n"
"This transforms the Pose3ds returned by GetTagPose(int) to return the\n"
"correct pose relative to the provided origin.\n"
"\n"
":param origin: The new origin for tag transformations")
  )
  
  
  
    
  .
def
("getOrigin", &frc::AprilTagFieldLayout::GetOrigin, release_gil(), py::doc(
    "Returns the origin used for tag pose transformation.\n"
"\n"
":returns: the origin")
  )
  
  
  
    
  .
def
("getTagPose", &frc::AprilTagFieldLayout::GetTagPose,
      py::arg("ID"), release_gil(), py::doc(
    "Gets an AprilTag pose by its ID.\n"
"\n"
":param ID: The ID of the tag.\n"
"\n"
":returns: The pose corresponding to the ID that was passed in or an empty\n"
"          optional if a tag with that ID is not found.")
  )
  
  
  
    
  .
def
("serialize", &frc::AprilTagFieldLayout::Serialize,
      py::arg("path"), release_gil(), py::doc(
    "Serializes an AprilTagFieldLayout to a JSON file.\n"
"\n"
":param path: The path to write the JSON file to.")
  )
  
  
  
    
  .def(py::self == py::self
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_AprilTagFieldLayout_initializer

static std::unique_ptr<rpybuild_AprilTagFieldLayout_initializer> cls;

void begin_init_AprilTagFieldLayout(py::module &m) {
  cls = std::make_unique<rpybuild_AprilTagFieldLayout_initializer>(m);
}

void finish_init_AprilTagFieldLayout() {
  cls->finish();
  cls.reset();
}