
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <wpi/DataLogWriter.h>
















#include <type_traits>


  using namespace wpi;

  using namespace wpi::log;



struct rpybuild_DataLogWriter_initializer {


  

  












  py::class_<typename wpi::log::DataLogWriter, wpi::log::DataLog> cls_DataLogWriter;

    

    
    

  py::module &m;

  
  rpybuild_DataLogWriter_initializer(py::module &m) :

  

  

  

  
    cls_DataLogWriter(m, "DataLogWriter", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DataLogWriter.doc() =
    "A data log writer that flushes the data log to a file when Flush() is called.\n"
"\n"
"The lifetime of this object must be longer than any data log entry objects\n"
"that refer to it.";

  cls_DataLogWriter
  
    
  .def(py::init([](std::string_view filename, std::string_view extraHeader) {
  std::error_code ec;
  auto writer = std::make_unique<DataLogWriter>(filename, ec, extraHeader);
  if (ec) {
    throw std::system_error(ec);
  }
  return writer;
}
),
      py::arg("filename"), py::arg("extraHeader") = "", py::doc(
    "Constructs with a filename.\n"
"\n"
":param filename:    filename to use\n"
":param ec:          error code if failed to open file (output)\n"
":param extraHeader: extra header data")
  )
  
  
  
    
  .
def
("flush", &wpi::log::DataLogWriter::Flush, release_gil(), py::doc(
    "Flushes the log data to disk.")
  )
  
  
  
    
  .
def
("stop", &wpi::log::DataLogWriter::Stop, release_gil(), py::doc(
    "Stops appending all records to the log, and closes the log file.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DataLogWriter_initializer

static std::unique_ptr<rpybuild_DataLogWriter_initializer> cls;

void begin_init_DataLogWriter(py::module &m) {
  cls = std::make_unique<rpybuild_DataLogWriter_initializer>(m);
}

void finish_init_DataLogWriter() {
  cls->finish();
  cls.reset();
}