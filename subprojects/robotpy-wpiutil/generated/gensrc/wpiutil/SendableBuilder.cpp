
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <wpi/sendable/SendableBuilder.h>


#include <pybind11/functional.h>

#include <pybind11/stl.h>

#include <wpi_smallvectorimpl_type_caster.h>

#include <wpi_span_type_caster.h>







#define RPYGEN_ENABLE_wpi__SendableBuilder_PROTECTED_CONSTRUCTORS
#include <rpygen/wpi__SendableBuilder.hpp>









#include <type_traits>


  using namespace wpi;



struct rpybuild_SendableBuilder_initializer {


  

  












  
  using SendableBuilder_Trampoline = rpygen::PyTrampoline_wpi__SendableBuilder<typename wpi::SendableBuilder, typename rpygen::PyTrampolineCfg_wpi__SendableBuilder<>>;
    static_assert(std::is_abstract<SendableBuilder_Trampoline>::value == false, "wpi::SendableBuilder " RPYBUILD_BAD_TRAMPOLINE);
  py::class_<typename wpi::SendableBuilder, SendableBuilder_Trampoline> cls_SendableBuilder;

    
    
  py::enum_<wpi::SendableBuilder::BackendKind> cls_SendableBuilder_enum1;
    

    
    

  py::module &m;

  
  rpybuild_SendableBuilder_initializer(py::module &m) :

  

  

  

  
    cls_SendableBuilder(m, "SendableBuilder"),

  
    cls_SendableBuilder_enum1
  (cls_SendableBuilder, "BackendKind"
  ,
    "The backend kinds used for the sendable builder."),
  

  
  
  

    m(m)
  {
    
    

    
    
  
    cls_SendableBuilder_enum1
  
    .value("kUnknown", wpi::SendableBuilder::BackendKind::kUnknown,
      "Unknown.")
  
    .value("kNetworkTables", wpi::SendableBuilder::BackendKind::kNetworkTables,
      "NetworkTables.")
  ;

  

    
    
  }

void finish() {





  {
  
  
  using BackendKind [[maybe_unused]] = typename wpi::SendableBuilder::BackendKind;
  
  


  

  cls_SendableBuilder.doc() =
    "Helper class for building Sendable dashboard representations.";

  cls_SendableBuilder
  
    .def(py::init<>(), release_gil())
  
    
  .
def
("setSmartDashboardType", &wpi::SendableBuilder::SetSmartDashboardType,
      py::arg("type"), release_gil(), py::doc(
    "Set the string representation of the named data type that will be used\n"
"by the smart dashboard for this sendable.\n"
"\n"
":param type: data type")
  )
  
  
  
    
  .
def
("setActuator", &wpi::SendableBuilder::SetActuator,
      py::arg("value"), release_gil(), py::doc(
    "Set a flag indicating if this sendable should be treated as an actuator.\n"
"By default this flag is false.\n"
"\n"
":param value: true if actuator, false if not")
  )
  
  
  
    
  .
def
("setSafeState", &wpi::SendableBuilder::SetSafeState,
      py::arg("func").none(false), release_gil(), py::doc(
    "Set the function that should be called to set the Sendable into a safe\n"
"state.  This is called when entering and exiting Live Window mode.\n"
"\n"
":param func: function")
  )
  
  
  
    
  .
def
("addBooleanProperty", &wpi::SendableBuilder::AddBooleanProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a boolean property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstBoolean", &wpi::SendableBuilder::PublishConstBoolean,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant boolean property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addIntegerProperty", &wpi::SendableBuilder::AddIntegerProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add an integer property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstInteger", &wpi::SendableBuilder::PublishConstInteger,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant integer property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addFloatProperty", &wpi::SendableBuilder::AddFloatProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a float property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstFloat", &wpi::SendableBuilder::PublishConstFloat,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant float property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addDoubleProperty", &wpi::SendableBuilder::AddDoubleProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a double property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstDouble", &wpi::SendableBuilder::PublishConstDouble,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant double property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addStringProperty", &wpi::SendableBuilder::AddStringProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a string property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstString", &wpi::SendableBuilder::PublishConstString,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant string property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addBooleanArrayProperty", &wpi::SendableBuilder::AddBooleanArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a boolean array property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstBooleanArray", &wpi::SendableBuilder::PublishConstBooleanArray,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant boolean array property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addIntegerArrayProperty", &wpi::SendableBuilder::AddIntegerArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add an integer array property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstIntegerArray", &wpi::SendableBuilder::PublishConstIntegerArray,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant integer array property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addFloatArrayProperty", &wpi::SendableBuilder::AddFloatArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a float array property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstFloatArray", &wpi::SendableBuilder::PublishConstFloatArray,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant float array property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addDoubleArrayProperty", &wpi::SendableBuilder::AddDoubleArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a double array property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstDoubleArray", &wpi::SendableBuilder::PublishConstDoubleArray,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant double array property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addStringArrayProperty", &wpi::SendableBuilder::AddStringArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a string array property.\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstStringArray", &wpi::SendableBuilder::PublishConstStringArray,
      py::arg("key"), py::arg("value"), release_gil(), py::doc(
    "Add a constant string array property.\n"
"\n"
":param key:   property name\n"
":param value: the value")
  )
  
  
  
    
  .
def
("addRawProperty", &wpi::SendableBuilder::AddRawProperty,
      py::arg("key"), py::arg("typeString"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a raw property.\n"
"\n"
":param key:        property name\n"
":param typeString: type string\n"
":param getter:     getter function (returns current value)\n"
":param setter:     setter function (sets new value)")
  )
  
  
  
    
  .
def
("publishConstRaw", &wpi::SendableBuilder::PublishConstRaw,
      py::arg("key"), py::arg("typeString"), py::arg("value"), release_gil(), py::doc(
    "Add a constant raw property.\n"
"\n"
":param key:        property name\n"
":param typeString: type string\n"
":param value:      the value")
  )
  
  
  
    
  .
def
("addSmallStringProperty", &wpi::SendableBuilder::AddSmallStringProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a string property (SmallString form).\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("addSmallBooleanArrayProperty", &wpi::SendableBuilder::AddSmallBooleanArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a boolean array property (SmallVector form).\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("addSmallIntegerArrayProperty", &wpi::SendableBuilder::AddSmallIntegerArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add an integer array property (SmallVector form).\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("addSmallFloatArrayProperty", &wpi::SendableBuilder::AddSmallFloatArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a float array property (SmallVector form).\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("addSmallDoubleArrayProperty", &wpi::SendableBuilder::AddSmallDoubleArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a double array property (SmallVector form).\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("addSmallStringArrayProperty", &wpi::SendableBuilder::AddSmallStringArrayProperty,
      py::arg("key"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a string array property (SmallVector form).\n"
"\n"
":param key:    property name\n"
":param getter: getter function (returns current value)\n"
":param setter: setter function (sets new value)")
  )
  
  
  
    
  .
def
("addSmallRawProperty", &wpi::SendableBuilder::AddSmallRawProperty,
      py::arg("key"), py::arg("typeString"), py::arg("getter").none(false), py::arg("setter").none(false), release_gil(), py::doc(
    "Add a raw property (SmallVector form).\n"
"\n"
":param key:        property name\n"
":param typeString: type string\n"
":param getter:     getter function (returns current value)\n"
":param setter:     setter function (sets new value)")
  )
  
  
  
    
  .
def
("getBackendKind", &wpi::SendableBuilder::GetBackendKind, release_gil(), py::doc(
    "Gets the kind of backend being used.\n"
"\n"
":returns: Backend kind")
  )
  
  
  
    
  .
def
("isPublished", &wpi::SendableBuilder::IsPublished, release_gil(), py::doc(
    "Return whether this sendable has been published.\n"
"\n"
":returns: True if it has been published, false if not.")
  )
  
  
  
    
  .
def
("update", &wpi::SendableBuilder::Update, release_gil(), py::doc(
    "Update the published values by calling the getters for all properties.")
  )
  
  
  
    
  .
def
("clearProperties", &wpi::SendableBuilder::ClearProperties, release_gil(), py::doc(
    "Clear properties.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_SendableBuilder_initializer

static std::unique_ptr<rpybuild_SendableBuilder_initializer> cls;

void begin_init_SendableBuilder(py::module &m) {
  cls = std::make_unique<rpybuild_SendableBuilder_initializer>(m);
}

void finish_init_SendableBuilder() {
  cls->finish();
  cls.reset();
}