
// This file is autogenerated. DO NOT EDIT
#include <robotpy_build.h>




#include <wpi/DataLogBackgroundWriter.h>


#include <pybind11/functional.h>

#include <wpi_span_type_caster.h>















#include <type_traits>


  using namespace wpi;

  using namespace wpi::log;



struct rpybuild_DataLogBackgroundWriter_initializer {


  

  












  py::class_<typename wpi::log::DataLogBackgroundWriter, wpi::log::DataLog> cls_DataLogBackgroundWriter;

    

    
    

  py::module &m;

  
  rpybuild_DataLogBackgroundWriter_initializer(py::module &m) :

  

  

  

  
    cls_DataLogBackgroundWriter(m, "DataLogBackgroundWriter", py::is_final()),

  

  
  
  

    m(m)
  {
    
    

    
    
  

    
    
  }

void finish() {





  {
  
  
  


  

  cls_DataLogBackgroundWriter.doc() =
    "A data log background writer that periodically flushes the data log on a\n"
"background thread.  The data log file is created immediately upon\n"
"construction with a temporary filename.  The file may be renamed at any time\n"
"using the SetFilename() function.\n"
"\n"
"The lifetime of this object must be longer than any data log entry objects\n"
"that refer to it.\n"
"\n"
"The data log is periodically flushed to disk.  It can also be explicitly\n"
"flushed to disk by using the Flush() function.  This operation is, however,\n"
"non-blocking.";

  cls_DataLogBackgroundWriter
  
    
  .def(py::init<std::string_view, std::string_view, double, std::string_view>(),
      py::arg("dir") = "", py::arg("filename") = "", py::arg("period") = 0.25, py::arg("extraHeader") = "", release_gil(), py::doc(
    "Construct a new Data Log.  The log will be initially created with a\n"
"temporary filename.\n"
"\n"
":param dir:         directory to store the log\n"
":param filename:    filename to use; if none provided, a random filename is\n"
"                    generated of the form \"wpilog\\_{}.wpilog\"\n"
":param period:      time between automatic flushes to disk, in seconds;\n"
"                    this is a time/storage tradeoff\n"
":param extraHeader: extra header data")
  )
  
  
  
    
  .def(py::init<std::function<void (std::span<const uint8_t> data)>, double, std::string_view>(),
      py::arg("write").none(false), py::arg("period") = 0.25, py::arg("extraHeader") = "", release_gil(), py::doc(
    "Construct a new Data Log that passes its output to the provided function\n"
"rather than a file.  The write function will be called on a separate\n"
"background thread and may block.  The write function is called with an\n"
"empty data array when the thread is terminating.\n"
"\n"
":param write:       write function\n"
":param period:      time between automatic calls to write, in seconds;\n"
"                    this is a time/storage tradeoff\n"
":param extraHeader: extra header data")
  )
  
  
  
    
  .
def
("setFilename", &wpi::log::DataLogBackgroundWriter::SetFilename,
      py::arg("filename"), release_gil(), py::doc(
    "Change log filename.\n"
"\n"
":param filename: filename")
  )
  
  
  
    
  .
def
("flush", &wpi::log::DataLogBackgroundWriter::Flush, release_gil(), py::doc(
    "Explicitly flushes the log data to disk.")
  )
  
  
  
    
  .
def
("pause", &wpi::log::DataLogBackgroundWriter::Pause, release_gil(), py::doc(
    "Pauses appending of data records to the log.  While paused, no data records\n"
"are saved (e.g. AppendX is a no-op).  Has no effect on entry starts /\n"
"finishes / metadata changes.")
  )
  
  
  
    
  .
def
("resume", &wpi::log::DataLogBackgroundWriter::Resume, release_gil(), py::doc(
    "Resumes appending of data records to the log.  If called after Stop(),\n"
"opens a new file (with random name if SetFilename was not called after\n"
"Stop()) and appends Start records and schema data values for all previously\n"
"started entries and schemas.")
  )
  
  
  
    
  .
def
("stop", &wpi::log::DataLogBackgroundWriter::Stop, release_gil(), py::doc(
    "Stops appending all records to the log, and closes the log file.")
  )
  
  
  ;

  


  }






}

}; // struct rpybuild_DataLogBackgroundWriter_initializer

static std::unique_ptr<rpybuild_DataLogBackgroundWriter_initializer> cls;

void begin_init_DataLogBackgroundWriter(py::module &m) {
  cls = std::make_unique<rpybuild_DataLogBackgroundWriter_initializer>(m);
}

void finish_init_DataLogBackgroundWriter() {
  cls->finish();
  cls.reset();
}