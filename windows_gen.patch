diff --git a/subprojects/pyntcore/ntcore/_init_ntcore.py b/subprojects/pyntcore/ntcore/_init_ntcore.py
new file mode 100644
index 00000000..6937c941
--- /dev/null
+++ b/subprojects/pyntcore/ntcore/_init_ntcore.py
@@ -0,0 +1,18 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpinet._init_wpinet
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "ntcore.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "ntcore.dll")):
+        raise FileNotFoundError("ntcore.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("ntcore.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/pyntcore/ntcore/pkgcfg.py b/subprojects/pyntcore/ntcore/pkgcfg.py
new file mode 100644
index 00000000..76c267a5
--- /dev/null
+++ b/subprojects/pyntcore/ntcore/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "ntcore._init_ntcore"
+depends = ['wpiutil', 'wpinet']
+pypi_package = 'pyntcore'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return [join(_root, "lib")]
+
+def get_library_dirs_rel():
+    return ['lib']
+
+def get_library_names():
+    return ['ntcore']
+
+def get_library_full_names():
+    return ['ntcore.dll']
\ No newline at end of file
diff --git a/subprojects/robotpy-apriltag/robotpy_apriltag/_init_apriltag.py b/subprojects/robotpy-apriltag/robotpy_apriltag/_init_apriltag.py
new file mode 100644
index 00000000..9cb312f1
--- /dev/null
+++ b/subprojects/robotpy-apriltag/robotpy_apriltag/_init_apriltag.py
@@ -0,0 +1,18 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "apriltag.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "apriltag.dll")):
+        raise FileNotFoundError("apriltag.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("apriltag.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-apriltag/robotpy_apriltag/pkgcfg.py b/subprojects/robotpy-apriltag/robotpy_apriltag/pkgcfg.py
new file mode 100644
index 00000000..63f12e13
--- /dev/null
+++ b/subprojects/robotpy-apriltag/robotpy_apriltag/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "robotpy_apriltag._init_apriltag"
+depends = ['wpiutil', 'wpimath_cpp']
+pypi_package = 'robotpy-apriltag'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return [join(_root, "lib")]
+
+def get_library_dirs_rel():
+    return ['lib']
+
+def get_library_names():
+    return ['apriltag']
+
+def get_library_full_names():
+    return ['apriltag.dll']
\ No newline at end of file
diff --git a/subprojects/robotpy-cscore/cscore/_init_cscore.py b/subprojects/robotpy-cscore/cscore/_init_cscore.py
new file mode 100644
index 00000000..c9f9f31a
--- /dev/null
+++ b/subprojects/robotpy-cscore/cscore/_init_cscore.py
@@ -0,0 +1,10 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpinet._init_wpinet
+import ntcore._init_ntcore
diff --git a/subprojects/robotpy-cscore/cscore/pkgcfg.py b/subprojects/robotpy-cscore/cscore/pkgcfg.py
new file mode 100644
index 00000000..84e9c150
--- /dev/null
+++ b/subprojects/robotpy-cscore/cscore/pkgcfg.py
@@ -0,0 +1,34 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "cscore._init_cscore"
+depends = ['wpiutil', 'wpinet', 'ntcore']
+pypi_package = 'robotpy-cscore'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
+
+def get_type_casters_cfg(casters):
+    casters.update({'cv::Mat': {'hdr': 'cvnp/cvnp.h'}})
+
+def get_type_casters(casters):
+    t = {}
+    get_type_casters_cfg(t)
+    for k, v in t.items():
+        if "hdr" in v:
+            casters[k] = v["hdr"]
\ No newline at end of file
diff --git a/subprojects/robotpy-hal/hal/_init_wpiHal.py b/subprojects/robotpy-hal/hal/_init_wpiHal.py
new file mode 100644
index 00000000..ee8b6ff3
--- /dev/null
+++ b/subprojects/robotpy-hal/hal/_init_wpiHal.py
@@ -0,0 +1,17 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "wpiHal.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "wpiHal.dll")):
+        raise FileNotFoundError("wpiHal.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("wpiHal.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-hal/hal/pkgcfg.py b/subprojects/robotpy-hal/hal/pkgcfg.py
new file mode 100644
index 00000000..7e0364be
--- /dev/null
+++ b/subprojects/robotpy-hal/hal/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "hal._init_wpiHal"
+depends = ['wpiutil']
+pypi_package = 'robotpy-hal'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return [join(_root, "lib")]
+
+def get_library_dirs_rel():
+    return ['lib']
+
+def get_library_names():
+    return ['wpiHal']
+
+def get_library_full_names():
+    return ['wpiHal.dll']
\ No newline at end of file
diff --git a/subprojects/robotpy-hal/hal/simulation/_init_simulation.py b/subprojects/robotpy-hal/hal/simulation/_init_simulation.py
new file mode 100644
index 00000000..93148b43
--- /dev/null
+++ b/subprojects/robotpy-hal/hal/simulation/_init_simulation.py
@@ -0,0 +1,9 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import hal._init_wpiHal
diff --git a/subprojects/robotpy-hal/hal/simulation/pkgcfg.py b/subprojects/robotpy-hal/hal/simulation/pkgcfg.py
new file mode 100644
index 00000000..a9abbc95
--- /dev/null
+++ b/subprojects/robotpy-hal/hal/simulation/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "hal.simulation._init_simulation"
+depends = ['wpiutil', 'wpiHal']
+pypi_package = 'robotpy-hal'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-hal/hal/version.py b/subprojects/robotpy-hal/hal/version.py
new file mode 100644
index 00000000..36925130
--- /dev/null
+++ b/subprojects/robotpy-hal/hal/version.py
@@ -0,0 +1,4 @@
+# file generated by setuptools_scm
+# don't change, don't track in version control
+__version__ = version = '0.1.dev3054+g8896bf8'
+__version_tuple__ = version_tuple = (0, 1, 'dev3054', 'g8896bf8')
diff --git a/subprojects/robotpy-halsim-ds-socket/halsim_ds_socket/_init_halsim_ds_socket.py b/subprojects/robotpy-halsim-ds-socket/halsim_ds_socket/_init_halsim_ds_socket.py
new file mode 100644
index 00000000..46f47d77
--- /dev/null
+++ b/subprojects/robotpy-halsim-ds-socket/halsim_ds_socket/_init_halsim_ds_socket.py
@@ -0,0 +1,18 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import hal._init_wpiHal
+import wpinet._init_wpinet
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "halsim_ds_socket.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "halsim_ds_socket.dll")):
+        raise FileNotFoundError("halsim_ds_socket.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("halsim_ds_socket.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-halsim-ds-socket/halsim_ds_socket/pkgcfg.py b/subprojects/robotpy-halsim-ds-socket/halsim_ds_socket/pkgcfg.py
new file mode 100644
index 00000000..6d8933b3
--- /dev/null
+++ b/subprojects/robotpy-halsim-ds-socket/halsim_ds_socket/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "halsim_ds_socket._init_halsim_ds_socket"
+depends = ['wpiHal', 'wpinet']
+pypi_package = 'robotpy-halsim-ds-socket'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return ['halsim_ds_socket.dll']
\ No newline at end of file
diff --git a/subprojects/robotpy-halsim-gui/halsim_gui/_ext/_init_halsim_gui_ext.py b/subprojects/robotpy-halsim-gui/halsim_gui/_ext/_init_halsim_gui_ext.py
new file mode 100644
index 00000000..19eec511
--- /dev/null
+++ b/subprojects/robotpy-halsim-gui/halsim_gui/_ext/_init_halsim_gui_ext.py
@@ -0,0 +1,12 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import hal._init_wpiHal
+import ntcore._init_ntcore
+import wpimath._impl._init_wpimath_cpp
+import halsim_gui._init_halsim_gui
diff --git a/subprojects/robotpy-halsim-gui/halsim_gui/_ext/pkgcfg.py b/subprojects/robotpy-halsim-gui/halsim_gui/_ext/pkgcfg.py
new file mode 100644
index 00000000..258355d9
--- /dev/null
+++ b/subprojects/robotpy-halsim-gui/halsim_gui/_ext/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "halsim_gui._ext._init_halsim_gui_ext"
+depends = ['wpiutil', 'wpiHal', 'ntcore', 'wpimath_cpp', 'halsim_gui']
+pypi_package = 'robotpy-halsim-gui'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-halsim-gui/halsim_gui/_init_halsim_gui.py b/subprojects/robotpy-halsim-gui/halsim_gui/_init_halsim_gui.py
new file mode 100644
index 00000000..adf37ef4
--- /dev/null
+++ b/subprojects/robotpy-halsim-gui/halsim_gui/_init_halsim_gui.py
@@ -0,0 +1,20 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import hal._init_wpiHal
+import ntcore._init_ntcore
+import wpimath._impl._init_wpimath_cpp
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "halsim_gui.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "halsim_gui.dll")):
+        raise FileNotFoundError("halsim_gui.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("halsim_gui.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-halsim-gui/halsim_gui/pkgcfg.py b/subprojects/robotpy-halsim-gui/halsim_gui/pkgcfg.py
new file mode 100644
index 00000000..8dc105c7
--- /dev/null
+++ b/subprojects/robotpy-halsim-gui/halsim_gui/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "halsim_gui._init_halsim_gui"
+depends = ['wpiutil', 'wpiHal', 'ntcore', 'wpimath_cpp']
+pypi_package = 'robotpy-halsim-gui'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return ['halsim_gui.dll']
\ No newline at end of file
diff --git a/subprojects/robotpy-halsim-ws/halsim_ws/client/_init_client.py b/subprojects/robotpy-halsim-ws/halsim_ws/client/_init_client.py
new file mode 100644
index 00000000..d909997c
--- /dev/null
+++ b/subprojects/robotpy-halsim-ws/halsim_ws/client/_init_client.py
@@ -0,0 +1,19 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import hal._init_wpiHal
+import wpinet._init_wpinet
+import wpiutil._init_wpiutil
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "halsim_ws_client.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "halsim_ws_client.dll")):
+        raise FileNotFoundError("halsim_ws_client.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("halsim_ws_client.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-halsim-ws/halsim_ws/client/pkgcfg.py b/subprojects/robotpy-halsim-ws/halsim_ws/client/pkgcfg.py
new file mode 100644
index 00000000..66fba41f
--- /dev/null
+++ b/subprojects/robotpy-halsim-ws/halsim_ws/client/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "halsim_ws.client._init_client"
+depends = ['wpiHal', 'wpinet', 'wpiutil']
+pypi_package = 'robotpy-halsim-ws'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return ['halsim_ws_client.dll']
\ No newline at end of file
diff --git a/subprojects/robotpy-halsim-ws/halsim_ws/server/_init_server.py b/subprojects/robotpy-halsim-ws/halsim_ws/server/_init_server.py
new file mode 100644
index 00000000..36ad60bd
--- /dev/null
+++ b/subprojects/robotpy-halsim-ws/halsim_ws/server/_init_server.py
@@ -0,0 +1,18 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import hal._init_wpiHal
+import wpinet._init_wpinet
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "halsim_ws_server.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "halsim_ws_server.dll")):
+        raise FileNotFoundError("halsim_ws_server.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("halsim_ws_server.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-halsim-ws/halsim_ws/server/pkgcfg.py b/subprojects/robotpy-halsim-ws/halsim_ws/server/pkgcfg.py
new file mode 100644
index 00000000..891e4e61
--- /dev/null
+++ b/subprojects/robotpy-halsim-ws/halsim_ws/server/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "halsim_ws.server._init_server"
+depends = ['wpiHal', 'wpinet']
+pypi_package = 'robotpy-halsim-ws'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return ['halsim_ws_server.dll']
\ No newline at end of file
diff --git a/subprojects/robotpy-wpilib/wpilib/_impl/_init_wpilibc.py b/subprojects/robotpy-wpilib/wpilib/_impl/_init_wpilibc.py
new file mode 100644
index 00000000..e370da14
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/_impl/_init_wpilibc.py
@@ -0,0 +1,20 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import hal._init_wpiHal
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
+import ntcore._init_ntcore
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "wpilibc.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "wpilibc.dll")):
+        raise FileNotFoundError("wpilibc.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("wpilibc.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-wpilib/wpilib/_impl/pkgcfg.py b/subprojects/robotpy-wpilib/wpilib/_impl/pkgcfg.py
new file mode 100644
index 00000000..6d13b3f4
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/_impl/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpilib._impl._init_wpilibc"
+depends = ['wpiHal', 'wpiutil', 'wpimath_cpp', 'ntcore']
+pypi_package = 'wpilib'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return [join(_root, "lib")]
+
+def get_library_dirs_rel():
+    return ['lib']
+
+def get_library_names():
+    return ['wpilibc']
+
+def get_library_full_names():
+    return ['wpilibc.dll']
\ No newline at end of file
diff --git a/subprojects/robotpy-wpilib/wpilib/_init_wpilib.py b/subprojects/robotpy-wpilib/wpilib/_init_wpilib.py
new file mode 100644
index 00000000..ccf1b2bf
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/_init_wpilib.py
@@ -0,0 +1,16 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import hal._init_wpiHal
+import wpiutil._init_wpiutil
+import ntcore._init_ntcore
+import wpimath._impl._init_wpimath_cpp
+import wpimath.geometry._init_geometry
+import wpimath._controls._init_controls
+import wpilib._impl._init_wpilibc
+import wpilib.interfaces._init_interfaces
+import wpilib.event._init_event
diff --git a/subprojects/robotpy-wpilib/wpilib/counter/_init_counter.py b/subprojects/robotpy-wpilib/wpilib/counter/_init_counter.py
new file mode 100644
index 00000000..7cbbf325
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/counter/_init_counter.py
@@ -0,0 +1,13 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpilib._init_wpilib
+import wpilib.interfaces._init_interfaces
+import wpilib._impl._init_wpilibc
+import hal._init_wpiHal
+import wpiutil._init_wpiutil
+import ntcore._init_ntcore
diff --git a/subprojects/robotpy-wpilib/wpilib/counter/pkgcfg.py b/subprojects/robotpy-wpilib/wpilib/counter/pkgcfg.py
new file mode 100644
index 00000000..59199acf
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/counter/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpilib.counter._init_counter"
+depends = ['wpilib_core', 'wpilibc_interfaces', 'wpilibc', 'wpiHal', 'wpiutil', 'ntcore']
+pypi_package = 'wpilib'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpilib/wpilib/drive/_init_drive.py b/subprojects/robotpy-wpilib/wpilib/drive/_init_drive.py
new file mode 100644
index 00000000..7cbbf325
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/drive/_init_drive.py
@@ -0,0 +1,13 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpilib._init_wpilib
+import wpilib.interfaces._init_interfaces
+import wpilib._impl._init_wpilibc
+import hal._init_wpiHal
+import wpiutil._init_wpiutil
+import ntcore._init_ntcore
diff --git a/subprojects/robotpy-wpilib/wpilib/drive/pkgcfg.py b/subprojects/robotpy-wpilib/wpilib/drive/pkgcfg.py
new file mode 100644
index 00000000..2f3b855a
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/drive/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpilib.drive._init_drive"
+depends = ['wpilib_core', 'wpilibc_interfaces', 'wpilibc', 'wpiHal', 'wpiutil', 'ntcore']
+pypi_package = 'wpilib'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpilib/wpilib/event/_init_event.py b/subprojects/robotpy-wpilib/wpilib/event/_init_event.py
new file mode 100644
index 00000000..976c2127
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/event/_init_event.py
@@ -0,0 +1,13 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpilib._impl._init_wpilibc
+import hal._init_wpiHal
+import wpimath.filter._init_filter
+import wpimath._impl._init_wpimath_cpp
+import wpiutil._init_wpiutil
+import ntcore._init_ntcore
diff --git a/subprojects/robotpy-wpilib/wpilib/event/pkgcfg.py b/subprojects/robotpy-wpilib/wpilib/event/pkgcfg.py
new file mode 100644
index 00000000..91e75e39
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/event/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpilib.event._init_event"
+depends = ['wpilibc', 'wpiHal', 'wpimath_filter', 'wpimath_cpp', 'wpiutil', 'ntcore']
+pypi_package = 'wpilib'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpilib/wpilib/interfaces/_init_interfaces.py b/subprojects/robotpy-wpilib/wpilib/interfaces/_init_interfaces.py
new file mode 100644
index 00000000..c4797c10
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/interfaces/_init_interfaces.py
@@ -0,0 +1,14 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpilib._impl._init_wpilibc
+import wpilib.event._init_event
+import hal._init_wpiHal
+import wpiutil._init_wpiutil
+import ntcore._init_ntcore
+import wpimath._impl._init_wpimath_cpp
+import wpimath.geometry._init_geometry
diff --git a/subprojects/robotpy-wpilib/wpilib/interfaces/pkgcfg.py b/subprojects/robotpy-wpilib/wpilib/interfaces/pkgcfg.py
new file mode 100644
index 00000000..8f71ae9c
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/interfaces/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpilib.interfaces._init_interfaces"
+depends = ['wpilibc', 'wpilibc_event', 'wpiHal', 'wpiutil', 'ntcore', 'wpimath_cpp', 'wpimath_geometry']
+pypi_package = 'wpilib'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpilib/wpilib/pkgcfg.py b/subprojects/robotpy-wpilib/wpilib/pkgcfg.py
new file mode 100644
index 00000000..28bfe8c5
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpilib._init_wpilib"
+depends = ['wpiHal', 'wpiutil', 'ntcore', 'wpimath_cpp', 'wpimath_geometry', 'wpimath_controls', 'wpilibc', 'wpilibc_interfaces', 'wpilibc_event']
+pypi_package = 'wpilib'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include"), join(_root, "src")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpilib/wpilib/shuffleboard/_init_shuffleboard.py b/subprojects/robotpy-wpilib/wpilib/shuffleboard/_init_shuffleboard.py
new file mode 100644
index 00000000..7cbbf325
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/shuffleboard/_init_shuffleboard.py
@@ -0,0 +1,13 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpilib._init_wpilib
+import wpilib.interfaces._init_interfaces
+import wpilib._impl._init_wpilibc
+import hal._init_wpiHal
+import wpiutil._init_wpiutil
+import ntcore._init_ntcore
diff --git a/subprojects/robotpy-wpilib/wpilib/shuffleboard/pkgcfg.py b/subprojects/robotpy-wpilib/wpilib/shuffleboard/pkgcfg.py
new file mode 100644
index 00000000..ead2a8ba
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/shuffleboard/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpilib.shuffleboard._init_shuffleboard"
+depends = ['wpilib_core', 'wpilibc_interfaces', 'wpilibc', 'wpiHal', 'wpiutil', 'ntcore']
+pypi_package = 'wpilib'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpilib/wpilib/simulation/_init_simulation.py b/subprojects/robotpy-wpilib/wpilib/simulation/_init_simulation.py
new file mode 100644
index 00000000..f5705c14
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/simulation/_init_simulation.py
@@ -0,0 +1,16 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpilib._init_wpilib
+import wpilib._impl._init_wpilibc
+import hal._init_wpiHal
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
+import wpimath._controls._init_controls
+import wpimath.geometry._init_geometry
+import wpimath.kinematics._init_kinematics
+import ntcore._init_ntcore
diff --git a/subprojects/robotpy-wpilib/wpilib/simulation/pkgcfg.py b/subprojects/robotpy-wpilib/wpilib/simulation/pkgcfg.py
new file mode 100644
index 00000000..0b49278d
--- /dev/null
+++ b/subprojects/robotpy-wpilib/wpilib/simulation/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpilib.simulation._init_simulation"
+depends = ['wpilib_core', 'wpilibc', 'wpiHal', 'wpiutil', 'wpimath_cpp', 'wpimath_controls', 'wpimath_geometry', 'wpimath_kinematics', 'ntcore']
+pypi_package = 'wpilib'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpimath/tests/cpp/wpimath_test/_init_wpimath_test.py b/subprojects/robotpy-wpimath/tests/cpp/wpimath_test/_init_wpimath_test.py
new file mode 100644
index 00000000..30ed96f4
--- /dev/null
+++ b/subprojects/robotpy-wpimath/tests/cpp/wpimath_test/_init_wpimath_test.py
@@ -0,0 +1,8 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpimath._impl._init_wpimath_cpp
diff --git a/subprojects/robotpy-wpimath/tests/cpp/wpimath_test/pkgcfg.py b/subprojects/robotpy-wpimath/tests/cpp/wpimath_test/pkgcfg.py
new file mode 100644
index 00000000..1d661547
--- /dev/null
+++ b/subprojects/robotpy-wpimath/tests/cpp/wpimath_test/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpimath_test._init_wpimath_test"
+depends = ['wpimath_cpp']
+pypi_package = 'wpimath_test'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpimath/wpimath/_controls/_init_controls.py b/subprojects/robotpy-wpimath/wpimath/_controls/_init_controls.py
new file mode 100644
index 00000000..c83d09db
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/_controls/_init_controls.py
@@ -0,0 +1,12 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
+import wpimath.geometry._init_geometry
+import wpimath.kinematics._init_kinematics
+import wpimath.spline._init_spline
diff --git a/subprojects/robotpy-wpimath/wpimath/_controls/pkgcfg.py b/subprojects/robotpy-wpimath/wpimath/_controls/pkgcfg.py
new file mode 100644
index 00000000..f74018d9
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/_controls/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpimath._controls._init_controls"
+depends = ['wpiutil', 'wpimath_cpp', 'wpimath_geometry', 'wpimath_kinematics', 'wpimath_spline']
+pypi_package = 'robotpy-wpimath'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpimath/wpimath/_impl/_init_wpimath_cpp.py b/subprojects/robotpy-wpimath/wpimath/_impl/_init_wpimath_cpp.py
new file mode 100644
index 00000000..6de01d33
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/_impl/_init_wpimath_cpp.py
@@ -0,0 +1,17 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "wpimath.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "wpimath.dll")):
+        raise FileNotFoundError("wpimath.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("wpimath.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-wpimath/wpimath/_impl/pkgcfg.py b/subprojects/robotpy-wpimath/wpimath/_impl/pkgcfg.py
new file mode 100644
index 00000000..10a0c973
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/_impl/pkgcfg.py
@@ -0,0 +1,34 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpimath._impl._init_wpimath_cpp"
+depends = ['wpiutil']
+pypi_package = 'robotpy-wpimath'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include"), join(_root, "src"), join(_root, "src", "eigen"), join(_root, "src", "type_casters")]
+
+def get_library_dirs():
+    return [join(_root, "lib")]
+
+def get_library_dirs_rel():
+    return ['lib']
+
+def get_library_names():
+    return ['wpimath']
+
+def get_library_full_names():
+    return ['wpimath.dll']
+
+def get_type_casters_cfg(casters):
+    casters.update({'units::feet_per_second_squared_t': {'hdr': 'units_acceleration_type_caster.h', 'darg': True}, 'units::meters_per_second_squared_t': {'hdr': 'units_acceleration_type_caster.h', 'darg': True}, 'units::standard_gravity_t': {'hdr': 'units_acceleration_type_caster.h', 'darg': True}, 'units::feet_per_second_squared': {'hdr': 'units_acceleration_type_caster.h'}, 'units::meters_per_second_squared': {'hdr': 'units_acceleration_type_caster.h'}, 'units::standard_gravity': {'hdr': 'units_acceleration_type_caster.h'}, 'units::arcminute_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::arcsecond_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::degree_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::gradian_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::kiloradian_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::microradian_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::milliarcsecond_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::milliradian_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::nanoradian_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::radian_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::turn_t': {'hdr': 'units_angle_type_caster.h', 'darg': True}, 'units::arcminute': {'hdr': 'units_angle_type_caster.h'}, 'units::arcminutes': {'hdr': 'units_angle_type_caster.h'}, 'units::arcsecond': {'hdr': 'units_angle_type_caster.h'}, 'units::arcseconds': {'hdr': 'units_angle_type_caster.h'}, 'units::degree': {'hdr': 'units_angle_type_caster.h'}, 'units::degrees': {'hdr': 'units_angle_type_caster.h'}, 'units::gradian': {'hdr': 'units_angle_type_caster.h'}, 'units::gradians': {'hdr': 'units_angle_type_caster.h'}, 'units::kiloradian': {'hdr': 'units_angle_type_caster.h'}, 'units::kiloradians': {'hdr': 'units_angle_type_caster.h'}, 'units::microradian': {'hdr': 'units_angle_type_caster.h'}, 'units::microradians': {'hdr': 'units_angle_type_caster.h'}, 'units::milliarcsecond': {'hdr': 'units_angle_type_caster.h'}, 'units::milliarcseconds': {'hdr': 'units_angle_type_caster.h'}, 'units::milliradian': {'hdr': 'units_angle_type_caster.h'}, 'units::milliradians': {'hdr': 'units_angle_type_caster.h'}, 'units::nanoradian': {'hdr': 'units_angle_type_caster.h'}, 'units::nanoradians': {'hdr': 'units_angle_type_caster.h'}, 'units::radian': {'hdr': 'units_angle_type_caster.h'}, 'units::radians': {'hdr': 'units_angle_type_caster.h'}, 'units::turn': {'hdr': 'units_angle_type_caster.h'}, 'units::turns': {'hdr': 'units_angle_type_caster.h'}, 'units::radians_per_second_squared_t': {'hdr': 'units_angular_acceleration_type_caster.h', 'darg': True}, 'units::degrees_per_second_squared_t': {'hdr': 'units_angular_acceleration_type_caster.h', 'darg': True}, 'units::turns_per_second_squared_t': {'hdr': 'units_angular_acceleration_type_caster.h', 'darg': True}, 'units::radians_per_second_squared': {'hdr': 'units_angular_acceleration_type_caster.h'}, 'units::degrees_per_second_squared': {'hdr': 'units_angular_acceleration_type_caster.h'}, 'units::turns_per_second_squared': {'hdr': 'units_angular_acceleration_type_caster.h'}, 'units::degrees_per_second_t': {'hdr': 'units_angular_velocity_type_caster.h', 'darg': True}, 'units::milliarcseconds_per_year_t': {'hdr': 'units_angular_velocity_type_caster.h', 'darg': True}, 'units::radians_per_second_t': {'hdr': 'units_angular_velocity_type_caster.h', 'darg': True}, 'units::turns_per_second_t': {'hdr': 'units_angular_velocity_type_caster.h', 'darg': True}, 'units::revolutions_per_minute_t': {'hdr': 'units_angular_velocity_type_caster.h', 'darg': True}, 'units::degrees_per_second': {'hdr': 'units_angular_velocity_type_caster.h'}, 'units::milliarcseconds_per_year': {'hdr': 'units_angular_velocity_type_caster.h'}, 'units::radians_per_second': {'hdr': 'units_angular_velocity_type_caster.h'}, 'units::turns_per_second': {'hdr': 'units_angular_velocity_type_caster.h'}, 'units::revolutions_per_minute': {'hdr': 'units_angular_velocity_type_caster.h'}, 'units::acre_t': {'hdr': 'units_area_type_caster.h', 'darg': True}, 'units::hectare_t': {'hdr': 'units_area_type_caster.h', 'darg': True}, 'units::square_foot_t': {'hdr': 'units_area_type_caster.h', 'darg': True}, 'units::square_inch_t': {'hdr': 'units_area_type_caster.h', 'darg': True}, 'units::square_kilometer_t': {'hdr': 'units_area_type_caster.h', 'darg': True}, 'units::square_meter_t': {'hdr': 'units_area_type_caster.h', 'darg': True}, 'units::square_mile_t': {'hdr': 'units_area_type_caster.h', 'darg': True}, 'units::acre': {'hdr': 'units_area_type_caster.h'}, 'units::acres': {'hdr': 'units_area_type_caster.h'}, 'units::hectare': {'hdr': 'units_area_type_caster.h'}, 'units::hectares': {'hdr': 'units_area_type_caster.h'}, 'units::square_feet': {'hdr': 'units_area_type_caster.h'}, 'units::square_foot': {'hdr': 'units_area_type_caster.h'}, 'units::square_inch': {'hdr': 'units_area_type_caster.h'}, 'units::square_inches': {'hdr': 'units_area_type_caster.h'}, 'units::square_kilometer': {'hdr': 'units_area_type_caster.h'}, 'units::square_kilometers': {'hdr': 'units_area_type_caster.h'}, 'units::square_meter': {'hdr': 'units_area_type_caster.h'}, 'units::square_meters': {'hdr': 'units_area_type_caster.h'}, 'units::square_mile': {'hdr': 'units_area_type_caster.h'}, 'units::square_miles': {'hdr': 'units_area_type_caster.h'}, 'units::farad_t': {'hdr': 'units_capacitance_type_caster.h', 'darg': True}, 'units::kilofarad_t': {'hdr': 'units_capacitance_type_caster.h', 'darg': True}, 'units::microfarad_t': {'hdr': 'units_capacitance_type_caster.h', 'darg': True}, 'units::millifarad_t': {'hdr': 'units_capacitance_type_caster.h', 'darg': True}, 'units::nanofarad_t': {'hdr': 'units_capacitance_type_caster.h', 'darg': True}, 'units::farad': {'hdr': 'units_capacitance_type_caster.h'}, 'units::farads': {'hdr': 'units_capacitance_type_caster.h'}, 'units::kilofarad': {'hdr': 'units_capacitance_type_caster.h'}, 'units::kilofarads': {'hdr': 'units_capacitance_type_caster.h'}, 'units::microfarad': {'hdr': 'units_capacitance_type_caster.h'}, 'units::microfarads': {'hdr': 'units_capacitance_type_caster.h'}, 'units::millifarad': {'hdr': 'units_capacitance_type_caster.h'}, 'units::millifarads': {'hdr': 'units_capacitance_type_caster.h'}, 'units::nanofarad': {'hdr': 'units_capacitance_type_caster.h'}, 'units::nanofarads': {'hdr': 'units_capacitance_type_caster.h'}, 'units::ampere_hour_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::coulomb_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::kiloampere_hour_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::kilocoulomb_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::microampere_hour_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::microcoulomb_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::milliampere_hour_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::millicoulomb_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::nanoampere_hour_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::nanocoulomb_t': {'hdr': 'units_charge_type_caster.h', 'darg': True}, 'units::ampere_hour': {'hdr': 'units_charge_type_caster.h'}, 'units::ampere_hours': {'hdr': 'units_charge_type_caster.h'}, 'units::coulomb': {'hdr': 'units_charge_type_caster.h'}, 'units::coulombs': {'hdr': 'units_charge_type_caster.h'}, 'units::kiloampere_hour': {'hdr': 'units_charge_type_caster.h'}, 'units::kiloampere_hours': {'hdr': 'units_charge_type_caster.h'}, 'units::kilocoulomb': {'hdr': 'units_charge_type_caster.h'}, 'units::kilocoulombs': {'hdr': 'units_charge_type_caster.h'}, 'units::microampere_hour': {'hdr': 'units_charge_type_caster.h'}, 'units::microampere_hours': {'hdr': 'units_charge_type_caster.h'}, 'units::microcoulomb': {'hdr': 'units_charge_type_caster.h'}, 'units::microcoulombs': {'hdr': 'units_charge_type_caster.h'}, 'units::milliampere_hour': {'hdr': 'units_charge_type_caster.h'}, 'units::milliampere_hours': {'hdr': 'units_charge_type_caster.h'}, 'units::millicoulomb': {'hdr': 'units_charge_type_caster.h'}, 'units::millicoulombs': {'hdr': 'units_charge_type_caster.h'}, 'units::nanoampere_hour': {'hdr': 'units_charge_type_caster.h'}, 'units::nanoampere_hours': {'hdr': 'units_charge_type_caster.h'}, 'units::nanocoulomb': {'hdr': 'units_charge_type_caster.h'}, 'units::nanocoulombs': {'hdr': 'units_charge_type_caster.h'}, 'units::percent_t': {'hdr': 'units_concentration_type_caster.h', 'darg': True}, 'units::ppb_t': {'hdr': 'units_concentration_type_caster.h', 'darg': True}, 'units::ppm_t': {'hdr': 'units_concentration_type_caster.h', 'darg': True}, 'units::ppt_t': {'hdr': 'units_concentration_type_caster.h', 'darg': True}, 'units::parts_per_billion': {'hdr': 'units_concentration_type_caster.h'}, 'units::parts_per_million': {'hdr': 'units_concentration_type_caster.h'}, 'units::parts_per_trillion': {'hdr': 'units_concentration_type_caster.h'}, 'units::percent': {'hdr': 'units_concentration_type_caster.h'}, 'units::ppb': {'hdr': 'units_concentration_type_caster.h'}, 'units::ppm': {'hdr': 'units_concentration_type_caster.h'}, 'units::ppt': {'hdr': 'units_concentration_type_caster.h'}, 'units::kilosiemens_t': {'hdr': 'units_conductance_type_caster.h', 'darg': True}, 'units::microsiemens_t': {'hdr': 'units_conductance_type_caster.h', 'darg': True}, 'units::millisiemens_t': {'hdr': 'units_conductance_type_caster.h', 'darg': True}, 'units::nanosiemens_t': {'hdr': 'units_conductance_type_caster.h', 'darg': True}, 'units::siemens_t': {'hdr': 'units_conductance_type_caster.h', 'darg': True}, 'units::kilosiemens': {'hdr': 'units_conductance_type_caster.h'}, 'units::microsiemens': {'hdr': 'units_conductance_type_caster.h'}, 'units::millisiemens': {'hdr': 'units_conductance_type_caster.h'}, 'units::nanosiemens': {'hdr': 'units_conductance_type_caster.h'}, 'units::siemens': {'hdr': 'units_conductance_type_caster.h'}, 'units::ampere_t': {'hdr': 'units_current_type_caster.h', 'darg': True}, 'units::kiloampere_t': {'hdr': 'units_current_type_caster.h', 'darg': True}, 'units::microampere_t': {'hdr': 'units_current_type_caster.h', 'darg': True}, 'units::milliampere_t': {'hdr': 'units_current_type_caster.h', 'darg': True}, 'units::nanoampere_t': {'hdr': 'units_current_type_caster.h', 'darg': True}, 'units::ampere': {'hdr': 'units_current_type_caster.h'}, 'units::amperes': {'hdr': 'units_current_type_caster.h'}, 'units::kiloampere': {'hdr': 'units_current_type_caster.h'}, 'units::kiloamperes': {'hdr': 'units_current_type_caster.h'}, 'units::microampere': {'hdr': 'units_current_type_caster.h'}, 'units::microamperes': {'hdr': 'units_current_type_caster.h'}, 'units::milliampere': {'hdr': 'units_current_type_caster.h'}, 'units::milliamperes': {'hdr': 'units_current_type_caster.h'}, 'units::nanoampere': {'hdr': 'units_current_type_caster.h'}, 'units::nanoamperes': {'hdr': 'units_current_type_caster.h'}, 'units::exabit_t': {'hdr': 'units_data_type_caster.h', 'darg': True}, 'units::exabyte_t': {'hdr': 'units_data_type_caster.h', 'darg': True}, 'units::exabit': {'hdr': 'units_data_type_caster.h'}, 'units::exabits': {'hdr': 'units_data_type_caster.h'}, 'units::exabyte': {'hdr': 'units_data_type_caster.h'}, 'units::exabytes': {'hdr': 'units_data_type_caster.h'}, 'units::exabits_per_second_t': {'hdr': 'units_data_transfer_rate_type_caster.h', 'darg': True}, 'units::exabytes_per_second_t': {'hdr': 'units_data_transfer_rate_type_caster.h', 'darg': True}, 'units::exabits_per_second': {'hdr': 'units_data_transfer_rate_type_caster.h'}, 'units::exabytes_per_second': {'hdr': 'units_data_transfer_rate_type_caster.h'}, 'units::grams_per_milliliter_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::kilograms_per_cubic_meter_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::kilograms_per_liter_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::ounces_per_cubic_foot_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::ounces_per_cubic_inch_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::ounces_per_gallon_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::pounds_per_cubic_foot_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::pounds_per_cubic_inch_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::pounds_per_gallon_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::slugs_per_cubic_foot_t': {'hdr': 'units_density_type_caster.h', 'darg': True}, 'units::grams_per_milliliter': {'hdr': 'units_density_type_caster.h'}, 'units::kilograms_per_cubic_meter': {'hdr': 'units_density_type_caster.h'}, 'units::kilograms_per_liter': {'hdr': 'units_density_type_caster.h'}, 'units::ounces_per_cubic_foot': {'hdr': 'units_density_type_caster.h'}, 'units::ounces_per_cubic_inch': {'hdr': 'units_density_type_caster.h'}, 'units::ounces_per_gallon': {'hdr': 'units_density_type_caster.h'}, 'units::pounds_per_cubic_foot': {'hdr': 'units_density_type_caster.h'}, 'units::pounds_per_cubic_inch': {'hdr': 'units_density_type_caster.h'}, 'units::pounds_per_gallon': {'hdr': 'units_density_type_caster.h'}, 'units::slugs_per_cubic_foot': {'hdr': 'units_density_type_caster.h'}, 'units::british_thermal_unit_59_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::british_thermal_unit_iso_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::british_thermal_unit_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::calorie_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::foot_pound_t': {'hdr': 'units_torque_type_caster.h', 'darg': True}, 'units::joule_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::kilocalorie_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::kilojoule_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::kilowatt_hour_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::microcalorie_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::microjoule_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::millicalorie_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::millijoule_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::nanocalorie_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::nanojoule_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::therm_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::watt_hour_t': {'hdr': 'units_energy_type_caster.h', 'darg': True}, 'units::british_thermal_unit': {'hdr': 'units_energy_type_caster.h'}, 'units::british_thermal_unit_59': {'hdr': 'units_energy_type_caster.h'}, 'units::british_thermal_unit_iso': {'hdr': 'units_energy_type_caster.h'}, 'units::british_thermal_units': {'hdr': 'units_energy_type_caster.h'}, 'units::british_thermal_units_59': {'hdr': 'units_energy_type_caster.h'}, 'units::british_thermal_units_iso': {'hdr': 'units_energy_type_caster.h'}, 'units::calorie': {'hdr': 'units_energy_type_caster.h'}, 'units::calories': {'hdr': 'units_energy_type_caster.h'}, 'units::foot_pound': {'hdr': 'units_torque_type_caster.h'}, 'units::foot_pounds': {'hdr': 'units_torque_type_caster.h'}, 'units::joule': {'hdr': 'units_energy_type_caster.h'}, 'units::joules': {'hdr': 'units_energy_type_caster.h'}, 'units::kilocalorie': {'hdr': 'units_energy_type_caster.h'}, 'units::kilocalories': {'hdr': 'units_energy_type_caster.h'}, 'units::kilojoule': {'hdr': 'units_energy_type_caster.h'}, 'units::kilojoules': {'hdr': 'units_energy_type_caster.h'}, 'units::kilowatt_hour': {'hdr': 'units_energy_type_caster.h'}, 'units::kilowatt_hours': {'hdr': 'units_energy_type_caster.h'}, 'units::microcalorie': {'hdr': 'units_energy_type_caster.h'}, 'units::microcalories': {'hdr': 'units_energy_type_caster.h'}, 'units::microjoule': {'hdr': 'units_energy_type_caster.h'}, 'units::microjoules': {'hdr': 'units_energy_type_caster.h'}, 'units::millicalorie': {'hdr': 'units_energy_type_caster.h'}, 'units::millicalories': {'hdr': 'units_energy_type_caster.h'}, 'units::millijoule': {'hdr': 'units_energy_type_caster.h'}, 'units::millijoules': {'hdr': 'units_energy_type_caster.h'}, 'units::nanocalorie': {'hdr': 'units_energy_type_caster.h'}, 'units::nanocalories': {'hdr': 'units_energy_type_caster.h'}, 'units::nanojoule': {'hdr': 'units_energy_type_caster.h'}, 'units::nanojoules': {'hdr': 'units_energy_type_caster.h'}, 'units::therm': {'hdr': 'units_energy_type_caster.h'}, 'units::therms': {'hdr': 'units_energy_type_caster.h'}, 'units::watt_hour': {'hdr': 'units_energy_type_caster.h'}, 'units::watt_hours': {'hdr': 'units_energy_type_caster.h'}, 'units::dyne_t': {'hdr': 'units_force_type_caster.h', 'darg': True}, 'units::kilonewton_t': {'hdr': 'units_force_type_caster.h', 'darg': True}, 'units::kilopond_t': {'hdr': 'units_force_type_caster.h', 'darg': True}, 'units::micronewton_t': {'hdr': 'units_force_type_caster.h', 'darg': True}, 'units::millinewton_t': {'hdr': 'units_force_type_caster.h', 'darg': True}, 'units::nanonewton_t': {'hdr': 'units_force_type_caster.h', 'darg': True}, 'units::newton_t': {'hdr': 'units_force_type_caster.h', 'darg': True}, 'units::pound_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::poundal_t': {'hdr': 'units_force_type_caster.h', 'darg': True}, 'units::dyne': {'hdr': 'units_force_type_caster.h'}, 'units::dynes': {'hdr': 'units_force_type_caster.h'}, 'units::kilonewton': {'hdr': 'units_force_type_caster.h'}, 'units::kilonewtons': {'hdr': 'units_force_type_caster.h'}, 'units::kilopond': {'hdr': 'units_force_type_caster.h'}, 'units::kiloponds': {'hdr': 'units_force_type_caster.h'}, 'units::micronewton': {'hdr': 'units_force_type_caster.h'}, 'units::micronewtons': {'hdr': 'units_force_type_caster.h'}, 'units::millinewton': {'hdr': 'units_force_type_caster.h'}, 'units::millinewtons': {'hdr': 'units_force_type_caster.h'}, 'units::nanonewton': {'hdr': 'units_force_type_caster.h'}, 'units::nanonewtons': {'hdr': 'units_force_type_caster.h'}, 'units::newton': {'hdr': 'units_force_type_caster.h'}, 'units::newtons': {'hdr': 'units_force_type_caster.h'}, 'units::pound': {'hdr': 'units_mass_type_caster.h'}, 'units::poundal': {'hdr': 'units_force_type_caster.h'}, 'units::poundals': {'hdr': 'units_force_type_caster.h'}, 'units::pounds': {'hdr': 'units_mass_type_caster.h'}, 'units::hertz_t': {'hdr': 'units_frequency_type_caster.h', 'darg': True}, 'units::kilohertz_t': {'hdr': 'units_frequency_type_caster.h', 'darg': True}, 'units::microhertz_t': {'hdr': 'units_frequency_type_caster.h', 'darg': True}, 'units::millihertz_t': {'hdr': 'units_frequency_type_caster.h', 'darg': True}, 'units::nanohertz_t': {'hdr': 'units_frequency_type_caster.h', 'darg': True}, 'units::hertz': {'hdr': 'units_frequency_type_caster.h'}, 'units::kilohertz': {'hdr': 'units_frequency_type_caster.h'}, 'units::microhertz': {'hdr': 'units_frequency_type_caster.h'}, 'units::millihertz': {'hdr': 'units_frequency_type_caster.h'}, 'units::nanohertz': {'hdr': 'units_frequency_type_caster.h'}, 'units::footcandle_t': {'hdr': 'units_illuminance_type_caster.h', 'darg': True}, 'units::kilolux_t': {'hdr': 'units_illuminance_type_caster.h', 'darg': True}, 'units::lumens_per_square_inch_t': {'hdr': 'units_illuminance_type_caster.h', 'darg': True}, 'units::lux_t': {'hdr': 'units_illuminance_type_caster.h', 'darg': True}, 'units::microlux_t': {'hdr': 'units_illuminance_type_caster.h', 'darg': True}, 'units::millilux_t': {'hdr': 'units_illuminance_type_caster.h', 'darg': True}, 'units::nanolux_t': {'hdr': 'units_illuminance_type_caster.h', 'darg': True}, 'units::phot_t': {'hdr': 'units_illuminance_type_caster.h', 'darg': True}, 'units::footcandle': {'hdr': 'units_illuminance_type_caster.h'}, 'units::footcandles': {'hdr': 'units_illuminance_type_caster.h'}, 'units::kilolux': {'hdr': 'units_illuminance_type_caster.h'}, 'units::kiloluxes': {'hdr': 'units_illuminance_type_caster.h'}, 'units::lumens_per_square_inch': {'hdr': 'units_illuminance_type_caster.h'}, 'units::lux': {'hdr': 'units_illuminance_type_caster.h'}, 'units::luxes': {'hdr': 'units_illuminance_type_caster.h'}, 'units::microlux': {'hdr': 'units_illuminance_type_caster.h'}, 'units::microluxes': {'hdr': 'units_illuminance_type_caster.h'}, 'units::millilux': {'hdr': 'units_illuminance_type_caster.h'}, 'units::milliluxes': {'hdr': 'units_illuminance_type_caster.h'}, 'units::nanolux': {'hdr': 'units_illuminance_type_caster.h'}, 'units::nanoluxes': {'hdr': 'units_illuminance_type_caster.h'}, 'units::phot': {'hdr': 'units_illuminance_type_caster.h'}, 'units::phots': {'hdr': 'units_illuminance_type_caster.h'}, 'units::kiloohm_t': {'hdr': 'units_impedance_type_caster.h', 'darg': True}, 'units::microohm_t': {'hdr': 'units_impedance_type_caster.h', 'darg': True}, 'units::milliohm_t': {'hdr': 'units_impedance_type_caster.h', 'darg': True}, 'units::nanoohm_t': {'hdr': 'units_impedance_type_caster.h', 'darg': True}, 'units::ohm_t': {'hdr': 'units_impedance_type_caster.h', 'darg': True}, 'units::kiloohm': {'hdr': 'units_impedance_type_caster.h'}, 'units::kiloohms': {'hdr': 'units_impedance_type_caster.h'}, 'units::microohm': {'hdr': 'units_impedance_type_caster.h'}, 'units::microohms': {'hdr': 'units_impedance_type_caster.h'}, 'units::milliohm': {'hdr': 'units_impedance_type_caster.h'}, 'units::milliohms': {'hdr': 'units_impedance_type_caster.h'}, 'units::nanoohm': {'hdr': 'units_impedance_type_caster.h'}, 'units::nanoohms': {'hdr': 'units_impedance_type_caster.h'}, 'units::ohm': {'hdr': 'units_impedance_type_caster.h'}, 'units::ohms': {'hdr': 'units_impedance_type_caster.h'}, 'units::henry_t': {'hdr': 'units_inductance_type_caster.h', 'darg': True}, 'units::kilohenry_t': {'hdr': 'units_inductance_type_caster.h', 'darg': True}, 'units::microhenry_t': {'hdr': 'units_inductance_type_caster.h', 'darg': True}, 'units::millihenry_t': {'hdr': 'units_inductance_type_caster.h', 'darg': True}, 'units::nanohenry_t': {'hdr': 'units_inductance_type_caster.h', 'darg': True}, 'units::henries': {'hdr': 'units_inductance_type_caster.h'}, 'units::henry': {'hdr': 'units_inductance_type_caster.h'}, 'units::kilohenries': {'hdr': 'units_inductance_type_caster.h'}, 'units::kilohenry': {'hdr': 'units_inductance_type_caster.h'}, 'units::microhenries': {'hdr': 'units_inductance_type_caster.h'}, 'units::microhenry': {'hdr': 'units_inductance_type_caster.h'}, 'units::millihenries': {'hdr': 'units_inductance_type_caster.h'}, 'units::millihenry': {'hdr': 'units_inductance_type_caster.h'}, 'units::nanohenries': {'hdr': 'units_inductance_type_caster.h'}, 'units::nanohenry': {'hdr': 'units_inductance_type_caster.h'}, 'units::angstrom_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::astronicalUnit_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::chain_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::cubit_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::fathom_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::foot_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::furlong_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::hand_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::inch_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::kilometer_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::league_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::lightyear_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::meter_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::micrometer_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::mil_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::mile_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::millimeter_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::nanometer_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::nauticalLeague_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::nauticalMile_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::parsec_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::yard_t': {'hdr': 'units_length_type_caster.h', 'darg': True}, 'units::angstrom': {'hdr': 'units_length_type_caster.h'}, 'units::angstroms': {'hdr': 'units_length_type_caster.h'}, 'units::astronicalUnit': {'hdr': 'units_length_type_caster.h'}, 'units::astronicalUnits': {'hdr': 'units_length_type_caster.h'}, 'units::chain': {'hdr': 'units_length_type_caster.h'}, 'units::chains': {'hdr': 'units_length_type_caster.h'}, 'units::cubit': {'hdr': 'units_length_type_caster.h'}, 'units::cubits': {'hdr': 'units_length_type_caster.h'}, 'units::fathom': {'hdr': 'units_length_type_caster.h'}, 'units::fathoms': {'hdr': 'units_length_type_caster.h'}, 'units::feet': {'hdr': 'units_length_type_caster.h'}, 'units::foot': {'hdr': 'units_length_type_caster.h'}, 'units::furlong': {'hdr': 'units_length_type_caster.h'}, 'units::furlongs': {'hdr': 'units_length_type_caster.h'}, 'units::hand': {'hdr': 'units_length_type_caster.h'}, 'units::hands': {'hdr': 'units_length_type_caster.h'}, 'units::inch': {'hdr': 'units_length_type_caster.h'}, 'units::inches': {'hdr': 'units_length_type_caster.h'}, 'units::kilometer': {'hdr': 'units_length_type_caster.h'}, 'units::kilometers': {'hdr': 'units_length_type_caster.h'}, 'units::league': {'hdr': 'units_length_type_caster.h'}, 'units::leagues': {'hdr': 'units_length_type_caster.h'}, 'units::lightyear': {'hdr': 'units_length_type_caster.h'}, 'units::lightyears': {'hdr': 'units_length_type_caster.h'}, 'units::meter': {'hdr': 'units_length_type_caster.h'}, 'units::meters': {'hdr': 'units_length_type_caster.h'}, 'units::micrometer': {'hdr': 'units_length_type_caster.h'}, 'units::micrometers': {'hdr': 'units_length_type_caster.h'}, 'units::mil': {'hdr': 'units_length_type_caster.h'}, 'units::mile': {'hdr': 'units_length_type_caster.h'}, 'units::miles': {'hdr': 'units_length_type_caster.h'}, 'units::millimeter': {'hdr': 'units_length_type_caster.h'}, 'units::millimeters': {'hdr': 'units_length_type_caster.h'}, 'units::mils': {'hdr': 'units_length_type_caster.h'}, 'units::nanometer': {'hdr': 'units_length_type_caster.h'}, 'units::nanometers': {'hdr': 'units_length_type_caster.h'}, 'units::nauticalLeague': {'hdr': 'units_length_type_caster.h'}, 'units::nauticalLeagues': {'hdr': 'units_length_type_caster.h'}, 'units::nauticalMile': {'hdr': 'units_length_type_caster.h'}, 'units::nauticalMiles': {'hdr': 'units_length_type_caster.h'}, 'units::parsec': {'hdr': 'units_length_type_caster.h'}, 'units::parsecs': {'hdr': 'units_length_type_caster.h'}, 'units::yard': {'hdr': 'units_length_type_caster.h'}, 'units::yards': {'hdr': 'units_length_type_caster.h'}, 'units::kilolumen_t': {'hdr': 'units_luminous_flux_type_caster.h', 'darg': True}, 'units::lumen_t': {'hdr': 'units_luminous_flux_type_caster.h', 'darg': True}, 'units::microlumen_t': {'hdr': 'units_luminous_flux_type_caster.h', 'darg': True}, 'units::millilumen_t': {'hdr': 'units_luminous_flux_type_caster.h', 'darg': True}, 'units::nanolumen_t': {'hdr': 'units_luminous_flux_type_caster.h', 'darg': True}, 'units::kilolumen': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::kilolumens': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::lumen': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::lumens': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::microlumen': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::microlumens': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::millilumen': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::millilumens': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::nanolumen': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::nanolumens': {'hdr': 'units_luminous_flux_type_caster.h'}, 'units::candela_t': {'hdr': 'units_luminous_intensity_type_caster.h', 'darg': True}, 'units::kilocandela_t': {'hdr': 'units_luminous_intensity_type_caster.h', 'darg': True}, 'units::microcandela_t': {'hdr': 'units_luminous_intensity_type_caster.h', 'darg': True}, 'units::millicandela_t': {'hdr': 'units_luminous_intensity_type_caster.h', 'darg': True}, 'units::nanocandela_t': {'hdr': 'units_luminous_intensity_type_caster.h', 'darg': True}, 'units::candela': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::candelas': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::kilocandela': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::kilocandelas': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::microcandela': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::microcandelas': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::millicandela': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::millicandelas': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::nanocandela': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::nanocandelas': {'hdr': 'units_luminous_intensity_type_caster.h'}, 'units::gauss_t': {'hdr': 'units_magnetic_field_strength_type_caster.h', 'darg': True}, 'units::kilotesla_t': {'hdr': 'units_magnetic_field_strength_type_caster.h', 'darg': True}, 'units::microtesla_t': {'hdr': 'units_magnetic_field_strength_type_caster.h', 'darg': True}, 'units::millitesla_t': {'hdr': 'units_magnetic_field_strength_type_caster.h', 'darg': True}, 'units::nanotesla_t': {'hdr': 'units_magnetic_field_strength_type_caster.h', 'darg': True}, 'units::tesla_t': {'hdr': 'units_magnetic_field_strength_type_caster.h', 'darg': True}, 'units::gauss': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::kilotesla': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::kiloteslas': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::microtesla': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::microteslas': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::millitesla': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::milliteslas': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::nanotesla': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::nanoteslas': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::tesla': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::teslas': {'hdr': 'units_magnetic_field_strength_type_caster.h'}, 'units::kiloweber_t': {'hdr': 'units_magnetic_flux_type_caster.h', 'darg': True}, 'units::maxwell_t': {'hdr': 'units_magnetic_flux_type_caster.h', 'darg': True}, 'units::microweber_t': {'hdr': 'units_magnetic_flux_type_caster.h', 'darg': True}, 'units::milliweber_t': {'hdr': 'units_magnetic_flux_type_caster.h', 'darg': True}, 'units::nanoweber_t': {'hdr': 'units_magnetic_flux_type_caster.h', 'darg': True}, 'units::weber_t': {'hdr': 'units_magnetic_flux_type_caster.h', 'darg': True}, 'units::kiloweber': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::kilowebers': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::maxwell': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::maxwells': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::microweber': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::microwebers': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::milliweber': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::milliwebers': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::nanoweber': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::nanowebers': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::weber': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::webers': {'hdr': 'units_magnetic_flux_type_caster.h'}, 'units::carat_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::gram_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::kilogram_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::long_ton_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::metric_ton_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::microgram_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::milligram_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::nanogram_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::ounce_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::short_ton_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::slug_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::stone_t': {'hdr': 'units_mass_type_caster.h', 'darg': True}, 'units::carat': {'hdr': 'units_mass_type_caster.h'}, 'units::carats': {'hdr': 'units_mass_type_caster.h'}, 'units::gram': {'hdr': 'units_mass_type_caster.h'}, 'units::grams': {'hdr': 'units_mass_type_caster.h'}, 'units::kilogram': {'hdr': 'units_mass_type_caster.h'}, 'units::kilograms': {'hdr': 'units_mass_type_caster.h'}, 'units::long_ton': {'hdr': 'units_mass_type_caster.h'}, 'units::long_tons': {'hdr': 'units_mass_type_caster.h'}, 'units::metric_ton': {'hdr': 'units_mass_type_caster.h'}, 'units::metric_tons': {'hdr': 'units_mass_type_caster.h'}, 'units::microgram': {'hdr': 'units_mass_type_caster.h'}, 'units::micrograms': {'hdr': 'units_mass_type_caster.h'}, 'units::milligram': {'hdr': 'units_mass_type_caster.h'}, 'units::milligrams': {'hdr': 'units_mass_type_caster.h'}, 'units::nanogram': {'hdr': 'units_mass_type_caster.h'}, 'units::nanograms': {'hdr': 'units_mass_type_caster.h'}, 'units::ounce': {'hdr': 'units_mass_type_caster.h'}, 'units::ounces': {'hdr': 'units_mass_type_caster.h'}, 'units::short_ton': {'hdr': 'units_mass_type_caster.h'}, 'units::short_tons': {'hdr': 'units_mass_type_caster.h'}, 'units::slug': {'hdr': 'units_mass_type_caster.h'}, 'units::slugs': {'hdr': 'units_mass_type_caster.h'}, 'units::stone': {'hdr': 'units_mass_type_caster.h'}, 'units::kilogram_square_meter_t': {'hdr': 'units_moment_of_inertia_type_caster.h', 'darg': True}, 'units::kilogram_square_meter': {'hdr': 'units_moment_of_inertia_type_caster.h'}, 'units::kilogram_square_meters': {'hdr': 'units_moment_of_inertia_type_caster.h'}, 'units::horsepower_t': {'hdr': 'units_power_type_caster.h', 'darg': True}, 'units::kilowatt_t': {'hdr': 'units_power_type_caster.h', 'darg': True}, 'units::microwatt_t': {'hdr': 'units_power_type_caster.h', 'darg': True}, 'units::milliwatt_t': {'hdr': 'units_power_type_caster.h', 'darg': True}, 'units::nanowatt_t': {'hdr': 'units_power_type_caster.h', 'darg': True}, 'units::watt_t': {'hdr': 'units_power_type_caster.h', 'darg': True}, 'units::horsepower': {'hdr': 'units_power_type_caster.h'}, 'units::kilowatt': {'hdr': 'units_power_type_caster.h'}, 'units::kilowatts': {'hdr': 'units_power_type_caster.h'}, 'units::microwatt': {'hdr': 'units_power_type_caster.h'}, 'units::microwatts': {'hdr': 'units_power_type_caster.h'}, 'units::milliwatt': {'hdr': 'units_power_type_caster.h'}, 'units::milliwatts': {'hdr': 'units_power_type_caster.h'}, 'units::nanowatt': {'hdr': 'units_power_type_caster.h'}, 'units::nanowatts': {'hdr': 'units_power_type_caster.h'}, 'units::watt': {'hdr': 'units_power_type_caster.h'}, 'units::watts': {'hdr': 'units_power_type_caster.h'}, 'units::atmosphere_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::bar_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::kilopascal_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::mbar_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::micropascal_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::millipascal_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::nanopascal_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::pascal_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::pounds_per_square_inch_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::torr_t': {'hdr': 'units_pressure_type_caster.h', 'darg': True}, 'units::atmosphere': {'hdr': 'units_pressure_type_caster.h'}, 'units::atmospheres': {'hdr': 'units_pressure_type_caster.h'}, 'units::bar': {'hdr': 'units_pressure_type_caster.h'}, 'units::bars': {'hdr': 'units_pressure_type_caster.h'}, 'units::kilopascal': {'hdr': 'units_pressure_type_caster.h'}, 'units::kilopascals': {'hdr': 'units_pressure_type_caster.h'}, 'units::mbar': {'hdr': 'units_pressure_type_caster.h'}, 'units::mbars': {'hdr': 'units_pressure_type_caster.h'}, 'units::micropascal': {'hdr': 'units_pressure_type_caster.h'}, 'units::micropascals': {'hdr': 'units_pressure_type_caster.h'}, 'units::millipascal': {'hdr': 'units_pressure_type_caster.h'}, 'units::millipascals': {'hdr': 'units_pressure_type_caster.h'}, 'units::nanopascal': {'hdr': 'units_pressure_type_caster.h'}, 'units::nanopascals': {'hdr': 'units_pressure_type_caster.h'}, 'units::pascal': {'hdr': 'units_pressure_type_caster.h'}, 'units::pascals': {'hdr': 'units_pressure_type_caster.h'}, 'units::pounds_per_square_inch': {'hdr': 'units_pressure_type_caster.h'}, 'units::torr': {'hdr': 'units_pressure_type_caster.h'}, 'units::torrs': {'hdr': 'units_pressure_type_caster.h'}, 'units::becquerel_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::curie_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::gray_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::kilobecquerel_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::kilogray_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::kilosievert_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::microbecquerel_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::microgray_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::microsievert_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::millibecquerel_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::milligray_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::millisievert_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::nanobecquerel_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::nanogray_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::nanosievert_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::rad_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::rutherford_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::sievert_t': {'hdr': 'units_radiation_type_caster.h', 'darg': True}, 'units::becquerel': {'hdr': 'units_radiation_type_caster.h'}, 'units::becquerels': {'hdr': 'units_radiation_type_caster.h'}, 'units::curie': {'hdr': 'units_radiation_type_caster.h'}, 'units::curies': {'hdr': 'units_radiation_type_caster.h'}, 'units::gray': {'hdr': 'units_radiation_type_caster.h'}, 'units::grays': {'hdr': 'units_radiation_type_caster.h'}, 'units::kilobecquerel': {'hdr': 'units_radiation_type_caster.h'}, 'units::kilobecquerels': {'hdr': 'units_radiation_type_caster.h'}, 'units::kilogray': {'hdr': 'units_radiation_type_caster.h'}, 'units::kilograys': {'hdr': 'units_radiation_type_caster.h'}, 'units::kilosievert': {'hdr': 'units_radiation_type_caster.h'}, 'units::kilosieverts': {'hdr': 'units_radiation_type_caster.h'}, 'units::microbecquerel': {'hdr': 'units_radiation_type_caster.h'}, 'units::microbecquerels': {'hdr': 'units_radiation_type_caster.h'}, 'units::microgray': {'hdr': 'units_radiation_type_caster.h'}, 'units::micrograys': {'hdr': 'units_radiation_type_caster.h'}, 'units::microsievert': {'hdr': 'units_radiation_type_caster.h'}, 'units::microsieverts': {'hdr': 'units_radiation_type_caster.h'}, 'units::millibecquerel': {'hdr': 'units_radiation_type_caster.h'}, 'units::millibecquerels': {'hdr': 'units_radiation_type_caster.h'}, 'units::milligray': {'hdr': 'units_radiation_type_caster.h'}, 'units::milligrays': {'hdr': 'units_radiation_type_caster.h'}, 'units::millisievert': {'hdr': 'units_radiation_type_caster.h'}, 'units::millisieverts': {'hdr': 'units_radiation_type_caster.h'}, 'units::nanobecquerel': {'hdr': 'units_radiation_type_caster.h'}, 'units::nanobecquerels': {'hdr': 'units_radiation_type_caster.h'}, 'units::nanogray': {'hdr': 'units_radiation_type_caster.h'}, 'units::nanograys': {'hdr': 'units_radiation_type_caster.h'}, 'units::nanosievert': {'hdr': 'units_radiation_type_caster.h'}, 'units::nanosieverts': {'hdr': 'units_radiation_type_caster.h'}, 'units::rad': {'hdr': 'units_radiation_type_caster.h'}, 'units::rads': {'hdr': 'units_radiation_type_caster.h'}, 'units::rutherford': {'hdr': 'units_radiation_type_caster.h'}, 'units::rutherfords': {'hdr': 'units_radiation_type_caster.h'}, 'units::sievert': {'hdr': 'units_radiation_type_caster.h'}, 'units::sieverts': {'hdr': 'units_radiation_type_caster.h'}, 'units::degree_squared_t': {'hdr': 'units_solid_angle_type_caster.h', 'darg': True}, 'units::kilosteradian_t': {'hdr': 'units_solid_angle_type_caster.h', 'darg': True}, 'units::microsteradian_t': {'hdr': 'units_solid_angle_type_caster.h', 'darg': True}, 'units::millisteradian_t': {'hdr': 'units_solid_angle_type_caster.h', 'darg': True}, 'units::nanosteradian_t': {'hdr': 'units_solid_angle_type_caster.h', 'darg': True}, 'units::spat_t': {'hdr': 'units_solid_angle_type_caster.h', 'darg': True}, 'units::steradian_t': {'hdr': 'units_solid_angle_type_caster.h', 'darg': True}, 'units::degree_squared': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::degrees_squared': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::kilosteradian': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::kilosteradians': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::microsteradian': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::microsteradians': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::millisteradian': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::millisteradians': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::nanosteradian': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::nanosteradians': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::spat': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::spats': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::steradian': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::steradians': {'hdr': 'units_solid_angle_type_caster.h'}, 'units::mole_t': {'hdr': 'units_substance_type_caster.h', 'darg': True}, 'units::mole': {'hdr': 'units_substance_type_caster.h'}, 'units::moles': {'hdr': 'units_substance_type_caster.h'}, 'units::celsius_t': {'hdr': 'units_temperature_type_caster.h', 'darg': True}, 'units::fahrenheit_t': {'hdr': 'units_temperature_type_caster.h', 'darg': True}, 'units::kelvin_t': {'hdr': 'units_temperature_type_caster.h', 'darg': True}, 'units::rankine_t': {'hdr': 'units_temperature_type_caster.h', 'darg': True}, 'units::reaumur_t': {'hdr': 'units_temperature_type_caster.h', 'darg': True}, 'units::celsius': {'hdr': 'units_temperature_type_caster.h'}, 'units::fahrenheit': {'hdr': 'units_temperature_type_caster.h'}, 'units::kelvin': {'hdr': 'units_temperature_type_caster.h'}, 'units::rankine': {'hdr': 'units_temperature_type_caster.h'}, 'units::reaumur': {'hdr': 'units_temperature_type_caster.h'}, 'units::day_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::gregorian_year_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::hour_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::julian_year_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::kilosecond_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::microsecond_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::millisecond_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::minute_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::nanosecond_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::second_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::week_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::year_t': {'hdr': 'units_time_type_caster.h', 'darg': True}, 'units::day': {'hdr': 'units_time_type_caster.h'}, 'units::days': {'hdr': 'units_time_type_caster.h'}, 'units::gregorian_year': {'hdr': 'units_time_type_caster.h'}, 'units::gregorian_years': {'hdr': 'units_time_type_caster.h'}, 'units::hour': {'hdr': 'units_time_type_caster.h'}, 'units::hours': {'hdr': 'units_time_type_caster.h'}, 'units::julian_year': {'hdr': 'units_time_type_caster.h'}, 'units::julian_years': {'hdr': 'units_time_type_caster.h'}, 'units::kilosecond': {'hdr': 'units_time_type_caster.h'}, 'units::kiloseconds': {'hdr': 'units_time_type_caster.h'}, 'units::microsecond': {'hdr': 'units_time_type_caster.h'}, 'units::microseconds': {'hdr': 'units_time_type_caster.h'}, 'units::millisecond': {'hdr': 'units_time_type_caster.h'}, 'units::milliseconds': {'hdr': 'units_time_type_caster.h'}, 'units::minute': {'hdr': 'units_time_type_caster.h'}, 'units::minutes': {'hdr': 'units_time_type_caster.h'}, 'units::nanosecond': {'hdr': 'units_time_type_caster.h'}, 'units::nanoseconds': {'hdr': 'units_time_type_caster.h'}, 'units::second': {'hdr': 'units_time_type_caster.h'}, 'units::seconds': {'hdr': 'units_time_type_caster.h'}, 'units::week': {'hdr': 'units_time_type_caster.h'}, 'units::weeks': {'hdr': 'units_time_type_caster.h'}, 'units::year': {'hdr': 'units_time_type_caster.h'}, 'units::years': {'hdr': 'units_time_type_caster.h'}, 'units::foot_poundal_t': {'hdr': 'units_torque_type_caster.h', 'darg': True}, 'units::inch_pound_t': {'hdr': 'units_torque_type_caster.h', 'darg': True}, 'units::meter_kilogram_t': {'hdr': 'units_torque_type_caster.h', 'darg': True}, 'units::newton_meter_t': {'hdr': 'units_torque_type_caster.h', 'darg': True}, 'units::foot_poundal': {'hdr': 'units_torque_type_caster.h'}, 'units::foot_poundals': {'hdr': 'units_torque_type_caster.h'}, 'units::inch_pound': {'hdr': 'units_torque_type_caster.h'}, 'units::inch_pounds': {'hdr': 'units_torque_type_caster.h'}, 'units::meter_kilogram': {'hdr': 'units_torque_type_caster.h'}, 'units::meter_kilograms': {'hdr': 'units_torque_type_caster.h'}, 'units::newton_meter': {'hdr': 'units_torque_type_caster.h'}, 'units::newton_meters': {'hdr': 'units_torque_type_caster.h'}, 'units::feet_per_second_t': {'hdr': 'units_velocity_type_caster.h', 'darg': True}, 'units::kilometers_per_hour_t': {'hdr': 'units_velocity_type_caster.h', 'darg': True}, 'units::knot_t': {'hdr': 'units_velocity_type_caster.h', 'darg': True}, 'units::meters_per_second_t': {'hdr': 'units_velocity_type_caster.h', 'darg': True}, 'units::miles_per_hour_t': {'hdr': 'units_velocity_type_caster.h', 'darg': True}, 'units::feet_per_second': {'hdr': 'units_velocity_type_caster.h'}, 'units::kilometers_per_hour': {'hdr': 'units_velocity_type_caster.h'}, 'units::knot': {'hdr': 'units_velocity_type_caster.h'}, 'units::knots': {'hdr': 'units_velocity_type_caster.h'}, 'units::meters_per_second': {'hdr': 'units_velocity_type_caster.h'}, 'units::miles_per_hour': {'hdr': 'units_velocity_type_caster.h'}, 'units::abvolt_t': {'hdr': 'units_voltage_type_caster.h', 'darg': True}, 'units::kilovolt_t': {'hdr': 'units_voltage_type_caster.h', 'darg': True}, 'units::microvolt_t': {'hdr': 'units_voltage_type_caster.h', 'darg': True}, 'units::millivolt_t': {'hdr': 'units_voltage_type_caster.h', 'darg': True}, 'units::nanovolt_t': {'hdr': 'units_voltage_type_caster.h', 'darg': True}, 'units::statvolt_t': {'hdr': 'units_voltage_type_caster.h', 'darg': True}, 'units::volt_t': {'hdr': 'units_voltage_type_caster.h', 'darg': True}, 'units::abvolt': {'hdr': 'units_voltage_type_caster.h'}, 'units::abvolts': {'hdr': 'units_voltage_type_caster.h'}, 'units::kilovolt': {'hdr': 'units_voltage_type_caster.h'}, 'units::kilovolts': {'hdr': 'units_voltage_type_caster.h'}, 'units::microvolt': {'hdr': 'units_voltage_type_caster.h'}, 'units::microvolts': {'hdr': 'units_voltage_type_caster.h'}, 'units::millivolt': {'hdr': 'units_voltage_type_caster.h'}, 'units::millivolts': {'hdr': 'units_voltage_type_caster.h'}, 'units::nanovolt': {'hdr': 'units_voltage_type_caster.h'}, 'units::nanovolts': {'hdr': 'units_voltage_type_caster.h'}, 'units::statvolt': {'hdr': 'units_voltage_type_caster.h'}, 'units::statvolts': {'hdr': 'units_voltage_type_caster.h'}, 'units::volt': {'hdr': 'units_voltage_type_caster.h'}, 'units::volts': {'hdr': 'units_voltage_type_caster.h'}, 'units::barrel_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::bushel_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cord_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cubic_fathom_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cubic_foot_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cubic_inch_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cubic_kilometer_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cubic_meter_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cubic_mile_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cubic_millimeter_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cubic_yard_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::cup_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::dash_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::dram_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::drop_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::fifth_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::fluid_ounce_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::gallon_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::gill_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::kiloliter_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::liter_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::microliter_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::milliliter_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::nanoliter_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::peck_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::pinch_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::pint_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::quart_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::sack_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::shot_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::strike_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::tablespoon_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::teaspoon_t': {'hdr': 'units_volume_type_caster.h', 'darg': True}, 'units::barrel': {'hdr': 'units_volume_type_caster.h'}, 'units::barrels': {'hdr': 'units_volume_type_caster.h'}, 'units::bushel': {'hdr': 'units_volume_type_caster.h'}, 'units::bushels': {'hdr': 'units_volume_type_caster.h'}, 'units::cord': {'hdr': 'units_volume_type_caster.h'}, 'units::cords': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_fathom': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_fathoms': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_feet': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_foot': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_inch': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_inches': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_kilometer': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_kilometers': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_meter': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_meters': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_mile': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_miles': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_millimeter': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_millimeters': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_yard': {'hdr': 'units_volume_type_caster.h'}, 'units::cubic_yards': {'hdr': 'units_volume_type_caster.h'}, 'units::cup': {'hdr': 'units_volume_type_caster.h'}, 'units::cups': {'hdr': 'units_volume_type_caster.h'}, 'units::dash': {'hdr': 'units_volume_type_caster.h'}, 'units::dashes': {'hdr': 'units_volume_type_caster.h'}, 'units::dram': {'hdr': 'units_volume_type_caster.h'}, 'units::drams': {'hdr': 'units_volume_type_caster.h'}, 'units::drop': {'hdr': 'units_volume_type_caster.h'}, 'units::drops': {'hdr': 'units_volume_type_caster.h'}, 'units::fifth': {'hdr': 'units_volume_type_caster.h'}, 'units::fifths': {'hdr': 'units_volume_type_caster.h'}, 'units::fluid_ounce': {'hdr': 'units_volume_type_caster.h'}, 'units::fluid_ounces': {'hdr': 'units_volume_type_caster.h'}, 'units::gallon': {'hdr': 'units_volume_type_caster.h'}, 'units::gallons': {'hdr': 'units_volume_type_caster.h'}, 'units::gill': {'hdr': 'units_volume_type_caster.h'}, 'units::gills': {'hdr': 'units_volume_type_caster.h'}, 'units::kiloliter': {'hdr': 'units_volume_type_caster.h'}, 'units::kiloliters': {'hdr': 'units_volume_type_caster.h'}, 'units::liter': {'hdr': 'units_volume_type_caster.h'}, 'units::liters': {'hdr': 'units_volume_type_caster.h'}, 'units::microliter': {'hdr': 'units_volume_type_caster.h'}, 'units::microliters': {'hdr': 'units_volume_type_caster.h'}, 'units::milliliter': {'hdr': 'units_volume_type_caster.h'}, 'units::milliliters': {'hdr': 'units_volume_type_caster.h'}, 'units::nanoliter': {'hdr': 'units_volume_type_caster.h'}, 'units::nanoliters': {'hdr': 'units_volume_type_caster.h'}, 'units::peck': {'hdr': 'units_volume_type_caster.h'}, 'units::pecks': {'hdr': 'units_volume_type_caster.h'}, 'units::pinch': {'hdr': 'units_volume_type_caster.h'}, 'units::pinches': {'hdr': 'units_volume_type_caster.h'}, 'units::pint': {'hdr': 'units_volume_type_caster.h'}, 'units::pints': {'hdr': 'units_volume_type_caster.h'}, 'units::quart': {'hdr': 'units_volume_type_caster.h'}, 'units::quarts': {'hdr': 'units_volume_type_caster.h'}, 'units::sack': {'hdr': 'units_volume_type_caster.h'}, 'units::sacks': {'hdr': 'units_volume_type_caster.h'}, 'units::shot': {'hdr': 'units_volume_type_caster.h'}, 'units::shots': {'hdr': 'units_volume_type_caster.h'}, 'units::strike': {'hdr': 'units_volume_type_caster.h'}, 'units::strikes': {'hdr': 'units_volume_type_caster.h'}, 'units::tablespoon': {'hdr': 'units_volume_type_caster.h'}, 'units::tablespoons': {'hdr': 'units_volume_type_caster.h'}, 'units::teaspoon': {'hdr': 'units_volume_type_caster.h'}, 'units::teaspoons': {'hdr': 'units_volume_type_caster.h'}, 'units::curvature_t': {'hdr': 'units_compound_type_caster.h', 'darg': True}, 'units::compound_unit': {'hdr': 'units_compound_type_caster.h'}, 'units::inverse': {'hdr': 'units_compound_type_caster.h'}, 'units::dimensionless_t': {'hdr': 'units_misc_type_caster.h', 'darg': True}, 'units::dimensionless::dimensionless_t': {'hdr': 'units_misc_type_caster.h', 'darg': True}, 'units::scalar_t': {'hdr': 'units_misc_type_caster.h', 'darg': True}, 'units::dimensionless::scalar_t': {'hdr': 'units_misc_type_caster.h', 'darg': True}, 'units::dimensionless': {'hdr': 'units_misc_type_caster.h'}, 'units::dimensionless::dimensionless': {'hdr': 'units_misc_type_caster.h'}, 'units::scalar': {'hdr': 'units_misc_type_caster.h'}, 'units::dimensionless::scalar': {'hdr': 'units_misc_type_caster.h'}, 'frc::Vectord': {'hdr': 'pybind11/eigen.h'}, 'frc::Matrixd': {'hdr': 'pybind11/eigen.h'}})
+
+def get_type_casters(casters):
+    t = {}
+    get_type_casters_cfg(t)
+    for k, v in t.items():
+        if "hdr" in v:
+            casters[k] = v["hdr"]
\ No newline at end of file
diff --git a/subprojects/robotpy-wpimath/wpimath/_init_wpimath.py b/subprojects/robotpy-wpimath/wpimath/_init_wpimath.py
new file mode 100644
index 00000000..191ff31a
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/_init_wpimath.py
@@ -0,0 +1,10 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
+import wpimath.geometry._init_geometry
diff --git a/subprojects/robotpy-wpimath/wpimath/filter/_init_filter.py b/subprojects/robotpy-wpimath/wpimath/filter/_init_filter.py
new file mode 100644
index 00000000..4be584dd
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/filter/_init_filter.py
@@ -0,0 +1,9 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
diff --git a/subprojects/robotpy-wpimath/wpimath/filter/pkgcfg.py b/subprojects/robotpy-wpimath/wpimath/filter/pkgcfg.py
new file mode 100644
index 00000000..c109110f
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/filter/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpimath.filter._init_filter"
+depends = ['wpiutil', 'wpimath_cpp']
+pypi_package = 'robotpy-wpimath'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpimath/wpimath/geometry/_init_geometry.py b/subprojects/robotpy-wpimath/wpimath/geometry/_init_geometry.py
new file mode 100644
index 00000000..4be584dd
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/geometry/_init_geometry.py
@@ -0,0 +1,9 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
diff --git a/subprojects/robotpy-wpimath/wpimath/geometry/pkgcfg.py b/subprojects/robotpy-wpimath/wpimath/geometry/pkgcfg.py
new file mode 100644
index 00000000..770b3341
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/geometry/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpimath.geometry._init_geometry"
+depends = ['wpiutil', 'wpimath_cpp']
+pypi_package = 'robotpy-wpimath'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include"), join(_root, "include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpimath/wpimath/interpolation/_init_interpolation.py b/subprojects/robotpy-wpimath/wpimath/interpolation/_init_interpolation.py
new file mode 100644
index 00000000..191ff31a
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/interpolation/_init_interpolation.py
@@ -0,0 +1,10 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
+import wpimath.geometry._init_geometry
diff --git a/subprojects/robotpy-wpimath/wpimath/interpolation/pkgcfg.py b/subprojects/robotpy-wpimath/wpimath/interpolation/pkgcfg.py
new file mode 100644
index 00000000..df5e9538
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/interpolation/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpimath.interpolation._init_interpolation"
+depends = ['wpiutil', 'wpimath_cpp', 'wpimath_geometry']
+pypi_package = 'robotpy-wpimath'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpimath/wpimath/kinematics/_init_kinematics.py b/subprojects/robotpy-wpimath/wpimath/kinematics/_init_kinematics.py
new file mode 100644
index 00000000..191ff31a
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/kinematics/_init_kinematics.py
@@ -0,0 +1,10 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
+import wpimath.geometry._init_geometry
diff --git a/subprojects/robotpy-wpimath/wpimath/kinematics/pkgcfg.py b/subprojects/robotpy-wpimath/wpimath/kinematics/pkgcfg.py
new file mode 100644
index 00000000..22a02ad2
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/kinematics/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpimath.kinematics._init_kinematics"
+depends = ['wpiutil', 'wpimath_cpp', 'wpimath_geometry']
+pypi_package = 'robotpy-wpimath'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpimath/wpimath/pkgcfg.py b/subprojects/robotpy-wpimath/wpimath/pkgcfg.py
new file mode 100644
index 00000000..dcb8beb9
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpimath._init_wpimath"
+depends = ['wpiutil', 'wpimath_cpp', 'wpimath_geometry']
+pypi_package = 'robotpy-wpimath'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpimath/wpimath/spline/_init_spline.py b/subprojects/robotpy-wpimath/wpimath/spline/_init_spline.py
new file mode 100644
index 00000000..191ff31a
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/spline/_init_spline.py
@@ -0,0 +1,10 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+import wpimath._impl._init_wpimath_cpp
+import wpimath.geometry._init_geometry
diff --git a/subprojects/robotpy-wpimath/wpimath/spline/pkgcfg.py b/subprojects/robotpy-wpimath/wpimath/spline/pkgcfg.py
new file mode 100644
index 00000000..737cc2d2
--- /dev/null
+++ b/subprojects/robotpy-wpimath/wpimath/spline/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpimath.spline._init_spline"
+depends = ['wpiutil', 'wpimath_cpp', 'wpimath_geometry']
+pypi_package = 'robotpy-wpimath'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpinet/wpinet/_init_wpinet.py b/subprojects/robotpy-wpinet/wpinet/_init_wpinet.py
new file mode 100644
index 00000000..2fd0d530
--- /dev/null
+++ b/subprojects/robotpy-wpinet/wpinet/_init_wpinet.py
@@ -0,0 +1,17 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "wpinet.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "wpinet.dll")):
+        raise FileNotFoundError("wpinet.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("wpinet.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-wpinet/wpinet/pkgcfg.py b/subprojects/robotpy-wpinet/wpinet/pkgcfg.py
new file mode 100644
index 00000000..5eb6d0d8
--- /dev/null
+++ b/subprojects/robotpy-wpinet/wpinet/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpinet._init_wpinet"
+depends = ['wpiutil']
+pypi_package = 'robotpy-wpinet'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return [join(_root, "lib")]
+
+def get_library_dirs_rel():
+    return ['lib']
+
+def get_library_names():
+    return ['wpinet']
+
+def get_library_full_names():
+    return ['wpinet.dll']
\ No newline at end of file
diff --git a/subprojects/robotpy-wpiutil/tests/cpp/wpiutil_test/_initmodule.py b/subprojects/robotpy-wpiutil/tests/cpp/wpiutil_test/_initmodule.py
new file mode 100644
index 00000000..de5248e6
--- /dev/null
+++ b/subprojects/robotpy-wpiutil/tests/cpp/wpiutil_test/_initmodule.py
@@ -0,0 +1,8 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+# runtime dependencies
+import wpiutil._init_wpiutil
diff --git a/subprojects/robotpy-wpiutil/tests/cpp/wpiutil_test/pkgcfg.py b/subprojects/robotpy-wpiutil/tests/cpp/wpiutil_test/pkgcfg.py
new file mode 100644
index 00000000..9e2ea3ff
--- /dev/null
+++ b/subprojects/robotpy-wpiutil/tests/cpp/wpiutil_test/pkgcfg.py
@@ -0,0 +1,24 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpiutil_test._initmodule"
+depends = ['wpiutil']
+pypi_package = 'wpiutil_test'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include")]
+
+def get_library_dirs():
+    return []
+
+def get_library_dirs_rel():
+    return []
+
+def get_library_names():
+    return []
+
+def get_library_full_names():
+    return []
\ No newline at end of file
diff --git a/subprojects/robotpy-wpiutil/wpiutil/_init_wpiutil.py b/subprojects/robotpy-wpiutil/wpiutil/_init_wpiutil.py
new file mode 100644
index 00000000..f7d6dce6
--- /dev/null
+++ b/subprojects/robotpy-wpiutil/wpiutil/_init_wpiutil.py
@@ -0,0 +1,16 @@
+# This file is automatically generated, DO NOT EDIT
+# fmt: off
+
+from os.path import abspath, join, dirname, exists
+_root = abspath(dirname(__file__))
+
+
+from ctypes import cdll
+
+try:
+    _lib = cdll.LoadLibrary(join(_root, "lib", "wpiutil.dll"))
+except FileNotFoundError:
+    if not exists(join(_root, "lib", "wpiutil.dll")):
+        raise FileNotFoundError("wpiutil.dll was not found on your system. Is this package correctly installed?")
+    raise Exception("wpiutil.dll could not be loaded. Do you have Visual Studio C++ Redistributible 2019 installed?")
+
diff --git a/subprojects/robotpy-wpiutil/wpiutil/pkgcfg.py b/subprojects/robotpy-wpiutil/wpiutil/pkgcfg.py
new file mode 100644
index 00000000..bc61bea1
--- /dev/null
+++ b/subprojects/robotpy-wpiutil/wpiutil/pkgcfg.py
@@ -0,0 +1,34 @@
+# fmt: off
+# This file is automatically generated, DO NOT EDIT
+
+from os.path import abspath, join, dirname
+_root = abspath(dirname(__file__))
+
+libinit_import = "wpiutil._init_wpiutil"
+depends = []
+pypi_package = 'robotpy-wpiutil'
+
+def get_include_dirs():
+    return [join(_root, "include"), join(_root, "rpy-include"), join(_root, "src", "wpistruct"), join(_root, "src", "type_casters")]
+
+def get_library_dirs():
+    return [join(_root, "lib")]
+
+def get_library_dirs_rel():
+    return ['lib']
+
+def get_library_names():
+    return ['wpiutil']
+
+def get_library_full_names():
+    return ['wpiutil.dll']
+
+def get_type_casters_cfg(casters):
+    casters.update({'wpi::array': {'hdr': 'wpi_array_type_caster.h'}, 'wpi::json': {'hdr': 'wpi_json_type_caster.h'}, 'std::span': {'hdr': 'wpi_span_type_caster.h'}, 'wpi::SmallSet': {'hdr': 'wpi_smallset_type_caster.h'}, 'wpi::SmallVector': {'hdr': 'wpi_smallvector_type_caster.h'}, 'wpi::SmallVectorImpl': {'hdr': 'wpi_smallvectorimpl_type_caster.h'}, 'wpi::StringMap': {'hdr': 'wpi_string_map_caster.h'}, 'wpi::ct_string': {'hdr': 'wpi_ct_string_type_caster.h'}, 'WPyStruct': {'hdr': 'wpystruct.h'}})
+
+def get_type_casters(casters):
+    t = {}
+    get_type_casters_cfg(t)
+    for k, v in t.items():
+        if "hdr" in v:
+            casters[k] = v["hdr"]
\ No newline at end of file
