bazel_dep(name = "rules_python", version = "1.4.1")
bazel_dep(name = "pybind11_bazel", version = "2.13.6")
bazel_dep(name = "bzlmodrio-allwpilib", version = "2025.3.2.bcr1")
bazel_dep(name = "bzlmodrio-opencv", version = "2025.4.10.0-3.bcr2")
bazel_dep(name = "rules_cc", version = "0.0.17")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "aspect_bazel_lib", version = "2.16.0")
bazel_dep(name = "rules_pycross", version = "0.7.1")
bazel_dep(name = "caseyduquettesc_rules_python_pytest", version = "1.1.1", repo_name = "rules_python_pytest")
bazel_dep(name = "rules_semiwrap", version = "")
# local_path_override(
#     module_name = "rules_semiwrap",
#     path = "../rules_semiwrap",
# )

archive_override(
    module_name = "rules_semiwrap",
    integrity = "sha256-YjMo/epyQgYacAtOQcGSE6k+Vv1ZYibi0OwXjvulIzc=",
    strip_prefix = "rules_semiwrap-b0c173f15fe32fa0802ce8e7afd6246a42fed42e",
    urls = ["https://github.com/bzlmodrio/rules_semiwrap/archive/b0c173f15fe32fa0802ce8e7afd6246a42fed42e.tar.gz"],
)

# local_path_override(
#     module_name = "pybind11_bazel",
#     path = "/home/pjreiniger/git/robotpy/pybind11_bazel",
# )

archive_override(
    module_name = "pybind11_bazel",
    integrity = "sha256-iwRj1wuX2pDS6t6DqiCfhIXisv4y+7CvxSJtZoSAzGw=",
    patch_strip = 1,
    patches = [
        "//:0001-Patch-to-robotpy-version.patch",
    ],
    strip_prefix = "pybind11_bazel-2b6082a4d9d163a52299718113fa41e4b7978db5",
    urls = ["https://github.com/pybind/pybind11_bazel/archive/2b6082a4d9d163a52299718113fa41e4b7978db5.tar.gz"],
)

# local_path_override(
#     module_name = "bzlmodrio-allwpilib",
#     # path = "/home/pjreiniger/git/bzlmodrio/monorepo/libraries/bzlmodRio-allwpilib",
#     path = "C:/Users/PJ/git/bzlmodrio/monorepo/libraries/bzlmodRio-allwpilib",
# )

archive_override(
    module_name = "bzlmodrio-allwpilib",
    integrity = "sha256-+K/dv3dAEPT/SMVv6hdDiQADADAB3MGr5OdwKtSigeU=",
    strip_prefix = "bzlmodRio-allwpilib-3e71c27f244dec83a8e4f30b97e94ac92b41b5a8",
    urls = ["https://github.com/bzlmodrio/bzlmodrio-allwpilib/archive/3e71c27f244dec83a8e4f30b97e94ac92b41b5a8.tar.gz"],
)

python = use_extension(
    "@rules_python//python/extensions:python.bzl",
    "python",
    dev_dependency = True,
)
python.defaults(
    # The environment variable takes precedence if set.
    python_version = "3.11",
    python_version_env = "BAZEL_PYTHON_VERSION",
)
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.9",
)
python.toolchain(
    ignore_root_user_error = True,
    python_version = "3.10",
)
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.11",
)
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.12",
)
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.13",
)

# Base requirements
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "mostrobotpy_pip_deps",
    python_version = "3.9",
    requirements_lock = "//requirement_locks/3.9:requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.9:requirements_windows.txt",
)
pip.parse(
    hub_name = "mostrobotpy_pip_deps",
    python_version = "3.10",
    requirements_lock = "//requirement_locks/3.10:requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.10:requirements_windows.txt",
)
pip.parse(
    hub_name = "mostrobotpy_pip_deps",
    python_version = "3.11",
    requirements_lock = "//requirement_locks/3.11:requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.11:requirements_windows.txt",
)
pip.parse(
    hub_name = "mostrobotpy_pip_deps",
    python_version = "3.12",
    requirements_lock = "//requirement_locks/3.12:requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.12:requirements_windows.txt",
)
pip.parse(
    hub_name = "mostrobotpy_pip_deps",
    python_version = "3.13",
    requirements_lock = "//requirement_locks/3.13:requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.13:requirements_windows.txt",
)
use_repo(pip, "mostrobotpy_pip_deps")

# Testing requirements
pip.parse(
    hub_name = "mostrobotpy_tests_pip_deps",
    python_version = "3.9",
    requirements_lock = "//requirement_locks/3.9:testing_requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.9:testing_requirements_windows.txt",
)
pip.parse(
    hub_name = "mostrobotpy_tests_pip_deps",
    python_version = "3.10",
    requirements_lock = "//requirement_locks/3.10:testing_requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.10:testing_requirements_windows.txt",
)
pip.parse(
    hub_name = "mostrobotpy_tests_pip_deps",
    python_version = "3.11",
    requirements_lock = "//requirement_locks/3.11:testing_requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.11:testing_requirements_windows.txt",
)
pip.parse(
    hub_name = "mostrobotpy_tests_pip_deps",
    python_version = "3.12",
    requirements_lock = "//requirement_locks/3.12:testing_requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.12:testing_requirements_windows.txt",
)
pip.parse(
    hub_name = "mostrobotpy_tests_pip_deps",
    python_version = "3.13",
    requirements_lock = "//requirement_locks/3.13:testing_requirements_lock.txt",
    requirements_windows = "//requirement_locks/3.13:testing_requirements_windows.txt",
)
use_repo(pip, "mostrobotpy_tests_pip_deps")
