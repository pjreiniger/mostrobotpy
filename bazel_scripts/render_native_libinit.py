import sys
import pathlib


def render_native_libinit(lib_name, output_file, modules):
    with open(output_file, "w") as f:
        f.write(
            """# This file is automatically generated, DO NOT EDIT
# fmt: off

"""
        )
        print("MODULES", modules)

        for module in modules:
            f.write(f"import {module}\n")

        f.write(
            f"""
def __load_library():
    from os.path import abspath, join, dirname, exists
    from ctypes import cdll

    root = abspath(dirname(__file__))

    lib_path = join(root, 'lib', 'lib{lib_name}.so')

    try:
        return cdll.LoadLibrary(lib_path)
    except FileNotFoundError:
        if not exists(lib_path):
            raise FileNotFoundError("lib{lib_name}.so was not found on your system. Is this package correctly installed?")
        raise FileNotFoundError("lib{lib_name}.so could not be loaded. There is a missing dependency.")

__lib = __load_library()

"""
        )


def main():
    print(sys.argv)
    render_native_libinit(sys.argv[1], pathlib.Path(sys.argv[2]), sys.argv[3:])


if __name__ == "__main__":
    main()
